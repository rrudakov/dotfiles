#+TITLE: My Emacs configuration
#+HTML: <p align="center"> <a href="https://www.gnu.org/software/emacs/"> <img src="https://img.shields.io/badge/GNU%20Emacs-27.0.90-b1.svg?style=plastic"/></a> <a href="https://orgmode.org/"><img src="https://img.shields.io/badge/org--mode-9.3.6-elpalus.svg?style=plastic"/></a> </p>

* Keybindings
** Common
#+BEGIN_SRC text
M-:	Eval command
C-x t   Switch to ansi-terminal or create new
C-x T   Create new ansi-terminal
M-\     delete-horizontal-space
#+END_SRC
** Haskell
#+BEGIN_SRC text
M-q	reformats the current declaration. When inside a comment, it fills the current paragraph instead, like the standard M-q
C-M-\	reformats the current region
#+END_SRC
** Org-mode
#+BEGIN_SRC text
C-c ^		Sort headlines
C-c / 		Prompt to make sparce-tree
C-c - 		Cycle list level ('-', '+', '1.', '1)' etc.)
C-c C-x f	Footnote action command
C-c C-c		When at footnote, go to definition, When at definition, go back to reference
C-c |		Create new table
M-S-<right>	Insert new table column
C-c +		Sum all numbers in current column
C-c C-x p	Insert property
C-c C-x C-d	Display time summaries for each subtree in the current buffer
#+END_SRC
*** Agenda view
#+BEGIN_SRC text
p	Previous period
n	Next period
.	Today
F	Follow mode
#+END_SRC
** Terminal
#+BEGIN_SRC text
C-c C-j Switch to term-line-mode, which you can then treat like a normal emacs buffer (move, yank, etc)
C-c C-k Return to term-char-mode, which will act like a traditional ansi-term
#+END_SRC
** Highlight text in buffer (hi-lock-mode)
#+begin_src text
M-s h w         hi-lock-write-interactive-patterns
M-s h u         unhighlight-regexp
M-s h r         highlight-regexp
M-s h p         highlight-phrase
M-s h l         highlight-lines-matching-regexp
M-s h f         hi-lock-find-patterns
#+end_src
** Helm
#+begin_src text
C-c i   insert current file path to current buffer
C-x c s search using surfraw utility on the web
#+end_src
** Dired
#+begin_src text
C-x C-j dired-jump (Jump to directory of the current buffer)
#+end_src

* Useful commands

* External configuration example
** Define databases connections
#+begin_src emacs-lisp :tangle no
(require 'cl-lib)
(require 'ejc-sql)

(cl-defun rr/create-postgres-connection (name &key hostname dbname username password)
  "Defun postgresql connection with given NAME for ejc package.

Required information is HOSTNAME, DBNAME, USERNAME and PASSWORD"
  (ejc-create-connection
   name
   :classpath "/home/rrudakov/.m2/repository/org/postgresql/postgresql/42.2.5/postgresql-42.2.5.jar"
   :dbtype "postgresql"
   :dbname dbname
   :host hostname
   :port "5432"
   :user username
   :password password))

;; Define connections
(defun rr/setup-connections ()
  "Setup all database connections."
  (progn
    (rr/create-postgres-connection
     "Connection_name"
     :hostname "localhost"
     :dbname "database_name"
     :username "username"
     :password "password")
    ))

(provide 'databases)
#+end_src

* Syntax help
** Org-mode
*** Unordered lists
#+BEGIN_SRC text
Start with '-', '+' or '*' (star not recommended)
#+END_SRC
*** Ordered lists
#+BEGIN_SRC text
Starts with '1.' or '1)'
#+END_SRC
*** Description list
#+BEGIN_SRC text
Unordered lists with separator '::'
#+END_SRC

* Useful functions
** Capitalize first char
#+BEGIN_SRC emacs-lisp
(defun rr/capitalize-first-char (&optional string)
  "Capitalize only the first character of the input STRING."
  (when (and string (> (length string) 0))
    (let ((first-char (substring string nil 1))
          (rest-str   (substring string 1)))
      (concat (capitalize first-char) rest-str))))
#+END_SRC
** Replace org-link with description of if empty its address
#+BEGIN_SRC emacs-lisp
(defun rr/org-replace-link-by-link-description ()
  "Replace an org link by its description or if empty its address."
  (interactive)
  (if (org-in-regexp org-bracket-link-regexp 1)
      (save-excursion
        (let ((remove (list (match-beginning 0) (match-end 0)))
              (description (if (match-end 3)
                               (org-match-string-no-properties 3)
                             (org-match-string-no-properties 1))))
          (apply 'delete-region remove)
          (insert description)))))
#+END_SRC
** Smart toggle flycheck error list window
#+BEGIN_SRC emacs-lisp
(defun rr/flycheck-list-smart-toggle ()
  "Toggle flycheck error list buffer."
  (interactive)
  (if (equal (buffer-name) flycheck-error-list-buffer)
      (quit-window)
    (if (member flycheck-error-list-buffer
                (mapcar 'buffer-name
                        (mapcar 'window-buffer (window-list))))
        (dolist (window (window-list))
          (when (equal flycheck-error-list-buffer
                       (buffer-name (window-buffer window)))
            (quit-window t window)))
      (flycheck-list-errors))))
#+END_SRC
** Update vc-state in all buffers
#+BEGIN_SRC emacs-lisp
(defun rr/refresh-vc-state ()
  "Refresh `vc-state' on all buffers."
  (dolist (buff (buffer-list))
    (with-current-buffer buff
      (when (vc-mode)
        (vc-refresh-state)))))
#+END_SRC
** Reset font-lock for all org-mode buffers
#+begin_src emacs-lisp
(defun rr/refresh-org-buffers ()
  "Reset font-lock on all org-mode buffers."
  (dolist (buff (buffer-list))
    (with-current-buffer buff
      (when (eq major-mode 'org-mode)
        (normal-mode)))))
#+end_src
** Prefer split windows side-by-side
#+begin_src emacs-lisp
(defun split-window-prefer-side-by-side (&optional window)
  (let ((split-height-threshold (and (< (window-width window)
                                        split-width-threshold)
                                     split-height-threshold)))
    (split-window-sensibly window)))
#+end_src
** Set margins
#+begin_src emacs-lisp
(defun rr/set-margins ()
  "Set margins in current buffer."
  (setq left-margin-width 3)
  (setq right-margin-width 3))
#+end_src
** Copy file name to clipboard from dired
#+begin_src emacs-lisp
(defun prelude-copy-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))
#+end_src

* Create my personal keymap
#+begin_src emacs-lisp
(defvar rr-lsp-keymap
  (make-sparse-keymap)
  "My personal keymap for LSP mode.")
#+end_src

* Define some variables
#+begin_src emacs-lisp
(defconst rr-savefile-dir (expand-file-name "savefile" user-emacs-directory)
  "Declare variable for save file directory.")

(defconst rr-backup-dir (expand-file-name "backup" user-emacs-directory)
  "Declare variable for all backup files.")
#+end_src

* Configuration
** Load my secret tokens
#+BEGIN_SRC emacs-lisp
(require 'mysecret nil t)
#+END_SRC
** Auth sources settings
#+begin_src emacs-lisp
(setq auth-source-save-behavior nil)
#+end_src
** Unset some unused keybindings
#+begin_src emacs-lisp
(global-unset-key (kbd "C-z"))
(global-unset-key (kbd "C-x C-z"))
#+end_src
** Increase amount of data which emacs reads from the process
#+begin_src emacs-lisp
(setq read-process-output-max (* 4 1024 1024))
#+end_src
** Increase max number of Lisp variable bindings
#+begin_src emacs-lisp
(setq max-specpdl-size 3200)
#+end_src
** Auto saving settings
#+begin_src emacs-lisp
;; create the savefile dir if it doesn't exist
(unless (file-exists-p rr-savefile-dir)
  (make-directory rr-savefile-dir))

;; store all backup and autosave files in the tmp dir
(setq backup-directory-alist
      `((".*" . ,rr-backup-dir)))

;; Silently delete execess backup versions
(setq delete-old-versions t)

;; Only keep the last 10 backups of a file.
(setq kept-old-versions 10)

;; Do not print messages in the minibuffer
(setq auto-save-no-message t)

;; Even version controlled files get to be backed up.
;; (setq vc-make-backup-files t)

;; Use version numbers for backup files.
;; (setq version-control t)
#+end_src
** Avoid creating lock files
#+begin_src emacs-lisp
(setq create-lockfiles nil)
#+end_src
** Set tab width
#+begin_src emacs-lisp
(setq-default tab-width 2)
#+end_src
** COMMENT Set default margins
#+begin_src emacs-lisp
(setq-default left-margin-width 1)
(setq-default right-margin-width 1)
#+end_src
** Display fringe outside margins
#+begin_src emacs-lisp
(setq-default fringes-outside-margins t)
#+end_src
** Replace selected text on input
#+BEGIN_SRC emacs-lisp
(delete-selection-mode)
#+END_SRC
** Built-in help mode
#+begin_src emacs-lisp
(use-package help
  :ensure nil
  :config
  (setq help-window-select t))
#+end_src
** Mouse settings
*** Disable tooltips completely
#+BEGIN_SRC emacs-lisp
(use-package tooltip
  :ensure nil
  :config
  (tooltip-mode -1)
  (setq tooltip-use-echo-area nil
        show-help-function nil))
#+END_SRC
*** Move mouse away from text
#+begin_src emacs-lisp
(use-package avoid
  :config
  (if (display-mouse-p)
      (mouse-avoidance-mode 'banish)))
#+end_src
** Common
:PROPERTIES:
:VISIBILITY: folded
:END:
*** TLS default settings
#+BEGIN_SRC emacs-lisp
(setq gnutls-min-prime-bits 4096)
#+END_SRC
*** Prefer newer files to load
#+begin_src emacs-lisp
(setq load-prefer-newer t)
#+end_src
*** Do not indicate empty lines at the end of the window in the left fringe
#+BEGIN_SRC emacs-lisp
(setq-default indicate-empty-lines nil)
#+END_SRC
*** Enable y/n answers instead of yes/no
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Highlight current line
#+BEGIN_SRC emacs-lisp
(use-package hl-line
  :config
  (setq hl-line-sticky-flag nil)
  (add-hook 'prog-mode-hook 'hl-line-mode))
#+END_SRC
*** COMMENT Set default font
Good choices:
+ [[https://slackbuilds.org/repository/14.2/system/Iosevka/][Iosevka]]
+ [[https://github.com/mozilla/Fira][Fira Mono]]
+ [[https://github.com/adobe-fonts/source-code-pro][SourceCodePro]] :: Currently used
+ [[https://slackbuilds.org/repository/14.2/system/hack-font-ttf/][Hack]]
At the moment I set default font using ~~/.Xresources~ file.
#+BEGIN_SRC emacs-lisp
(let ((my-font "Source Code Variable-11")
      (font-sets '("fontset-default"
                   "fontset-standard"
                   "fontset-startup")))
  (mapcar
   (lambda (font-set)
     ;; all the characters in that range (which is the full possible range)
     (set-fontset-font font-set '(#x000000 . #x3FFFFF) my-font)
     (set-face-font 'default my-font)
     ;; (set-face-attribute 'default nil :weight 'semi-bold)

     ;; for all characters without font specification
     ;; in another words it is a setting for lack of fallback font
     ;; if e.g. ℕ called DOUBLE-STRUCK CAPITAL N is not covered by our font
     ;; it will be displayed as placeholder-box,
     ;; because fallback for our font is now... our font :)
     (set-fontset-font font-set nil my-font))
   font-sets))
#+END_SRC
*** Disable variable pitch at all
#+begin_src emacs-lisp
(let ((default-font (face-attribute 'default :family)))
  (set-face-attribute 'variable-pitch nil :family default-font))
#+end_src
*** Open files ends with "rc" in conf-unix-mode
#+BEGIN_SRC emacs-lisp
(use-package conf-mode
  :mode ("\\.*rc$" . conf-unix-mode))
#+END_SRC
*** Set specific browser to open links
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-firefox)
#+END_SRC
*** Use UTF-8 as default coding system
#+BEGIN_SRC emacs-lisp
(when (fboundp 'set-charset-priority)
  (set-charset-priority 'unicode))
(prefer-coding-system        'utf-8)
(set-terminal-coding-system  'utf-8)
(set-keyboard-coding-system  'utf-8)
(set-selection-coding-system 'utf-8)
(setq locale-coding-system   'utf-8)
(setq-default buffer-file-coding-system 'utf-8)
#+END_SRC
*** Some useful settings
Picked mostly from doom-emacs configuration.
#+BEGIN_SRC emacs-lisp
(setq-default
 ;; ad-redefinition-action 'accept   ; silence advised function warnings
 apropos-do-all t                 ; make `apropos' more useful

 ;; History & backup settings (save nothing, that's what git is for)
 history-length 50
 indent-tabs-mode nil)

(setq x-wait-for-event-timeout 0)

(setq-default
 cursor-in-non-selected-windows nil  ; hide cursors in other windows
 frame-inhibit-implied-resize t
 ;; remove continuation arrow on right fringe
 fringe-indicator-alist (delq (assq 'continuation fringe-indicator-alist)
                              fringe-indicator-alist)
 highlight-nonselected-windows nil
 image-animate-loop t
 indicate-buffer-boundaries nil
 max-mini-window-height 0.3
 mode-line-default-help-echo nil ; disable mode-line mouseovers
 mouse-yank-at-point t           ; middle-click paste at point, not at click
 resize-mini-windows 'grow-only  ; Minibuffer resizing
 show-help-function nil          ; hide :help-echo text
 use-dialog-box nil              ; always avoid GUI

 ;; no beeping or blinking please
 ring-bell-function #'ignore
 visible-bell nil)
#+END_SRC
*** Be quiet at startup
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t
      inhibit-startup-echo-area-message user-login-name
      initial-scratch-message nil)
#+END_SRC
*** Unique buffer names
#+begin_src emacs-lisp
(use-package uniquify
  :ensure nil
  :config
  (setq uniquify-separator "/"
        uniquify-buffer-name-style 'forward))
#+end_src
*** More reliable inter-window border
The native border "consumes" a pixel of the fringe on righter-most splits,
=window-divider= does not. Available since Emacs 25.1.
#+BEGIN_SRC emacs-lisp
(setq-default window-divider-default-places t
              window-divider-default-bottom-width 0
              window-divider-default-right-width 1)
(window-divider-mode +1)
#+END_SRC
*** Graphic mode settings
#+BEGIN_SRC emacs-lisp
(defun rr/graphic-mode-settings ()
  "Setup for current FRAME."
  (setq-default line-spacing 0)
  ;; buffer name  in frame title
  (setq frame-title-format '("" "%b @ Emacs")))

(if (daemonp)
    (add-hook 'server-after-make-frame-hook #'rr/graphic-mode-settings)
  (rr/graphic-mode-settings))
#+END_SRC
*** Settings for tramp-mode
#+BEGIN_SRC emacs-lisp
(use-package tramp
  :config
  (setq tramp-terminal-type "tramp"
        tramp-default-method "ssh"
        tramp-ssh-controlmaster-options "-o ControlMaster=auto -o ControlPath='tramp.%%C'"
        explicit-shell-file-name "/bin/bash"
        remote-file-name-inhibit-cache 3600
        tramp-completion-reread-directory-timeout nil
        vc-ignore-dir-regexp (format "\\(%s\\)\\|\\(%s\\)"
                                     vc-ignore-dir-regexp
                                     tramp-file-name-regexp)
        tramp-verbose 1
        auto-revert-remote-files nil)
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path))
#+END_SRC
*** Set default input method
#+BEGIN_SRC emacs-lisp
(setq default-input-method "russian-computer")
#+END_SRC
*** EPA
#+BEGIN_SRC emacs-lisp
(setq epg-pinentry-mode 'loopback)
#+END_SRC
*** Default mode
#+BEGIN_SRC emacs-lisp
(setq-default major-mode 'text-mode)
#+END_SRC
*** Fill column
#+BEGIN_SRC emacs-lisp
(setq-default fill-column 79)
(add-hook 'text-mode-hook #'auto-fill-mode)
#+END_SRC
*** Auto revert changes
#+BEGIN_SRC emacs-lisp
(use-package autorevert
  :ensure nil
  :config
  (setq auto-revert-verbose nil
        global-auto-revert-non-file-buffers t)
  (global-auto-revert-mode 1))
#+END_SRC
*** Recent files
#+BEGIN_SRC emacs-lisp
(use-package recentf
  :config
  (setq recentf-save-file (expand-file-name "recentf" rr-savefile-dir)
        recentf-max-saved-items 50
        recentf-max-menu-items 15)
  (add-to-list 'recentf-exclude (expand-file-name "~/.emacs.d/"))
  (recentf-mode +1))
#+END_SRC
*** Imenu
#+BEGIN_SRC emacs-lisp
(use-package imenu
  :config
  (setq imenu-auto-rescan t
        imenu-max-item-length 160
        imenu-max-items 100))
#+END_SRC
*** More convenient scrolling settings
#+begin_src emacs-lisp
(setq scroll-margin 3
      scroll-conservatively 101
      scroll-up-aggressively 0.01
      scroll-down-aggressively 0.01
      scroll-preserve-screen-position t
      auto-window-vscroll nil)
#+end_src
*** Single line horizontal scrolling
#+BEGIN_SRC emacs-lisp
(setq auto-hscroll-mode t)
#+END_SRC
*** Navigation by subwords
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'subword-mode)
#+end_src
*** Set minimal height of window
#+BEGIN_SRC emacs-lisp
(setq window-min-height 10)
#+END_SRC
*** Ediff settings
#+BEGIN_SRC emacs-lisp
(use-package ediff
  :config
  (setq ediff-window-setup-function #'ediff-setup-windows-plain
        ediff-split-window-function #'split-window-right))
#+END_SRC
*** Smerge
#+begin_src emacs-lisp
(use-package smerge-mode)
#+end_src
*** ANSI colors
#+BEGIN_SRC emacs-lisp
(use-package ansi-color
  :config
  (setq ansi-color-for-comint-mode t)
  (defun colorize-compilation-buffer ()
    "Use ansi colors to colorize compipaiton buffer."
    (toggle-read-only)
    (ansi-color-apply-on-region compilation-filter-start (point))
    (toggle-read-only))

  (add-hook 'shell-mode-hook #'ansi-color-for-comint-mode-on)
  (add-hook 'compilation-filter-hook #'colorize-compilation-buffer))
#+END_SRC
*** Compilation mode settings
#+BEGIN_SRC emacs-lisp
(use-package compile
  :ensure nil
  :config
  (setq-default compilation-always-kill t        ; kill compilation process before starting another
                compilation-ask-about-save nil   ; save all buffers on `compile'
                compilation-scroll-output t
                confirm-nonexistent-file-or-buffer t)
  (define-key compilation-mode-map (kbd "q") #'delete-window))
#+END_SRC
*** Unclassified settings
No more ugly line splitting
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook (lambda () (setq-local truncate-lines t)))
#+END_SRC
*** Save minibuffer history between sessions
#+BEGIN_SRC emacs-lisp
(use-package savehist
  :ensure nil
  :config
  (setq history-delete-duplicates t
        savehist-save-minibuffer-history 1
        savehist-file (expand-file-name "savehist" rr-savefile-dir)
        savehist-additional-variables '(kill-ring
                                        search-ring
                                        regexp-search-ring
                                        shell-command-history))
  (savehist-mode +1))
#+END_SRC
*** Kill-ring
Save stuff you’ve copied in other applications to the emacs kill-ring.
#+begin_src emacs-lisp
(setq save-interprogram-paste-before-kill t)
#+end_src
*** Increase max lines in messages buffer
#+begin_src emacs-lisp
(setq message-log-max 1000)
#+end_src
*** Fix helm issue
#+begin_src emacs-lisp
(setq x-wait-for-event-timeout nil)
#+end_src
*** Enable recursive minibuffers
#+begin_src emacs-lisp
(setq enable-recursive-minibuffers t)
#+end_src
*** Large files treshold
#+begin_src emacs-lisp
(setq large-file-warning-threshold (* 100 1024 1024))
#+end_src
*** Cleanup trailing spaces before save
#+begin_src emacs-lisp
(add-hook 'before-save-hook #'delete-trailing-whitespace)
#+end_src
*** Show column number
#+begin_src emacs-lisp
(column-number-mode)
#+end_src
*** Use built-in tooltips
#+begin_src emacs-lisp
(setq x-gtk-use-system-tooltips nil)
#+end_src
*** Windows splitting preferences
#+begin_src emacs-lisp
(setq split-window-preferred-function #'split-window-prefer-side-by-side)
#+end_src
*** Confirm kill emacs
#+BEGIN_SRC emacs-lisp
(setq confirm-kill-processes nil
      confirm-kill-emacs nil)
#+END_SRC
** Files local variables behaviour
#+begin_src emacs-lisp
(use-package files
  :ensure nil
  :config
  (setq enable-local-variables t))
#+end_src
** Asynchronous processing in Emacs
#+begin_src emacs-lisp
(use-package async
  :config
  (autoload 'dired-async-mode "dired-async.el" nil t)
  (setq async-bytecomp-allowed-packages 'all)
  (dired-async-mode 1)
  (async-bytecomp-package-mode 1))
#+end_src
** Set the same PATH as in shell
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :config
  (exec-path-from-shell-initialize))
#+end_src
** Some useful commands
#+begin_src emacs-lisp
(use-package misc-cmds
  :config
  (define-key global-map [remap quit-window] 'quit-window-delete))
#+end_src
** Theme
*** Color scheme
**** Zenburn theme
#+BEGIN_SRC emacs-lisp
(use-package zenburn-theme
  :config
  (setq zenburn-use-variable-pitch nil)

  (defun rr/apply-theme ()
    "Apply some customizaitons to current theme."
    (load-theme 'zenburn t)
    (let ((dim "dim gray")
          (default-font (face-attribute 'default :family)))
      (zenburn-with-color-variables
       (custom-theme-set-faces
        'user
        ;; Helm
        `(helm-delete-async-message ((t (:foreground ,zenburn-yellow))))
        `(helm-selection ((t (:extend t))))
        `(helm-ff-file ((t (:foreground ,zenburn-fg :background ,zenburn-bg :weight semi-bold))))
        `(helm-ff-executable ((t (:foreground ,zenburn-green+2 :background ,zenburn-bg :weight semi-bold))))
        `(helm-ff-prefix ((t (:foreground ,zenburn-bg :background ,zenburn-yellow :weight semi-bold))))
        `(helm-ff-file-extension ((t (:foreground ,zenburn-magenta :extend t))))
        ;; Highlight line
        ;; `(hl-line ((t (:extend t :background "#5F5F5F"))))
        ;; `(hl-line-face ((((class color) (min-colors 89)) (:background "#5F5F5F")) (t :weight bold)))
        ;; Different
        `(link-visited ((t (:foreground ,zenburn-yellow-2 :underline t))))
        ;; CIDER
        `(cider-stacktrace-filter-inactive-face ((t (:inherit button :underline nil :weight semi-bold))))
        `(cider-stacktrace-filter-active-face ((t (:inherit button :underline t :weight semi-bold))))
        ;; Flycheck posframe
        `(flycheck-posframe-info-face ((t (:inherit 'success))))
        `(flycheck-posframe-warning-face ((t (:inherit 'warning))))
        `(flycheck-posframe-error-face ((t (:inherit 'error))))
        `(flycheck-posframe-background-face ((t (:background ,zenburn-bg+05))))
        `(flycheck-posframe-border-face ((t (:foreground ,dim))))
        ;; Eyebrowse
        `(eyebrowse-mode-line-active ((t (:inherit 'mode-line-emphasis :foreground ,zenburn-yellow))))
        `(eyebrowse-mode-line-inactive ((t (:foreground ,dim))))
        ;; Magit
        `(magit-popup-disabled-argument ((t (:foreground ,zenburn-fg-1 :weight semi-bold))))
        `(magit-filename ((t (:weight semi-bold))))
        ;; VC state
        `(vc-edited-state ((t :inherit 'vc-state-base :foreground ,zenburn-blue)))
        `(vc-up-to-date-state ((t :inherit 'vc-state-base :foreground ,zenburn-green+4)))
        `(vc-removed-state ((t :inherit 'vc-state-base :foreground ,zenburn-red)))
        `(vc-conflict-state ((t :inherit 'vc-state-base :foreground ,zenburn-orange)))
        `(vc-locally-added-state ((t :inherit 'vc-state-base :foreground ,zenburn-fg)))
        `(vc-needs-update-state ((t :inherit 'vc-state-base :foreground ,zenburn-yellow)))
        `(vc-missing-state ((t :inherit 'vc-state-base :foreground ,zenburn-fg-05)))
        ;; Set fringe color the same as background
        `(fringe ((t (:background ,zenburn-bg))))
        ;; Less contrast window divider
        `(window-divider ((t (:foreground ,dim))))
        ;; Emphasize code block in markdown mode
        `(markdown-code-face ((t (:background ,zenburn-bg+05 :extend t))))
        ;; Less contrast lsp-ui code actions
        `(lsp-ui-sideline-code-action ((t (:foreground ,dim))))
        `(lsp-face-highlight-textual ((t (:inherit 'highlight :weight bold))))
        ;; LaTeX
        `(font-latex-slide-title-face ((t (:height 1.0 :inherit font-lock-type-face))))
        ;; Tab bar mode
        `(tab-bar ((t (:family ,default-font :background ,zenburn-bg-05))))
        `(tab-bar-tab ((t (:family ,default-font :background ,zenburn-bg))))
        `(tab-bar-tab-inactive ((t (:family ,default-font))))
        ;; Clickable text
        `(button ((t (:foreground ,zenburn-yellow :weight bold))))
        ;; Some org-mode faces
        `(org-done ((t (:strike-through t))))
        `(org-checkbox ((t (:box nil :background nil))))
        `(org-headline-done ((t (:foreground ,dim :strike-through t))))
        `(org-mode-line-clock ((t (:background nil))))
        `(org-table ((t (:background ,zenburn-bg-05))))
        `(org-tag ((t (:background ,zenburn-bg+1 :foreground ,zenburn-red)))))))
    (remove-hook 'server-after-make-frame-hook 'rr/apply-theme))

  (if (daemonp)
      (add-hook 'server-after-make-frame-hook #'rr/apply-theme)
    (rr/apply-theme))

  (with-eval-after-load 'zenburn
    (rr/refresh-org-buffers)))
#+END_SRC
**** COMMENT Modus vivendi
#+begin_src emacs-lisp
(use-package modus-vivendi-theme
  :init
  (setq modus-vivendi-theme-slanted-constructs nil
        modus-vivendi-theme-bold-constructs t
        modus-vivendi-theme-visible-fringes nil
        modus-vivendi-theme-3d-modeline nil
        modus-vivendi-theme-subtle-diffs t
        modus-vivendi-theme-distinct-org-blocks t
        modus-vivendi-theme-proportional-fonts nil
        modus-vivendi-theme-rainbow-headings nil
        modus-vivendi-theme-section-headings nil
        modus-vivendi-theme-scale-headings nil)
  :config
  (defun rr/apply-modus-theme ()
    "Apply custom theme."
    (load-theme 'modus-vivendi t)
    (remove-hook 'server-after-make-frame-hook #'rr/apply-modus-theme))

  (if (daemonp)
      (add-hook 'server-after-make-frame-hook #'rr/apply-modus-theme)
    (rr/apply-modus-theme)))
#+end_src
**** COMMENT Tomorrow night
#+begin_src emacs-lisp
(use-package color-theme-sanityinc-tomorrow
  :config
  (defun rr/apply-tomorrow-theme ()
    "Apply custom theme."
    (load-theme 'sanityinc-tomorrow-night t)
    (let ((background "#1d1f21")
          (selection "#373b41")
          (red "#cc6666"))
      (custom-theme-set-faces
       'user
       `(fringe ((t (:background ,background))))
       `(org-tag ((t (:background ,selection :foreground ,red))))
       `(org-block ((t (:extend t))))))
    (remove-hook 'server-after-make-frame-hook #'rr/apply-tomorrow-theme))

  (if (daemonp)
      (add-hook 'server-after-make-frame-hook #'rr/apply-tomorrow-theme)
    (rr/apply-tomorrow-theme)))
#+end_src
*** Modeline
**** Custom functions
***** Flycheck status
#+BEGIN_SRC emacs-lisp
(defun rr/flycheck-mode-line-status-text (&optional status)
  "Get a text describing STATUS for use in the mode line.

STATUS defaults to `flycheck-last-status-change' if omitted or
nil."
  (let ((text (pcase (or status flycheck-last-status-change)
                (`not-checked "")
                (`no-checker "- ")
                (`running "* ")
                (`errored "! ")
                (`finished
                 (let-alist (flycheck-count-errors flycheck-current-errors)
                   (concat
                    (propertize (format " • %s " (or .error "✓")) 'face `(:inherit error))
                    (propertize (format "• %s " (or .warning "✓")) 'face `(:inherit warning))
                    (propertize (format "• %s " (or .info "✓")) 'face `(:inherit success))
                    )))
                (`interrupted ". ")
                (`suspicious "? "))))
    (propertize text)))

(add-to-list 'global-mode-string '(:eval (rr/flycheck-mode-line-status-text)))
#+END_SRC
**** Custom modeline
***** Minions
#+begin_src emacs-lisp
(use-package minions
  :config
  (setq minions-direct '(pyvenv-mode projectile-mode))
  (minions-mode 1))
#+end_src
** Shell settings
#+begin_src emacs-lisp
(use-package shell
  :ensure nil
  :config
  (setq shell-command-prompt-show-cwd t))

(use-package comint
  :ensure nil
  :config
  (setq comint-scroll-to-bottom-on-input t
        comint-move-point-for-output t
        comint-prompt-read-only t
        comint-input-ignoredups t
        comint-completion-addsuffix t))
#+end_src
** EShell settings
#+begin_src emacs-lisp
(use-package esh-mode
  :ensure nil
  :config
  (setq eshell-scroll-to-bottom-on-input t
        eshell-scroll-to-bottom-on-output t
        eshell-destroy-buffer-when-process-dies t))
#+end_src
** Built-in web browser and HTML parser
#+begin_src emacs-lisp
(use-package shr
  :commands (eww eww-browse-url)
  :config
  (setq shr-use-fonts nil
        shr-use-colors nil
        shr-max-image-proportion 0.2
        shr-table-horizontal-line nil
        shr-table-vertical-line ?\s
        shr-table-corner ?\s
        shr-width (current-fill-column)))
#+end_src
And third party package for proper syntax highlighting for pre tags in HTML:
#+begin_src emacs-lisp
(use-package shr-tag-pre-highlight
  :ensure t
  :after shr
  :config
  (add-to-list 'shr-external-rendering-functions
               '(pre . shr-tag-pre-highlight))
  (when (version< emacs-version "26")
    (with-eval-after-load 'eww
      (advice-add 'eww-display-html :around
                  'eww-display-html--override-shr-external-rendering-functions))))
#+end_src
** Spell checking
#+begin_src emacs-lisp
(use-package ispell
  :config
  (setq ispell-program-name "aspell")
  (add-hook 'text-mode-hook #'flyspell-mode)
  (add-hook 'prog-mode-hook #'flyspell-prog-mode))
#+end_src
** Remember location in files
#+begin_src emacs-lisp
(use-package saveplace
  :config
  (setq save-place-file (expand-file-name "saveplace" rr-savefile-dir))
  (save-place-mode 1))
#+end_src
** SQL
*** Emacs clojure database client
#+begin_src emacs-lisp
(use-package ejc-sql
  :config
  (defun rr/ejc-sql-connected-hook ()
    (ejc-set-rows-limit 500)
    (ejc-set-column-width-limit nil))

  (add-hook 'ejc-sql-connected-hook #'rr/ejc-sql-connected-hook)

  (setq ejc-org-mode-show-results nil)

  (add-hook 'ejc-sql-minor-mode-hook
            (lambda ()
              (auto-complete-mode t)
              (ejc-ac-setup)))

  ;; Define connections
  (when (require 'databases nil t)
    (rr/setup-connections)))
#+end_src
*** Make PostgreSQL default
#+BEGIN_SRC emacs-lisp
(eval-after-load "sql"
  '(progn
     (sql-set-product 'postgres)))
#+END_SRC
*** Disable line breaking
#+BEGIN_SRC emacs-lisp
(add-hook 'sql-interactive-mode-hook
          (lambda ()
            (toggle-truncate-lines t)))
#+END_SRC
** Which key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (which-key-mode))
#+END_SRC
** YASnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :init
  (yas-global-mode)
  :config
  (setq yas-indent-line 'fixed
        yas-inhibit-overlay-modification-protection t))
#+END_SRC
** Auto complete
*** Common
#+BEGIN_SRC emacs-lisp
(use-package company
  :config
  (setq company-global-modes '(not org-mode markdown-mode shell-mode eshell-mode))
  (setq company-frontends '(company-pseudo-tooltip-frontend
                            company-echo-metadata-frontend))

  (setq company-tooltip-align-annotations t
        company-idle-delay 0.1)

  (global-company-mode +1))
#+END_SRC
*** Quick help
#+BEGIN_SRC emacs-lisp
(use-package company-quickhelp
  :config
  (setq company-quickhelp-use-propertized-text t)
  (company-quickhelp-mode 1))
#+END_SRC
*** COMMENT Show completion in posframe
#+begin_src emacs-lisp
(use-package company-posframe
  :config
  (setq company-posframe-show-indicator nil
        company-posframe-quickhelp-show-header nil)
  (company-posframe-mode 1))
#+end_src
*** Languages
**** LaTeX
#+BEGIN_SRC emacs-lisp
(use-package company-auctex
  :config
  (company-auctex-init))
#+END_SRC
**** WEB
#+BEGIN_SRC emacs-lisp
(use-package company-web
  :config
  (add-to-list 'company-backends #'company-web-html)
  (add-to-list 'company-backends #'company-web-jade)
  (add-to-list 'company-backends #'company-web-slim))
#+END_SRC
**** Shell
#+BEGIN_SRC emacs-lisp
(use-package company-shell
  :config
  (add-to-list 'company-backends #'company-shell))
#+END_SRC
** Completion styles setup
#+begin_src emacs-lisp
(use-package minibuffer
  :ensure nil
  :config
  (setq completion-styles '(basic partial-completion emacs22 initials flex))
  (minibuffer-electric-default-mode 1))
#+end_src
** Isearch built-in settings
#+begin_src emacs-lisp
(use-package isearch
  :ensure nil
  :config
  (setq search-whitespace-regexp ".*?"
        isearch-lazy-count t
        lazy-count-prefix-format "(%s/%s) "
        isearch-allow-scroll 'unlimited))
#+end_src
** Xref
#+begin_src emacs-lisp
(use-package xref
  :config
  (setq xref-file-name-display 'nondirectory
        xref-prompt-for-identifier nil))
#+end_src
** Helm
*** Configuration
#+BEGIN_SRC emacs-lisp
(use-package helm
  :config
  (require 'helm)
  (require 'helm-config)

  (when (executable-find "curl")
    (setq helm-google-suggest-use-curl-p t))

  (setq helm-split-window-inside-p            nil ; open helm buffer inside current window, not occupy whole other window
	    helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
	    helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
	    helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
	    helm-ff-file-name-history-use-recentf t
	    helm-echo-input-in-header-line nil
	    helm-display-header-line nil
	    helm-buffer-max-length 40
	    helm-ff-delete-files-function #'helm-delete-marked-files-async
	    helm-inherit-input-method nil
        helm-truncate-lines t
        helm-buffers-truncate-lines t)

  ;; Remove all distracting information from helm modeline
  (setq helm-mode-line-string "\\<helm-map>"
        helm-top-mode-line "\\<helm-top-map>"
        helm-comp-read-mode-line "\\<helm-comp-read-map>"
        helm-read-file-name-mode-line-string "\\<helm-read-file-map>")

  (require 'helm-files)

  (with-eval-after-load 'helm
    (define-key global-map [remap find-file] #'helm-find-files)
    (define-key global-map [remap occur] #'helm-occur)
    (define-key global-map [remap switch-to-buffer] #'helm-mini)
    (define-key global-map [remap dabbrev-expand] #'helm-dabbrev)
    (define-key global-map [remap execute-extended-command] #'helm-M-x)
    (define-key global-map [remap yank-pop] #'helm-show-kill-ring)

    (define-key lisp-interaction-mode-map [remap completion-at-point] #'helm-lisp-completion-at-point)
    (define-key emacs-lisp-mode-map       [remap completion-at-point] #'helm-lisp-completion-at-point)

    (define-key helm-find-files-map (kbd "C-i") #'helm-ff-TAB))

  (add-hook 'eshell-mode-hook
	        (lambda ()
	          (eshell-cmpl-initialize)
	          (define-key eshell-mode-map [remap eshell-pcomplete] #'helm-esh-pcomplete)
	          (define-key eshell-mode-map (kbd "M-p") #'helm-eshell-history)))

  (setq helm-display-function #'display-buffer)
  (setq helm-show-completion-display-function #'display-buffer)
  (setq helm-adaptive-history-file (expand-file-name "helm-adaptive-history" rr-savefile-dir))

  (require 'helm-grep)
  (setq helm-grep-default-command "grep --color=never -a -d skip %e -n%cH -e %p %f"
        helm-grep-git-grep-command "git --no-pager grep -n%cH --color=never --full-name -e %p -- %f")

  (helm-mode 1)
  (helm-adaptive-mode 1))
#+END_SRC
*** Helm flycheck
#+BEGIN_SRC emacs-lisp
(use-package helm-flycheck
  :after flycheck
  :config
  (eval-after-load 'flycheck
    '(define-key flycheck-mode-map (kbd "C-'") #'helm-flycheck)))
#+END_SRC
*** Helm org rifle
#+begin_src emacs-lisp
(use-package helm-org-rifle
  :after helm
  :bind (("C-x c o" . helm-org-rifle-agenda-files)))
#+end_src
*** Helm xref
#+begin_src emacs-lisp
(use-package helm-xref
  :after helm)
#+end_src
*** Helm lsp integration
#+begin_src emacs-lisp
(use-package helm-lsp
  :bind (("C-x c j" . helm-lsp-workspace-symbol)))
#+end_src
*** Helm describe bindings
#+begin_src emacs-lisp
(use-package helm-descbinds
  :config
  (helm-descbinds-mode))
#+end_src
** COMMENT Ivy
*** Configuration
#+begin_src emacs-lisp
(use-package ivy
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-read-action-function #'ivy-read-action-ivy)

  (setq counsel-describe-variable-function #'helpful-variable
        counsel-describe-function-function #'helpful-function)

  (setq search-default-mode #'char-fold-to-regexp)

  ;; Key bindings
  (global-set-key (kbd "C-s") #'swiper-isearch)
  (global-set-key (kbd "C-c C-r") #'ivy-resume)
  (define-key global-map [remap occur] #'counsel-rg)
  (define-key global-map (kbd "C-h v") #'counsel-describe-variable)
  (define-key global-map (kbd "C-h f") #'counsel-describe-function)
  (global-set-key (kbd "M-x") #'counsel-M-x)
  (global-set-key (kbd "C-x C-f") #'counsel-find-file)
  (global-set-key (kbd "C-x j") #'counsel-semantic-or-imenu)
  (global-set-key (kbd "C-x b") #'ivy-switch-buffer)
  (global-set-key (kbd "M-y") #'counsel-yank-pop)
  (define-key minibuffer-local-map (kbd "C-r") #'counsel-minibuffer-history)

  (ivy-set-occur 'counsel-rg 'counsel-ag-occur)
  (ivy-set-occur 'ivy-switch-buffer 'ivy-switch-buffer-occur)
  (ivy-set-occur 'swiper 'swiper-occur)
  (ivy-set-occur 'swiper-isearch 'swiper-occur)

  (setq ivy-height-alist
        '((counsel-evil-registers . 5)
          (counsel-yank-pop . 10)
          (counsel-el . 7)))

  (setq ivy-re-builders-alist
        '((counsel-rg . ivy--regex-or-literal)
          (t . ivy--regex-plus))))

(use-package counsel
  :after ivy
  :config
  (setq counsel-yank-pop-separator "\n——————————————————\n"))
#+end_src
*** Ivy rich
Add some fancy information to ivy minibuffer.
#+begin_src emacs-lisp
(use-package ivy-rich
  :config
  (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
  (setq ivy-rich-path-style 'abbreviate)
  (ivy-rich-mode 1))
#+end_src
*** Posframe
#+begin_src emacs-lisp
(use-package ivy-posframe
  :config
  (setq ivy-posframe-display-functions-alist
      '((swiper          . nil)
        (complete-symbol . ivy-posframe-display-at-point)
        (t               . ivy-posframe-display-at-frame-center)))
  (ivy-posframe-mode 1))
#+end_src
*** Ivy xref
#+begin_src emacs-lisp
(use-package ivy-xref
  :config
  (setq xref-show-xrefs-function 'ivy-xref-show-xrefs)
  (setq xref-show-definitions-function #'ivy-xref-show-defs))
#+end_src
*** Smex
Better sorting for counsel/ivy
#+begin_src emacs-lisp
(use-package smex)
#+end_src
** Smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens-config
  :ensure smartparens
  :config
  (setq sp-show-pair-from-inside nil
        sp-highlight-pair-overlay nil
        sp-highlight-wrap-overlay nil
        sp-highlight-wrap-tag-overlay nil
        sp-wrap-respect-direction nil
        sp-navigate-interactive-always-progress-point t)

  (sp-with-modes 'web-mode
    (sp-local-pair "%" "%" :wrap "C-%")
    (sp-local-pair "<" ">" :wrap "C->"))

  (define-key smartparens-mode-map (kbd "C-c (") #'sp-wrap-round)
  (define-key smartparens-mode-map (kbd "C-c {") #'sp-wrap-curly)
  (define-key smartparens-mode-map (kbd "C-c [") #'sp-wrap-square)
  (define-key smartparens-mode-map (kbd "M-]") #'sp-unwrap-sexp)

  (define-key smartparens-mode-map (kbd "C-(") #'sp-backward-slurp-sexp)
  (define-key smartparens-mode-map (kbd "C-)") #'sp-forward-slurp-sexp)
  (define-key smartparens-mode-map (kbd "C-}") #'sp-forward-barf-sexp)
  (define-key smartparens-mode-map (kbd "C-{") #'sp-backward-barf-sexp)
  (define-key smartparens-mode-map (kbd "C-M-t") #'sp-transpose-sexp)
  (define-key smartparens-mode-map (kbd "C-M-k") #'sp-kill-sexp)
  (define-key smartparens-mode-map (kbd "C-M-f") #'sp-forward-sexp)
  (define-key smartparens-mode-map (kbd "C-M-b") #'sp-backward-sexp)
  (define-key smartparens-mode-map (kbd "C-M-a") #'sp-beginning-of-sexp)
  (define-key smartparens-mode-map (kbd "C-M-e") #'sp-end-of-sexp)

  (define-key smartparens-strict-mode-map [remap c-electric-backspace] #'sp-backward-delete-char)
  (define-key smartparens-strict-mode-map [remap c-electric-delete-forward] #'sp-delete-char)

  (sp-local-pair 'prog-mode "{" nil :post-handlers '(("||\n[i]" "RET")))
  (sp-local-pair 'prog-mode "[" nil :post-handlers '(("||\n[i]" "RET")))
  (sp-local-pair 'prog-mode "(" nil :post-handlers '(("||\n[i]" "RET")))
  (sp-local-pair 'java-mode "/*" "*/" :post-handlers '(("* ||\n[i]" "RET")))

  (add-hook 'eshell-mode-hook #'smartparens-strict-mode)

  (smartparens-global-strict-mode t)
  (show-smartparens-global-mode t))
#+END_SRC
** Workspaces
#+BEGIN_SRC emacs-lisp
(use-package eyebrowse
  :config
  (setq eyebrowse-wrap-around t
        eyebrowse-new-workspace t
        eyebrowse-switch-back-and-forth t
        eyebrowse-mode-line-style 'always)
  (eyebrowse-mode t))
#+END_SRC
** Emacs build-in tab-bar mode
#+begin_src emacs-lisp
(use-package tab-bar
  :config
  (setq tab-bar-show nil
        tab-bar-new-tab-choice "*scratch*"))
#+end_src
** Popup windows settings
*** Configure window behavior using display-buffer-alist
#+begin_src emacs-lisp
(defconst parameters
  '(window-parameters . ((no-other-window . t)
                         (no-delete-other-windows . t))))

(defconst parameters-no-mode-line
  '(window-parameters . ((no-other-window . t)
                         (no-delete-other-windows . t)
                         (mode-line-format . none))))

(define-key global-map (kbd "C-c s") #'window-toggle-side-windows)

(setq switch-to-buffer-obey-display-actions nil)

(defconst display-buffer-same-window-commands
  '(compile-goto-error
    push-button
    magit-diff-visit-file
    magit-todos-jump-to-item))

(defconst display-buffer-bottom-regexps
  (mapcar (lambda (s) (concat "\\*" s "\\*"))
          '("[H|h]elp.*?"
            "Disabled\sCommand"
            "cider-doc"
            "Backtrace"
            "Apropos"
            "Python.*?"
            "grep"
            "lsp-help"
            "compilation"
            ".*?\sserver\slog"
            "Completions"
            "Compile-Log"
            "Async\sShell\sCommand"
            "Shell\sCommand\sOutput"))
  "List of buffer name regexps.
All matched buffers should be displayed at
bottom of the frame.")

(defconst helm-buffers-regexps
  '("\\*helm.*?\\*"
    "\\*cljr.*?\\*")
  "List of helm buffer regexps.")

(defun bottom-special-buffer-p (buf &rest _)
  "Predicate to display BUF in bottom of the frame."
  (seq-contains-p display-buffer-bottom-regexps buf #'string-match-p))

(defun helm-buffer-p (buf &rest _)
  "Predicate for helm BUF."
  (seq-contains-p helm-buffers-regexps buf #'string-match-p))

(setq display-buffer-alist
      `(
        ;; Magit
        ("magit:.*"
         (display-buffer-reuse-mode-window
          display-buffer-at-bottom)
         (window-height . 0.4))
        ("magit-log:.*"
         (display-buffer-reuse-mode-window
          display-buffer-same-window))
        ("magit-refs:.*"
         (display-buffer-reuse-mode-window
          display-buffer-same-window))
        ("magit-diff.*"
         (display-buffer-reuse-mode-window
          display-buffer-in-direction)
         (direction . rightmost)
         (window-width . 0.5))
        ("magit-revision:.*"
         (display-buffer-reuse-mode-window
          display-buffer-in-direction)
         (direction . rightmost)
         (window-width . 0.5))
        ("COMMIT_EDITMSG"
         (display-buffer-reuse-mode-window
          display-buffer-same-window))
        ;; Google translate buffer
        ("\\*Google\sTranslate\\*"
         (display-buffer-reuse-mode-window
          display-buffer-in-direction)
         (direction . rightmost)
         (window-width . 0.5))
        ;; Flycheck error list
        ("\\*Flycheck\serrors.*\\*"
         (display-buffer-reuse-mode-window
          display-buffer-in-side-window)
         (window-height . 0.2)
         (side . bottom)
         (slot . 0)
         (preserve-size . (nil . t))
         ,parameters)
        ;; Org mode
        ("\\*Org\sSrc.*\\*"
         (display-buffer-reuse-mode-window)
         (direction . rightmost)
         (window-width . 0.5))
        ;; Helm
        (,#'helm-buffer-p
         (display-buffer-in-direction)
         (window-height . 0.4)
         (direction . bottom)
         ,parameters)
        ;; Bottom special buffers
        (,#'bottom-special-buffer-p
         (display-buffer-reuse-mode-window
          display-buffer-in-direction)
         (window-height . 0.4)
         (direction . bottom)
         ,parameters)
        ("\\*cider-error\\*"
         (display-buffer-reuse-mode-window
          display-buffer-in-direction)
         (direction . rightmost)
         (window-width . 0.5))
        ("\\*cider-test-report"
         (display-buffer-reuse-mode-window
          display-buffer-in-direction)
         (direction . rightmost)
         (window-width . 0.5))
        ("\\*cider-repl.*$"
         (display-buffer-reuse-mode-window
          display-buffer-at-bottom)
         (window-height . 0.3))
        ;; Open clickable text
        ((lambda (&rest _)
           (memq this-command display-buffer-same-window-commands))
         (display-buffer-reuse-mode-window
          display-buffer-in-direction)
         (direction . rightmost)
         (window-width . 0.5))))
#+end_src
** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
** Windows navigation
#+BEGIN_SRC emacs-lisp
(use-package winum
  :init
  (setq winum-keymap
        (let ((map (make-sparse-keymap)))
          (define-key map (kbd "C-`") #'winum-select-window-by-number)
          (define-key map (kbd "C-²") #'winum-select-window-by-number)
          (define-key map (kbd "M-0") #'winum-select-window-0-or-10)
          (define-key map (kbd "M-1") #'winum-select-window-1)
          (define-key map (kbd "M-2") #'winum-select-window-2)
          (define-key map (kbd "M-3") #'winum-select-window-3)
          (define-key map (kbd "M-4") #'winum-select-window-4)
          (define-key map (kbd "M-5") #'winum-select-window-5)
          (define-key map (kbd "M-6") #'winum-select-window-6)
          (define-key map (kbd "M-7") #'winum-select-window-7)
          (define-key map (kbd "M-8") #'winum-select-window-8)
          map))
  :config
  (setq winum-auto-setup-mode-line t
        winum-ignored-buffers '(" *which-key*"))
  (winum-mode))
#+END_SRC
** Smartscan
#+begin_src emacs-lisp
(use-package smartscan
  :config
  (setq smartscan-symbol-selector "symbol")
  (add-hook 'prog-mode-hook #'smartscan-mode))
#+end_src
** PKGBUILD major mode
#+begin_src emacs-lisp
(use-package pkgbuild-mode
  :mode "/PKGBUILD$")
#+end_src
** Dried
*** Common settings
#+BEGIN_SRC emacs-lisp
(use-package dired
  :ensure nil
  :config
  (setq dired-listing-switches "-AFhlv --group-directories-first"
        dired-dwim-target t
        dired-recursive-copies 'always
        dired-recursive-deletes 'always))

(use-package dired-aux
  :ensure nil
  :config
  (setq dired-isearch-filenames 'dwim
        dired-create-destination-dirs 'ask
        dired-vc-rename-file t))
#+END_SRC
*** Images preview
#+begin_src emacs-lisp
(use-package image-dired
  :ensure nil
  :config
  (setq image-dired-thumb-size 100
        image-dired-thumb-margin 2
        image-dired-thumbs-per-row 4))
#+end_src
*** Do not create new buffer every time I change directory
#+begin_src emacs-lisp
(use-package dired+
  :config
  (toggle-diredp-find-file-reuse-dir 1))
#+end_src
*** Show git information in dired
#+begin_src emacs-lisp
(use-package dired-git-info
  :config
  (with-eval-after-load 'dired
    (define-key dired-mode-map ")" #'dired-git-info-mode)))
#+end_src
** Projectile
*** Basic setup
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :init
  (setq projectile-keymap-prefix (kbd "C-c p"))
  :config
  (setq projectile-completion-system 'helm
        ;; projectile-completion-system 'ivy
        projectile-sort-order 'recently-active
        projectile-mode-line-function (lambda ()
                                        (format " Proj[%s]" (projectile-project-name))))
  (add-to-list 'projectile-globally-ignored-files "*.log")
  (projectile-mode +1))
#+END_SRC
*** Helm projectile
#+BEGIN_SRC emacs-lisp
(use-package helm-projectile
  :config
  (setq projectile-switch-project-action #'helm-projectile)
  (setq helm-projectile-truncate-lines t)
  (helm-projectile-on))
#+END_SRC
*** COMMENT Counsel projectile
#+begin_src emacs-lisp
(use-package counsel-projectile
  :config
  (counsel-projectile-mode))
#+end_src
** Htmlize
#+BEGIN_SRC emacs-lisp
(use-package htmlize
  :config
  (setq org-html-htmlize-output-type 'inline-css))
#+END_SRC
** Syntax check
*** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :config
  (setq flycheck-idle-change-delay 2)
  (setq flycheck-indication-mode 'left-fringe)

  (add-hook 'after-init-hook #'global-flycheck-mode))
#+END_SRC
And disable flymake autoload:
#+begin_src emacs-lisp
(use-package flymake
  :commands flymake-mode)
#+end_src
*** Show errors in posframe
#+BEGIN_SRC emacs-lisp
(use-package flycheck-posframe
  :config
  (with-eval-after-load 'flycheck
    (require 'flycheck-posframe)
    (setq flycheck-posframe-border-width 1)
    (add-hook 'flycheck-mode-hook #'flycheck-posframe-mode)))
#+END_SRC
** Highlight TODO item
#+begin_src emacs-lisp
(use-package hl-todo
  :config
  (global-hl-todo-mode))
#+end_src
** Version control
*** GIT
#+BEGIN_SRC emacs-lisp
(use-package magit
  :config
  (global-set-key (kbd "C-x g") #'magit-status)
  (setq magit-revision-insert-related-refs 'all
        magit-revision-use-hash-sections 'quick
        magit-diff-refine-hunk nil
        magit-pull-or-fetch t)

  (global-magit-file-mode)
  (add-hook 'magit-post-refresh-hook #'rr/refresh-vc-state 5))
#+END_SRC
*** Transient
#+begin_src emacs-lisp
(use-package transient
  :config
  (setq transient-show-popup t))
#+end_src
*** Work with forges
#+BEGIN_SRC emacs-lisp
(use-package forge
  :config
  (add-to-list 'forge-alist
               '("git.eoadm.com" "git.eoadm.com/api/v4"
                 "git.eoadm.com" forge-gitlab-repository))
  (add-to-list 'forge-alist
               '("178.62.208.194" "178.62.208.194/api/v4"
                 "178.62.208.194" forge-gitlab-repository)))
#+END_SRC
*** Diff highlight
#+begin_src emacs-lisp
(use-package diff-hl
  :init
  (global-diff-hl-mode)
  :config
  (setq diff-hl-draw-borders nil
        diff-hl-side 'right)
  (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh 3))
#+end_src
*** Show TODO items in magit buffer
#+begin_src emacs-lisp
(use-package magit-todos
  :config
  (add-hook 'prog-mode-hook #'magit-todos-mode))
#+end_src
** Multiple cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :bind
  (("C-S-c C-S-c" . mc/edit-lines)
   ("C->" . mc/mark-next-like-this)
   ("C-<" . mc/mark-previous-like-this)
   ("C-c C-<" . mc/mark-all-like-this)
   ("C-c d" . mc/skip-to-next-like-this)))
#+END_SRC
** Expand region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :bind
  (("C-=" . er/expand-region)))
#+END_SRC
** Search and grep utilities
#+BEGIN_SRC emacs-lisp
(use-package wgrep
  :config
  (setq wgrep-auto-save-buffer t))

(use-package wgrep-ag)

(use-package ag
  :after wgrep-ag)

(use-package helm-ag)
(use-package helm-rg)
(use-package deadgrep)
(use-package rg)
#+END_SRC
** Terminal emulator
#+BEGIN_SRC emacs-lisp
(use-package sane-term
  :bind
  (("C-c t" . sane-term)
   ("C-c T" . sane-term-create))
  :config
  ;; Optional convenience binding. This allows C-y to paste even when in term-char-mode (see below).
  (add-hook
   'term-mode-hook
   (lambda ()
     (define-key term-raw-map (kbd "C-y")
       (lambda ()
         (interactive)
         (term-line-mode)
         (yank)
         (term-char-mode))))))
#+END_SRC
** Rainbow mode
#+BEGIN_QUOTE
Colorize color names in buffers
#+END_QUOTE
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :config
  (add-to-list 'rainbow-x-colors-major-mode-list #'web-mode)
  (add-to-list 'rainbow-x-colors-major-mode-list #'python-mode)
  (add-to-list 'rainbow-x-colors-major-mode-list #'emacs-lisp-mode))
#+END_SRC
** CSV
Major mode for work with CSV files
#+BEGIN_SRC emacs-lisp
(use-package csv-mode)
#+END_SRC
** Log files
#+BEGIN_SRC emacs-lisp
(use-package vlf
  :config
  (require 'vlf-setup))

(use-package logview
  :config
  (setq logview-additional-level-mappings
        '(("Python" . ((error       "CRITICAL")
                       (error       "ERROR")
                       (warning     "WARNING")
                       (information "INFO")
                       (debug       "DEBUG")))))

  (setq logview-additional-submodes
        '(("Python" (format . "TIMESTAMP LEVEL - [NAME]:") (levels . "Python")))))
#+END_SRC
** Nginx
#+BEGIN_SRC emacs-lisp
(use-package nginx-mode)
#+END_SRC
** SSH config mode
#+begin_src emacs-lisp
(use-package ssh-config-mode
  :mode ("/\\.ssh/config\\'" "/system/ssh\\'" "/sshd?_config\\'" "/known_hosts\\'" "/authorized_keys2?\\'")
  :hook (ssh-config-mode . turn-on-font-lock)
  :config
  (autoload 'ssh-config-mode "ssh-config-mode" t))
#+end_src
** REST client
Quite interesting package. I think it will replace for Postman for me.
#+BEGIN_SRC emacs-lisp
(use-package restclient)
#+END_SRC
And autocompletion for it:
#+BEGIN_SRC emacs-lisp
(use-package company-restclient
  :config
  (add-to-list 'company-backends #'company-restclient))
#+END_SRC
And even org-babel integration:
#+BEGIN_SRC emacs-lisp
(use-package ob-restclient
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((restclient . t))))
#+END_SRC
** PDF tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :config
  (pdf-tools-install))
#+END_SRC
** Gitignore templates
#+BEGIN_SRC emacs-lisp
(use-package gitignore-templates)
#+END_SRC
** Regexps
Build in regex package:
#+begin_src emacs-lisp
(use-package re-builder
  :ensure nil
  :config
  (setq reb-re-syntax 'read)
  (global-set-key (kbd "C-c R") #'re-builder))
#+end_src
** Password store
#+begin_src emacs-lisp
(use-package password-store
  :config
  (setq password-store-password-length 12))

(use-package password-store-otp)

(use-package pass)

(use-package helm-pass)
;; (use-package ivy-pass)
#+end_src
** Markdown mode
#+begin_src emacs-lisp
(use-package markdown-mode
  :config
  (setq markdown-fontify-code-blocks-natively t)
  (add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))
  (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
  (add-hook 'markdown-mode-hook #'rr/set-margins))
#+end_src
** Edit region in indirect buffer
#+begin_src emacs-lisp
(use-package edit-indirect)
#+end_src
** Org
*** Some tweaks
#+begin_src emacs-lisp
(add-hook 'org-mode-hook #'rr/set-margins)

;; Setup ui
(setq org-adapt-indentation nil
      org-eldoc-breadcrumb-separator " → "
      org-ellipsis "…"
      org-hide-leading-stars t
      org-hide-leading-stars-before-indent-mode t
      org-indent-mode-turns-on-hiding-stars t
      org-list-description-max-indent 4
      org-pretty-entities t
      org-pretty-entities-include-sub-superscripts t
      org-priority-faces '((?a . error) (?b . warning) (?c . success))
      org-tags-column 0
      org-startup-folded 'content
      org-startup-indented nil
      org-startup-shrink-all-tables t
      org-edit-src-content-indentation 0
      org-cycle-separator-lines 1
      org-startup-with-inline-images nil
      org-cycle-include-plain-lists t
      org-hide-emphasis-markers nil
      org-insert-heading-respect-content t
      org-fontify-quote-and-verse-blocks t
      org-fontify-done-headline t
      org-fontify-whole-heading-line t
      ;; org-fontify-todo-headline t
      org-image-actual-width 500
      org-use-sub-superscripts '{})

(setq org-special-ctrl-a/e t
      org-special-ctrl-k t
      org-ctrl-k-protect-subtree t
      org-imenu-depth 4
      org-export-with-sub-superscripts nil
      org-src-window-setup 'split-window-below
      org-catch-invisible-edits 'show-and-error
      org-return-follows-link t
      ;; org-M-RET-may-split-line nil
      org-list-use-circular-motion t
      org-export-with-drawers t
      org-export-with-properties t
      org-reverse-note-order t
      org-use-speed-commands t
      org-enforce-todo-dependencies t
      org-enforce-todo-checkbox-dependencies t)

(setq org-link-frame-setup
      '((vm . vm-visit-folder-other-frame)
        (vm-imap . vm-visit-imap-folder-other-frame)
        (gnus . org-gnus-no-new-news)
        (file . find-file)
        (wl . wl-other-frame)))

(org-display-inline-images)
(add-to-list 'org-modules 'org-habit)
(add-to-list 'org-modules 'org-notify)

(eval-after-load 'org
  '(org-load-modules-maybe t))
#+end_src
*** Effort estimates
#+BEGIN_SRC emacs-lisp
(setq org-global-properties '(("Effort_ALL" . "0 0:30 1:00 2:00 4:00 6:00 8:00 16:00")))
(setq org-columns-default-format "%40ITEM(Task) %17Effort(Estimated Effort){:} %CLOCKSUM")
#+END_SRC
*** Agenda settings
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (quote ("~/Org/tasks/bsc.org"
                               "~/Org/tasks/epam.org"
                               "~/Org/tasks/personal.org"
                               "~/Org/tasks/index.org"
                               "~/Org/tasks/libertyglobal.org"
                               "~/Org-mobile/home.org")))
(setq org-directory "~/Org")
(setq org-agenda-restore-windows-after-quit t
      org-agenda-compact-blocks t
      org-agenda-archives-mode t
      org-agenda-start-with-follow-mode nil
      org-agenda-follow-indirect nil
      org-agenda-show-log t
      org-agenda-window-setup 'only-window
      org-agenda-span 'week
      org-agenda-todo-ignore-scheduled 'future
      org-agenda-show-future-repeats 'next)
#+END_SRC
*** Capture settings
#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file (concat org-directory "/notes.org"))

(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/Org/tasks/index.org" "Unsorted tasks")
         "* TODO %?\n%i")
        ("n" "Note" entry (file+headline "" "Notes")
         "* TODO %?\n%i")
        ("l" "Link" entry (file+headline "~/Org/links.org" "Links")
         "* %? %^L \n%T"
         :prepend t)))

(setq org-refile-targets
      (quote ((nil :maxlevel . 6)
              (org-agenda-files :maxlevel . 6))))

(defadvice org-capture-finalize (after delete-capture-frame activate)
  "Advise capture-finalize to close the frame."
  (if (equal "capture" (frame-parameter nil 'name))
      (delete-frame)))

(defadvice org-capture-destroy (after delete-capture-frame activate)
  "Advise capture-destroy to close the frame."
  (if (equal "capture" (frame-parameter nil 'name))
    (delete-frame)))

(defadvice org-capture-select-template (around delete-capture-frame activate)
  "Advise org-capture-select-template to close the frame on abort."
  (unless (ignore-errors ad-do-it t)
    (setq ad-return-value "q"))
  (if (and
       (equal "q" ad-return-value)
       (equal "capture" (frame-parameter nil 'name)))
      (delete-frame)))

(use-package noflet)

(defun make-capture-frame ()
  "Create a new frame and run 'org-capture'."
  (interactive)
  (make-frame '((name . "capture")))
  (select-frame-by-name "capture")
  (delete-other-windows)
  (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
    (org-capture)))
#+END_SRC
*** Tag list
#+BEGIN_SRC emacs-lisp
(setq org-tag-alist '(("@bug" . ?b) ("@task" . ?t) ("@story" . ?s)))
#+END_SRC
*** Keywords list
Maybe it's a good idea to use unicode symbols for TODO keywords:
#+BEGIN_EXAMPLE
U+2611 ☑ ballot box with check
U+2610 ☐ ballot box
#+END_EXAMPLE
But there is no backward compatibility.
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "PROGRESS(p)" "WAITING(w)" "REVIEW(r)" "|" "DONE(d)" "CANCELLED(c@)")))
#+END_SRC
*** Mark task as DONE if all subtasks are DONE
#+BEGIN_SRC emacs-lisp
(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states)   ; turn off logging
    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

(add-hook 'org-after-todo-statistics-hook #'org-summary-todo)
#+END_SRC
*** Custom keywords faces
#+BEGIN_SRC emacs-lisp
(setq org-todo-keyword-faces
      '(("PROGRESS" . (:foreground "#93E0E3" :weight bold))
        ("WAITING" . (:foreground "#DFAF8F" :weight bold))
        ("REVIEW" . (:foreground "#DFAF8F" :weight bold))
        ("CANCELLED" . (:foreground "#DCDCCC" :weight bold))))

;; (setq org-todo-keyword-faces
;;       '(("PROGRESS" . (:foreground "#8abeb7" :weight bold))
;;         ("WAITING" . (:foreground "#de935f"))
;;         ("REVIEW" . (:foreground "#de935f"))
;;         ("CANCELLED" . (:foreground "#969896"))))
#+END_SRC
*** Handle local file links by extension
#+BEGIN_SRC emacs-lisp
(setq org-file-apps
      '((auto-mode . emacs)
        ("\\.x?html\\'" . "firefox %s")
        ("\\(?:xhtml\\|html\\)\\'" . "firefox %s")
        ("\\.mm\\'" . default)
        ("\\.pdf\\'" . default)))
#+END_SRC
*** Clock settings
#+BEGIN_SRC emacs-lisp
(setq org-clock-persist-file (expand-file-name "org-clock-save.el" rr-savefile-dir))
(setq org-clock-persist t)
(org-clock-persistence-insinuate)
(setq org-log-into-drawer t)
(setq org-log-done nil)
(setq org-log-repeat nil)
(setq org-log-redeadline 'time)
(setq org-log-reschedule 'time)
(setq org-clock-out-when-done t)
(setq org-clock-in-resume t)
(setq org-clock-out-remove-zero-time-clocks t)
(setq org-clock-report-include-clocking-task t)
(setq org-clock-persist-query-resume nil)

(setq org-clock-in-switch-to-state "PROGRESS")

(defvar non-clocking-states '("WAITING" "REVIEW" "DONE" "TODO" "CANCELLED")
  "New state for current clocking task.")

(defun rr/read-non-clocking-state ()
  "Prompt to select non-clocking state."
  (interactive)
  (message "%s" (completing-read "Select state: " non-clocking-states)))

(defun rr/after-clock-stop (last)
  "Change TASK state after clock stop depends on LAST state."
  (when (not (or (string-equal last "WAITING")
                 (string-equal last "DONE")
                 (string-equal last "REVIEW")
                 (string-equal last "TODO")
                 (string-equal last "CANCELED")))
    (rr/read-non-clocking-state)))

(setq org-clock-out-switch-to-state #'rr/after-clock-stop)
#+END_SRC
*** Appearance
**** Org source code
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC
*** Unset some keybindings
#+begin_src emacs-lisp
(define-key orgtbl-mode-map (kbd "C-c C-w") nil)
#+end_src
*** Notifications
#+begin_src emacs-lisp
(use-package appt
  :ensure nil
  :after notifications
  :config
  (appt-activate t)
  (setq appt-message-warning-time 15) ;Show notification 15 minutes before event
  (setq appt-display-mode-line nil)   ;Don't show anything in mode line

  ;; Use appointment data from org-mode
  (defun rr/org-agenda-to-appt ()
    (interactive)
    (setq appt-time-msg-list nil)
    (org-agenda-to-appt))

  (defun rr/format-minutes (min-rest)
    "Format minutes for notification."
    (cond ((equal "0" min-rest) "Now.")
          ((equal "1" min-rest) (format "In %s minute." min-rest))
          (t (format "In %s minutes." min-rest))))

  (defun rr/show-appt-notification (min-to-app new-time appt-msg)
    "Show notifications function."
    (let ((mins-to-app (if (listp min-to-app)
                           min-to-app
                         (list min-to-app)))
          (appt-msgs (if (listp appt-msg)
                         appt-msg
                       (list appt-msg))))
      (let ((msgs (mapcar* #'cons appt-msgs mins-to-app)))
        (dolist (msg msgs)
          (let ((title (car msg))
                (min-rest (cdr msg)))
            (notifications-notify :title title
                                  :timeout (if (equal min-rest "0") 0 -1)
                                  :body (format "%s\n%s"
                                                (rr/format-minutes min-rest)
                                                new-time)))))))

  ;; Update after emacs start
  (add-hook 'after-init-hook #'rr/org-agenda-to-appt)

  ;; Every day at 0:05
  (run-at-time "0:05" (* 24 3600) #'rr/org-agenda-to-appt)

  (add-hook 'after-save-hook
            (lambda ()
              (if (org-agenda-file-p (buffer-file-name))
                  (rr/org-agenda-to-appt))))

  (setq appt-disp-window-function #'rr/show-appt-notification)
  (setq appt-delete-window-function (lambda () t))
  (setq org-show-notification-handler #'notifications-notify))
#+end_src
*** Markdown export
#+BEGIN_SRC emacs-lisp
(require 'ox-md nil t)
(eval-after-load 'org
  '(require 'ox-gfm nil t))
#+END_SRC
*** Confluence export
#+BEGIN_SRC emacs-lisp
(require 'ox-confluence)
#+END_SRC
*** Slack export
#+BEGIN_SRC emacs-lisp
(use-package ox-slack)
#+END_SRC
*** Org-mime
#+BEGIN_SRC emacs-lisp
(use-package org-mime
  :config
  (define-key message-mode-map (kbd "C-c M-o") #'org-mime-htmlize)
  (define-key org-mode-map (kbd "C-c M-o") #'org-mime-org-buffer-htmlize)

  (add-hook 'org-mime-html-hook
            (lambda ()
              (org-mime-change-element-style
               "pre" (format "color: %s; background-color: %s; padding: 0.5em;"
                             "#DCDCCC" "#3F3F3F"))))

  ;; the following can be used to nicely offset block quotes in email bodies
  (add-hook 'org-mime-html-hook
            (lambda ()
              (org-mime-change-element-style
               "blockquote" "border-left: 2px solid gray; padding-left: 4px;")))

  (setq org-mime-export-options
        '(:section-numbers nil :with-author nil :with-toc nil)))
#+END_SRC
*** LaTeX export
#+BEGIN_SRC emacs-lisp
(require 'ox-latex)
(setq org-latex-inputenc-alist '(("utf8" . "utf8x")))
(setq org-latex-default-packages-alist
      '(("AUTO" "inputenc"  t ("pdflatex"))
        (""     "graphicx"  t)
        (""     "grffile"   t)
        (""     "longtable" nil)
        (""     "wrapfig"   nil)
        (""     "rotating"  nil)
        ("normalem" "ulem"  t)
        (""     "amsmath"   t)
        (""     "textcomp"  t)
        (""     "amssymb"   t)
        (""     "capt-of"   nil)
        (""     "hyperref"  nil)))
(unless (boundp 'org-latex-classes)
  (setq org-latex-classes nil))

(add-to-list 'org-latex-classes
             '("org-article"
               "\\documentclass[11pt,a4paper]{article}
\\usepackage[sfdefault]{noto}
\\usepackage{sourcecodepro}
\\usepackage[T2A]{fontenc}
\\usepackage[english, russian]{babel}
\\usepackage[hidelinks]{hyperref}
\\usepackage{geometry}
\\geometry{a4paper}
\\geometry{left=2cm,right=1cm,top=1cm,bottom=1cm,includeheadfoot,headheight=1.2cm}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(add-to-list 'org-latex-classes
             '("org-article-en"
               "\\documentclass[11pt,a4paper]{article}
\\usepackage[default]{sourcesanspro}
\\usepackage{sourcecodepro}
\\usepackage[T1]{fontenc}
\\usepackage[english]{babel}
\\usepackage[hidelinks]{hyperref}
\\usepackage{geometry}
\\geometry{a4paper}
\\geometry{left=2cm,right=1cm,top=1cm,bottom=1cm,includeheadfoot,headheight=1.2cm}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC
*** Jira export
#+begin_src emacs-lisp
(use-package ox-jira
  :config
  (setq org-export-copy-to-kill-ring 'if-interactive))
#+end_src
*** Evaluate source code
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (sql . t)
   (shell . t)
   (sqlite . t)
   (haskell . t)
   (ditaa . t)
   (plantuml . t)))

(setq org-confirm-babel-evaluate t
      org-export-use-babel nil)

(use-package ob-async)
#+END_SRC
*** Google calendar sync
#+BEGIN_SRC emacs-lisp
(use-package org-gcal)
#+END_SRC
*** Edit program comments and strings using Org-mode
#+begin_src emacs-lisp
(use-package poporg)
#+end_src
** Email
*** Setup username and email address
#+begin_src emacs-lisp
(setq user-mail-address "rrudakov@pm.me"
      user-full-name "Roman Rudakov")
#+end_src
*** COMMENT ProtonMail configuration
#+BEGIN_SRC emacs-lisp
(use-package mu4e
  :ensure nil
  :after message
  :bind
  (:map mu4e-main-mode-map
        ([remap mu4e-quit] . kill-current-buffer))
  :config
  (setq mu4e-maildir (expand-file-name "~/.mail/ProtonMail")
        mu4e-reply-to-address user-mail-address
        mu4e-sent-folder "/Sent"
        mu4e-trash-folder "/Trash"
        mu4e-sent-messages-behavior 'delete
        mu4e-view-use-gnus nil
        mu4e-hide-index-messages t
        mu4e-headers-auto-update t
        mu4e-compose-signature-auto-include nil
        mu4e-completing-read-function 'completing-read
        mu4e-maildir-shortcuts '(("/INBOX" . ?i)
                                 ("/Sent" . ?s)
                                 ("/Trash" . ?t)
                                 ("/All Mail" . ?a))
        mu4e-use-fancy-chars nil
        mu4e-view-show-images t
        mu4e-view-prefer-html nil
        ;; mu4e-html2text-command "w3m -dump -T text/html -O utf8 -graph"
        mu4e-headers-fields '((:human-date . 25)
                              (:flags . 6)
                              (:from . 22)
                              (:subject . nil))
        message-kill-buffer-on-exit t
        mail-user-agent 'mu4e-user-agent)

  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))

  (add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)

  ;; Run mu4e in background after starting emacs
  (mu4e t))
#+END_SRC
*** COMMENT Use helm for mail filtration
#+begin_src emacs-lisp
(use-package helm-mu
  :after (helm mu4e)
  :bind
  (:map
   mu4e-main-mode-map
   ("s" . helm-mu)
   :map
   mu4e-headers-mode-map
   ("s" . helm-mu)
   :map
   mu4e-view-mode-map
   ("s" . helm-mu)))
#+end_src
*** COMMENT Alerts
#+BEGIN_SRC emacs-lisp
(use-package mu4e-alert
  :config
  (setq mu4e-alert-modeline-formatter (lambda (count)
                                        (if (> count 0)
                                            (format "[Unread emails: %d]" count)
                                          "")))
  (mu4e-alert-set-default-style 'libnotify)
  (add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
  (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display))
#+END_SRC
*** Sending emails
#+begin_src emacs-lisp
(use-package smtpmail
  :ensure nil
  :after message
  :config
  (setq message-send-mail-function #'smtpmail-send-it
        smtpmail-smtp-server "127.0.0.1"
        smtpmail-smtp-service 1025
        smtpmail-stream-type 'starttls))
#+end_src
*** GNUS
**** Basic setup
GNUS split into many packages. I use ~use-package~ to setup each of them.

First setup groups and IMAP.
#+begin_src emacs-lisp
(use-package gnus
  :config
  (setq gnus-select-method '(nntp "news.gwene.org"))
  (setq gnus-secondary-select-methods
        '((nnimap "protonmail"
                  (nnimap-address "127.0.0.1")
                  (nnimap-server-port 1143)
                  (nnimap-stream starttls))))
  (setq gnus-agent t
        gnus-novice-user t
        gnus-use-cache t))
#+end_src

Do not save ~.newsrc~ file. I don't use another newsreaders.
#+begin_src emacs-lisp
(use-package gnus-start
  :ensure gnus
  :config
  (setq gnus-save-newsrc-file nil))
#+end_src

Setup groups view.
#+begin_src emacs-lisp
(use-package gnus-group
  :ensure gnus
  :config
  (setq gnus-group-mode-line-format "%%b"
        gnus-list-groups-with-ticked-articles nil
        gnus-group-sort-function
        '((gnus-group-sort-by-unread)
          (gnus-group-sort-by-alphabet)
          (gnus-group-sort-by-rank))))
#+end_src

Enable topics by default in groups view.
#+begin_src emacs-lisp
(use-package gnus-topic
  :ensure gnus
  :config
  (setq gnus-topic-display-empty-topics t)
  (add-hook 'gnus-group-mode-hook 'gnus-topic-mode))
#+end_src

Prettify summary view. Setup mode line and continuations arrow for threads.
#+begin_src emacs-lisp
(use-package gnus-sum
  :ensure gnus
  :demand t
  :config
  (setq gnus-auto-select-first nil
        gnus-summary-mode-line-format "%p"
        gnus-fetch-old-headers 'some)
  (setq gnus-user-date-format-alist
        '(((gnus-seconds-today) . "Today at %R")
          ((+ 86400 (gnus-seconds-today)) . "Yesterday, %R")
          (t . "%Y-%m-%d %R")))
  (setq gnus-summary-line-format "%U%R%z %-16,16&user-date;  %4L:%-30,30f  %B%S\n")
  (setq gnus-sum-thread-tree-false-root ""
        gnus-sum-thread-tree-indent " "
        gnus-sum-thread-tree-leaf-with-other "├─➤ "
        gnus-sum-thread-tree-root ""
        gnus-sum-thread-tree-single-leaf "└─➤ "
        gnus-sum-thread-tree-vertical "│"))
#+end_src

Enable asynchronous operations in GNUS.
#+begin_src emacs-lisp
(use-package gnus-async
  :ensure nil
  :config
  (setq gnus-asynchronous t))
#+end_src

Prefer plain text over HTML (not sure if it is actually works):
#+begin_src emacs-lisp
(use-package mm-decode
  :ensure nil
  :config
  (with-eval-after-load "mm-decode"
    (add-to-list 'mm-discouraged-alternatives "text/html")
    (add-to-list 'mm-discouraged-alternatives "text/richtext")))
#+end_src

Enable demon on GNUS startup to check new mail periodically.
#+begin_src emacs-lisp
(use-package gnus-demon
  :ensure gnus
  :config
  (add-hook 'gnus-startup-hook
            (lambda ()
              (gnus-demon-add-handler #'gnus-demon-scan-news 5 nil)
              (gnus-demon-init))))
#+end_src

Enable notifications when new email/news is received:
#+begin_src emacs-lisp
(use-package gnus-notifications
  :ensure gnus
  :config
  (setq gnus-notifications-use-google-contacts nil)
  (add-hook 'gnus-after-getting-new-news-hook 'gnus-notifications))
#+end_src
** Google translate interface
#+begin_src emacs-lisp
(use-package google-translate-default-ui
  :ensure google-translate
  :config
  (setq google-translate-pop-up-buffer-set-focus t))
#+end_src
** Auto set indentation settings
#+begin_src emacs-lisp
(use-package dtrt-indent
  :config
  (setq dtrt-indent-verbosity 0)
  (add-hook 'prog-mode-hook #'dtrt-indent-mode))
#+end_src
** XML
*** Common settings
#+begin_src emacs-lisp
(setq nxml-child-indent 4 nxml-attribute-indent 4)
#+end_src
*** Format XML
#+begin_src emacs-lisp
(use-package xml-format
  :demand t
  :after nxml-mode)
#+end_src
** NIX
*** Edit .nix configuration files
#+begin_src emacs-lisp
(use-package nix-mode
  :mode "\\.nix\\'")
#+end_src
** Code folding
#+begin_src emacs-lisp
(use-package origami
  :config
  (add-hook 'prog-mode-hook 'origami-mode)
  (define-key origami-mode-map [C-tab] #'origami-recursively-toggle-node))
#+end_src
** ElDoc
Show signature of function or describe symbol at point in minibuffer.
#+begin_src emacs-lisp
(use-package eldoc
  :config
  (global-eldoc-mode))
#+end_src
** Clang format
Common tool for code formatting.
#+begin_src emacs-lisp
(use-package clang-format)
#+end_src
** Languages
*** LSP mode
**** Common setup
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :config
  (define-key lsp-mode-map (kbd "C-c j") rr-lsp-keymap)
  (define-key rr-lsp-keymap (kbd "a") #'lsp-execute-code-action)
  (define-key rr-lsp-keymap (kbd "i") #'lsp-find-implementation)
  (define-key rr-lsp-keymap (kbd "r") #'lsp-rename)
  (define-key rr-lsp-keymap (kbd "d") #'lsp-describe-thing-at-point)

  (setq lsp-prefer-capf t
        lsp-signature-auto-activate nil
        lsp-diagnostic-package :flycheck
        lsp-file-watch-threshold 2000
        lsp-imenu-sort-methods '(kind position)
        lsp-diagnostics-modeline-scope :file
        lsp-modeline-code-actions-enable nil
        lsp-enable-on-type-formatting nil
        lsp-diagnostic-clean-after-change nil)

  (add-to-list 'lsp-file-watch-ignored "[/\\\\]\\.allure$")

  (require 'lsp-clients)

  ;; Rust lsp settings
  (setq lsp-rust-clippy-preference "on")
  (add-hook 'rust-mode-hook 'lsp)

  ;; Python lsp settings
  (setq lsp-pyls-plugins-pylint-enabled t
	      lsp-pyls-plugins-rope-completion-enabled nil
	      lsp-pyls-plugins-jedi-completion-enabled t
	      lsp-pyls-plugins-jedi-completion-include-params nil
	      lsp-pyls-plugins-jedi-signature-help-enabled t)
  (add-hook 'python-mode-hook #'lsp))
#+END_SRC
*** DAP mode
**** Common setup
#+begin_src emacs-lisp
(use-package dap-mode
  :after (lsp-java s)
  :config
  (dap-mode 1)
  (dap-ui-mode 1)

  (setq dap-java-test-runner (expand-file-name (locate-user-emacs-file ".cache/lsp/eclipse.jdt.ls/test-runner/junit-platform-console-standalone.jar")))
  (setq dap-auto-show-output nil)

  (require 'dap-lldb)
  (require 'dap-java)

  (define-key rr-lsp-keymap (kbd "t") #'dap-java-run-test-method)
  (define-key rr-lsp-keymap (kbd "c") #'dap-java-run-test-class)
  (define-key rr-lsp-keymap (kbd "b") #'dap-breakpoint-toggle)

  (add-hook 'dap-stopped-hook
            (lambda (arg) (call-interactively #'dap-hydra)))

  ;; Run build with args:
  ;; -Dmaven.failsafe.debug="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=1044 -Xnoagent"
  (require 'seq)
  (require 's)

  (defun rr/find-test-module ()
    (let* ((project-root (projectile-project-root))
           (modules (seq-filter
                     (lambda (dir) (or (s-suffix? "-tests" dir)
                                       (s-suffix? "-test" dir)))
                     (directory-files project-root))))
      (if (seq-empty-p modules)
          (error "Test module not found")
        (first modules))))

  (defun rr/debug-test (test-name)
    "Debug java test class or method depends on TEST-NAME."
    (let* ((dap-connect-retry-interval 0.5)
           (dap-connect-retry-count 1200)
           (port "1044")
           (current-workdir (projectile-project-root))
           (test-module (rr/find-test-module))
           (project-name (file-name-nondirectory (directory-file-name current-workdir)))
           (command (format "mvn clean install -U -DskipTests && mvn -Dit.test=%s verify -pl %s -P tests-for-development -Dmaven.failsafe.debug=\"-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=%s -Xnoagent\"" test-name test-module port)))
      (dap-debug
       (list :type "java"
             :request "attach"
             :hostName "localhost"
             :port port
             :projectName project-name
             :wait-for-port t
             :program-to-start command
             :name test-name
             :cwd current-workdir))))

  (defun rr/run-test (test-name)
    "Run java test class or method depends on TEST-NAME."
    (let ((default-directory (projectile-project-root))
          (test-module (rr/find-test-module)))
      (projectile-run-compilation (format "mvn clean install -U -DskipTests && mvn -Dit.test=%s verify -pl %s -P tests-for-development" test-name test-module))))

  (defun rr/run-test-method ()
    (interactive)
    (rr/run-test (dap-java-test-method-at-point)))

  (defun rr/run-test-class ()
    (interactive)
    (rr/run-test (dap-java-test-class)))

  (defun rr/debug-test-mehtod ()
    (interactive)
    (rr/debug-test (dap-java-test-method-at-point)))

  (defun rr/debug-test-class ()
    (interactive)
    (rr/debug-test (dap-java-test-class))))
#+end_src
*** Treemacs integration
#+begin_src emacs-lisp
(use-package treemacs
  :after lsp-mode
  :config
  (define-key lsp-mode-map (kbd "C-c *") #'treemacs)
  (setq treemacs-no-png-images t
        treemacs-width 70
        treemacs-follow-after-init t
        treemacs-project-follow-cleanup t))

(use-package lsp-treemacs
  :after (treemacs lsp-mode)
  :config
  (lsp-treemacs-sync-mode 1)
  (define-key rr-lsp-keymap (kbd "h") #'lsp-treemacs-call-hierarchy))
#+end_src
*** Google c-style
#+begin_src emacs-lisp
(use-package google-c-style
  :config
  (add-hook 'c-mode-common-hook #'google-set-c-style)
  (add-hook 'c-mode-common-hook #'google-make-newline-indent))
#+end_src
*** Java
**** Common setup
#+begin_src emacs-lisp
(require 'cc-mode)
(require 'google-java-format)

(setq google-java-format-executable "/home/rrudakov/.local/bin/google-java-format")

(define-key java-mode-map (kbd "C-c C-f") #'google-java-format-buffer)

(add-hook 'java-mode-hook
          (lambda ()
            (setq c-basic-offset 2)))
#+end_src
**** lsp-mode setup
#+BEGIN_SRC emacs-lisp
(use-package lsp-java
  :after lsp-mode
  :config
  (add-hook 'java-mode-hook #'lsp)
  (setq lsp-java-save-actions-organize-imports nil
        lsp-java-format-on-type-enabled nil)

  (setq lsp-java-format-settings-url "file:///home/rrudakov/Work/EPAM/eclipse-java-code-style.xml"
        lsp-java-format-settings-profile "GoogleStyle")

  (setq lsp-java-vmargs '("-javaagent:/home/rrudakov/Soft/lombok/lombok.jar"
                          "-Xmx1G"
                          "-XX:+UseG1GC"
                          "-XX:+UseStringDeduplication")))
#+END_SRC
**** Expand snippet for new class
#+BEGIN_SRC emacs-lisp
(setq auto-insert-query nil)
(setq auto-insert-directory (expand-file-name "templates/" user-emacs-directory))
(add-hook 'find-file-hook #'auto-insert)
(auto-insert-mode 1)

(add-to-list 'auto-insert-alist
             '("\\.java" . ["default-java.el"
                            (lambda () (yas-expand-snippet
                                   (buffer-string)
                                   (point-min)
                                   (point-max)))]))
#+END_SRC
*** Haskell
**** Haskell mode
#+begin_src emacs-lisp
(use-package haskell-mode
  :config
  (setq haskell-mode-stylish-haskell-path "brittany")
  (setq haskell-stylish-on-save nil)

  (add-hook 'haskell-mode-hook #'haskell-auto-insert-module-template))
#+end_src
**** lsp-haskell
Latest update in haskell-mode introduce some incompatibility. Investigation required.
#+begin_src emacs-lisp
(use-package lsp-haskell)
#+end_src
**** Align rules
#+BEGIN_SRC emacs-lisp
(add-hook 'align-load-hook
          (lambda ()
            (add-to-list 'align-rules-list
                         '(haskell-types
                           (regexp . "\\(\\s-+\\)\\(::\\|∷\\)\\s-+")
                           (modes quote (haskell-mode literate-haskell-mode))))))
(add-hook 'align-load-hook
          (lambda ()
            (add-to-list 'align-rules-list
                         '(haskell-assignment
                           (regexp . "\\(\\s-+\\)=\\s-+")
                           (modes quote (haskell-mode literate-haskell-mode))))))

(add-hook 'align-load-hook
          (lambda ()
            (add-to-list 'align-rules-list
                         '(haskell-arrows
                           (regexp . "\\(\\s-+\\)\\(->\\|→\\)\\s-+")
                           (modes quote (haskell-mode literate-haskell-mode))))))

(add-hook 'align-load-hook
          (lambda ()
            (add-to-list 'align-rules-list
                         '(haskell-left-arrows
                           (regexp . "\\(\\s-+\\)\\(<-\\|←\\)\\s-+")
                           (modes quote (haskell-mode literate-haskell-mode))))))
#+END_SRC
**** Haskell doc mode
#+BEGIN_SRC emacs-lisp
(add-hook 'haskell-mode-hook #'turn-on-haskell-doc-mode)
#+END_SRC
**** Indentation
#+BEGIN_SRC emacs-lisp
(use-package hindent
  :config
  (add-hook 'haskell-mode-hook #'hindent-mode))
#+END_SRC
**** Stack interface
#+BEGIN_SRC emacs-lisp
(use-package hasky-stack
  :config
  (global-set-key (kbd "C-c h e") #'hasky-stack-execute)
  (global-set-key (kbd "C-c h h") #'hasky-stack-package-action)
  (global-set-key (kbd "C-c h i") #'hasky-stack-new))
#+END_SRC
**** Ligatures support
#+begin_src emacs-lisp
(use-package hasklig-mode
  :config
  (add-hook 'haskell-mode-hook 'hasklig-mode))
#+end_src
*** LaTeX
**** AucTEX tweaks
#+BEGIN_SRC emacs-lisp
(use-package tex
  :ensure nil
  :config
  (setq TeX-auto-save t
        TeX-parse-self t
        TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-source-correlate-start-server t)
  (setq-default TeX-master nil))

(use-package font-latex
  :ensure nil
  :config
  (setq font-latex-fontify-sectioning 'color))

(use-package latex
  :ensure nil
  :config
  (eval-after-load 'latex
    '(add-to-list 'LaTeX-verbatim-environments "lstlisting"))
  (add-hook 'LaTeX-mode-hook #'visual-line-mode)
  (add-hook 'LaTeX-mode-hook #'flyspell-mode)
  (add-hook 'LaTeX-mode-hook #'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook #'turn-on-reftex)
  (add-hook 'LaTeX-mode-hook (lambda () (auto-fill-mode -1)))
  (add-hook 'LaTeX-mode-hook (lambda () (TeX-fold-mode 1))))
#+END_SRC
*** Python
**** Virtualenv
#+BEGIN_SRC emacs-lisp
(use-package pyvenv
  :config
  (add-hook 'python-mode-hook 'pyvenv-tracking-mode)
  (add-hook 'pyvenv-post-activate-hooks #'lsp))
#+END_SRC
**** Default interpreter
#+BEGIN_SRC emacs-lisp
(setq python-shell-interpreter "python3")
#+END_SRC
**** Import management
***** Automatically sort imports
#+BEGIN_SRC emacs-lisp
(use-package isortify
  :config
  (setq isortify-line-width 79
        isortify-multi-line-output 3
        isortify-trailing-comma t)
  (add-hook 'python-mode-hook #'isortify-mode))
#+END_SRC
**** Format code
#+BEGIN_SRC emacs-lisp
(use-package blacken
  :config
  (setq blacken-line-length 79
        blacken-allow-py36 t))

(use-package py-yapf)
#+END_SRC
**** Tox
#+BEGIN_SRC emacs-lisp
(use-package tox
  :config
  (setq tox-runner 'py.test))
#+END_SRC
**** Sphinx doc
#+begin_src emacs-lisp
(use-package sphinx-doc
  :config
  (add-hook 'python-mode-hook #'sphinx-doc-mode))
#+end_src
**** Editing requirements files
#+BEGIN_SRC emacs-lisp
(use-package pip-requirements)
#+END_SRC
*** JSON
#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :config
  (setq json-reformat:indent-width 4
        json-reformat:pretty-string? t)
  (add-hook 'json-mode-hook #'flycheck-mode))
#+END_SRC
*** YAML
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode "\\.yml\\'")
#+END_SRC
*** JavaScript
**** Add node_modules to path
#+begin_src emacs-lisp
(use-package add-node-modules-path
  :config
  (eval-after-load 'js-mode
    '(add-hook 'js-mode-hook #'add-node-modules-path))

  (eval-after-load 'typescript-mode
    '(add-hook 'typescript-mode-hook #'add-node-modules-path))

  (eval-after-load 'web-mode
    '(add-hook 'web-mode-hook #'add-node-modules-path)))
#+end_src
**** TypeScript
#+BEGIN_SRC emacs-lisp
(use-package typescript-mode)

(use-package tide
  :config
  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (tide-hl-identifier-mode +1))

  ;; aligns annotation to the right hand side
  (setq tide-sort-completions-by-kind t
        tide-completion-detailed t
        tide-completion-show-source t)

  ;; formats the buffer before saving
  (add-hook 'before-save-hook #'tide-format-before-save)

  (add-hook 'typescript-mode-hook #'setup-tide-mode)
  (setq tide-format-options '(:insertSpaceAfterFunctionKeywordForAnonymousFunctions t :placeOpenBraceOnNewLineForFunctions nil))

  (define-key tide-mode-map (kbd "C-c j a") #'tide-fix)
  (define-key tide-mode-map (kbd "C-c C-f") #'tide-organize-imports)
  (define-key tide-mode-map (kbd "C-c j r") #'tide-rename-symbol)

  (flycheck-add-next-checker 'tsx-tide 'javascript-eslint 'append)
  (flycheck-add-next-checker 'typescript-tide 'javascript-eslint 'append)
  (flycheck-add-next-checker 'jsx-tide 'javascript-eslint 'append)
  (flycheck-add-next-checker 'javascript-tide 'javascript-eslint 'append))
#+END_SRC
**** Angular support
#+begin_src emacs-lisp
(use-package ng2-mode
  :after tide
  :config
  (require 'ng2-mode)
  (require 'flycheck)
  (require 'tide)
  (flycheck-add-mode 'typescript-tide 'ng2-ts-mode)
  (add-to-list 'auto-mode-alist '("\\.component.html" . ng2-html-mode)))
#+end_src
*** WEB
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :config
  (setq web-mode-markup-indent-offset 2
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 2
        web-mode-enable-auto-closing t
        web-mode-enable-auto-pairing nil
        web-mode-enable-auto-opening t
        web-mode-enable-css-colorization t)

  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.jinja2\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))

  ;; Set django engine for django projects
  (defun rr/django-project-hook ()
    (if (projectile-project-p)
        (if (file-exists-p (concat (projectile-project-root) "manage.py"))
            (web-mode-set-engine "django"))))

  (add-hook 'web-mode-hook #'rr/django-project-hook)
  (add-hook 'web-mode-hook
            (lambda ()
              (when (string-equal "tsx" (file-name-extension buffer-file-name))
                (setup-tide-mode))))
  ;; (add-hook 'web-mode-hook
  ;;           (lambda ()
  ;;             (when (string-equal "tsx" (file-name-extension buffer-file-name))
  ;;               (lsp))))
  (flycheck-add-mode 'javascript-eslint 'web-mode)

  (add-hook 'web-mode-hook
            (lambda ()
              (when (string-equal "jsx" (file-name-extension buffer-file-name))
                (setup-tide-mode))))
  ;; (add-hook 'web-mode-hook
  ;;         (lambda ()
  ;;           (when (string-equal "jsx" (file-name-extension buffer-file-name))
  ;;             (lsp))))
  (flycheck-add-mode 'javascript-eslint 'web-mode))
#+END_SRC
*** Groovy
#+BEGIN_SRC emacs-lisp
(use-package groovy-mode)
#+END_SRC
*** Rust
**** Rust-mode
#+begin_src emacs-lisp
(use-package rust-mode)
#+end_src
*** Clojure
**** Clojure condo linter
#+begin_src emacs-lisp
(use-package flycheck-clj-kondo)
#+end_src
**** Clojure mode
#+begin_src emacs-lisp
(use-package clojure-mode
  :after flycheck-clj-kondo
  :config
  (require 'flycheck-clj-kondo)
  ;; (add-to-list 'lsp-language-id-configuration `(clojurescript-mode . "clojure"))
  ;; (add-hook 'clojurescript-mode-hook #'lsp)
  )
#+end_src
**** CIDER
#+begin_src emacs-lisp
(use-package cider
  :config
  (setq cider-prompt-for-symbol nil
        cider-repl-wrap-history t
        nrepl-hide-special-buffers t
        cider-repl-display-help-banner nil)
  (add-hook 'clojure-mode-hook #'cider-mode)
  (add-hook 'clojurescript-mode-hook #'cider-mode))
#+end_src
**** Clojure refactoring
#+begin_src emacs-lisp
(use-package clj-refactor
  :config
  (defun my-clojure-mode-hook ()
    (clj-refactor-mode 1))

  (setq cljr-hotload-dependencies t
        cljr-warn-on-eval nil)
  (add-hook 'clojure-mode-hook #'my-clojure-mode-hook)
  (add-hook 'clojurescript-mode-hook #'my-clojure-mode-hook))
#+end_src
**** Clojure refactoring helm integration
#+begin_src emacs-lisp
(use-package cljr-helm
  :after clj-refactor
  :config
  (define-key clojure-mode-map (kbd "C-c C-r") #'cljr-helm)
  (define-key clojurescript-mode-map (kbd "C-c C-r") #'cljr-helm))
#+end_src
**** CIDER helm integration
#+begin_src emacs-lisp
(use-package helm-cider
  :config
  (helm-cider-mode 1))
#+end_src
*** Gherkin
**** Syntax highlighting
#+begin_src emacs-lisp
(use-package feature-mode
  :mode "\\.story$")
#+end_src
*** PlantUML
**** Major mode
#+begin_src emacs-lisp
(use-package plantuml-mode
  :config
  (setq org-plantuml-jar-path "/usr/share/plantuml/plantuml.jar"
        plantuml-default-exec-mode 'executable)
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml)))
#+end_src
*** Protobuf
#+begin_src emacs-lisp
(use-package protobuf-mode)
#+end_src
** Kubernetes
*** Major mode for kubernetes configs
#+begin_src emacs-lisp
(use-package k8s-mode
 :config
 (setq k8s-search-documentation-browser-function 'browse-url-firefox)
 (add-hook 'k8s-mode-hook #'yas-minor-mode))
#+end_src
*** Kubernetes client for emacs
#+begin_src emacs-lisp
(use-package kubernetes
  :commands (kubernetes-overview))
#+end_src
** Dockerfile mode
#+begin_src emacs-lisp
(use-package dockerfile-mode)
#+end_src
** Emacs everywhere
#+begin_src emacs-lisp
(defun pull-request-conversation-p (window-title)
  "Predicate to make sure WINDOW-TITLE match PR conversation."
  (or (string-match-p "Pull request" window-title)))

(defun popup-handler (app-name window-title x y w h)
  "Set major mode based on APP-NAME and WINDOW-TITLE."
  (cond
    ((pull-request-conversation-p window-title) (gfm-mode))
    (t (markdown-mode)))
  (when (gui-get-selection 'PRIMARY)
    (insert (gui-get-selection 'PRIMARY))))

(add-hook 'ea-popup-hook 'popup-handler)
#+end_src
** Create GIF screencasts
#+begin_src emacs-lisp
(use-package gif-screencast)
#+end_src
** Funny
*** Speed type
#+BEGIN_SRC emacs-lisp
(use-package speed-type)
#+END_SRC
*** Literate calc mode
#+begin_src emacs-lisp
(use-package literate-calc-mode)
#+end_src
** Set keybindings
*** Common
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-[") #'align)
#+END_SRC
*** Org
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c l") #'org-store-link)
(global-set-key (kbd "C-c a") #'org-agenda)
(global-set-key (kbd "C-c c") #'org-capture)
(global-set-key (kbd "C-c b") #'org-switchb)
(global-set-key (kbd "<f5>") #'org-clock-goto)
(define-key org-agenda-mode-map (kbd "C-c m") #'org-agenda-month-view)
(define-key org-mode-map (kbd "C-c u") #'rr/org-replace-link-by-link-description)
(global-set-key (kbd "<f6>") #'profiler-start)
(global-set-key (kbd "<f7>") #'profiler-report)
(global-set-key (kbd "<f8>") #'profiler-stop)
#+END_SRC
