#+TITLE: My Emacs configuration

* Keybindings
** Common
#+BEGIN_SRC text
M-:	Eval command
C-x t   Switch to ansi-terminal or create new
C-x T   Create new ansi-terminal
M-\     delete-horizontal-space
#+END_SRC
** Python
#+BEGIN_SRC text
C-c C-r r Refactoring commands
M-m       Go to begining of line with indentation
#+END_SRC
** Haskell
#+BEGIN_SRC text
M-q	reformats the current declaration. When inside a comment, it fills the current paragraph instead, like the standard M-q
C-M-\	reformats the current region
#+END_SRC
** Org-mode
#+BEGIN_SRC text
C-c ^		Sort headlines
C-c / 		Prompt to make sparce-tree
C-c - 		Cycle list level ('-', '+', '1.', '1)' etc.)
C-c C-x f	Footnote action command
C-c C-c		When at footnote, go to definition, When at definition, go back to reference
C-c |		Create new table
M-S-<right>	Insert new table column
C-c +		Sum all numbers in current column
C-c C-x p	Insert property
C-c C-x C-d	Display time summaries for each subtree in the current buffer
#+END_SRC
*** Agenda view
#+BEGIN_SRC text
p	Previous period
n	Next period
.	Today
F	Follow mode
#+END_SRC
** Projectile
#+BEGIN_EXAMPLE
C-p p s s	Projectile ag search
C-p p s r   Projectile rg search
#+END_EXAMPLE
** Terminal
#+BEGIN_SRC text
C-c C-j Switch to term-line-mode, which you can then treat like a normal emacs buffer (move, yank, etc)
C-c C-k Return to term-char-mode, which will act like a traditional ansi-term
#+END_SRC
** Highlight text in buffer (hi-lock-mode)
#+begin_src text
M-s h w         hi-lock-write-interactive-patterns
M-s h u         unhighlight-regexp
M-s h r         highlight-regexp
M-s h p         highlight-phrase
M-s h l         highlight-lines-matching-regexp
M-s h f         hi-lock-find-patterns
#+end_src
** Helm
#+begin_src text
C-c i   insert current file path to current buffer
#+end_src
** Dired
#+begin_src text
C-x C-j dired-jump (Jump to directory of the current buffer)
#+end_src

* Useful commands
** Org-mode
*** Lint document
#+BEGIN_SRC text
org-lint
#+END_SRC
** Magit
#+BEGIN_SRC text
magit-blame
#+END_SRC

* External configuration example
** Define databases connections
#+begin_src emacs-lisp :tangle no
(require 'cl-lib)
(require 'ejc-sql)

(cl-defun rr/create-postgres-connection (name &key hostname dbname username password)
  "Defun postgresql connection with given NAME for ejc package.

Required information is HOSTNAME, DBNAME, USERNAME and PASSWORD"
  (ejc-create-connection
   name
   :classpath "/home/rrudakov/.m2/repository/org/postgresql/postgresql/42.2.5/postgresql-42.2.5.jar"
   :dbtype "postgresql"
   :dbname dbname
   :host hostname
   :port "5432"
   :user username
   :password password))

;; Define connections
(defun rr/setup-connections ()
  "Setup all database connections."
  (progn
    (rr/create-postgres-connection
     "Connection_name"
     :hostname "localhost"
     :dbname "database_name"
     :username "username"
     :password "password")
    ))

(provide 'databases)
#+end_src

* Syntax help
** Org-mode
*** Unordered lists
#+BEGIN_SRC text
Start with '-', '+' or '*' (star not recommended)
#+END_SRC
*** Ordered lists
#+BEGIN_SRC text
Starts with '1.' or '1)'
#+END_SRC
*** Description list
#+BEGIN_SRC text
Unordered lists with separator '::'
#+END_SRC

* Useful functions
** Capitalize first char
#+BEGIN_SRC emacs-lisp
(defun rr/capitalize-first-char (&optional string)
  "Capitalize only the first character of the input STRING."
  (when (and string (> (length string) 0))
    (let ((first-char (substring string nil 1))
          (rest-str   (substring string 1)))
      (concat (capitalize first-char) rest-str))))
#+END_SRC
** Remove all whitespaces and newline characters between words
#+BEGIN_SRC emacs-lisp
(defun rr/remove-spaces ()
  "Remove all spaces and newline characters."
  (interactive)
  (while (or (equal " " (string (char-before (point))))
             (equal "\n" (string (char-before (point)))))
    (backward-char))
  (while (or (equal " " (string (char-after (point))))
             (equal "\n" (string (char-after (point)))))
    (delete-char 1)))
#+END_SRC
** COMMENT Remove whitespaces before insert newline
#+BEGIN_SRC emacs-lisp
(defadvice newline (before rr/remove-spaces activate)
  "Remove trailing whitespace before insert newline."
  (delete-trailing-whitespace))
#+END_SRC
** Replace org-link with description of if empty its address
#+BEGIN_SRC emacs-lisp
(defun rr/org-replace-link-by-link-description ()
  "Replace an org link by its description or if empty its address."
  (interactive)
  (if (org-in-regexp org-bracket-link-regexp 1)
      (save-excursion
        (let ((remove (list (match-beginning 0) (match-end 0)))
              (description (if (match-end 3)
                               (org-match-string-no-properties 3)
                             (org-match-string-no-properties 1))))
          (apply 'delete-region remove)
          (insert description)))))
#+END_SRC
** Smart toggle flycheck error list window
#+BEGIN_SRC emacs-lisp
(defun rr/flycheck-list-smart-toggle ()
  "Toggle flycheck error list buffer."
  (interactive)
  (if (equal (buffer-name) flycheck-error-list-buffer)
      (quit-window)
    (if (member flycheck-error-list-buffer
                (mapcar 'buffer-name
                        (mapcar 'window-buffer (window-list))))
        (dolist (window (window-list))
          (when (equal flycheck-error-list-buffer
                       (buffer-name (window-buffer window)))
            (quit-window t window)))
      (flycheck-list-errors))))
#+END_SRC
** Htmlize message body if it composed using org-mode
#+BEGIN_SRC emacs-lisp
(defun rr/htmlize-mail ()
  "Htmlize message before sending."
  (interactive)
  (message-goto-body)
  (mu4e-compose-mode)
  (org-mime-htmlize))
#+END_SRC
** Update vc-state in all buffers
#+BEGIN_SRC emacs-lisp
(defun rr/refresh-vc-state ()
  "Refresh `vc-state' on all buffers."
  (dolist (buff (buffer-list))
    (with-current-buffer buff
      (when (vc-mode)
        (vc-refresh-state)))))
#+END_SRC
** Python split string
#+BEGIN_SRC emacs-lisp
(defun rr/python-split-string ()
  "Split python string, insert newline and indent."
  (interactive)
  (insert-before-markers "\"")
  (insert-before-markers "\"")
  (backward-char))
#+END_SRC
** Copy file name to clipboard from dired
#+begin_src emacs-lisp
(defun prelude-copy-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))
#+end_src

* Configuration
** Start emacs server
#+BEGIN_SRC emacs-lisp
(require 'server)
(unless (server-running-p)
  (server-start))
#+END_SRC
** COMMENT Load my secret tokens
#+BEGIN_SRC emacs-lisp
(require 'mysecret)
#+END_SRC
** Common
:PROPERTIES:
:VISIBILITY: folded
:END:
*** Increase performance
#+BEGIN_SRC emacs-lisp
(setq gnutls-min-prime-bits 4096)
#+END_SRC
*** Prefer newer files to load
#+begin_src emacs-lisp
(setq load-prefer-newer t)
#+end_src
*** COMMENT Highlight matching parens
#+BEGIN_SRC emacs-lisp
(show-paren-mode nil)
(setq show-paren-style 'parenthesis)
#+END_SRC
*** Do not indicate empty lines at the end of the window in the left fringe
#+BEGIN_SRC emacs-lisp
(set-default 'indicate-empty-lines nil)
#+END_SRC
*** Enable y/n answers instead of yes/no
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Highlight current line
#+BEGIN_SRC emacs-lisp
(use-package hl-line
  :config
  (global-hl-line-mode 1))
#+END_SRC
*** COMMENT Set default font
Good choices:
+ [[https://slackbuilds.org/repository/14.2/system/Iosevka/][Iosevka]]
+ [[https://github.com/mozilla/Fira][Fira Mono]]
+ [[https://github.com/adobe-fonts/source-code-pro][SourceCodePro]] :: Currently used
+ [[https://slackbuilds.org/repository/14.2/system/hack-font-ttf/][Hack]]
#+BEGIN_SRC emacs-lisp
(let ((my-font "Source Code Variable-11")
      (font-sets '("fontset-default"
                   "fontset-standard"
                   "fontset-startup")))
  (mapcar
   (lambda (font-set)
     ;; all the characters in that range (which is the full possible range)
     (set-fontset-font font-set '(#x000000 . #x3FFFFF) my-font)
     (set-face-font 'default my-font)
     ;; (set-face-attribute 'default nil :weight 'semi-bold)

     ;; for all characters without font specification
     ;; in another words it is a setting for lack of fallback font
     ;; if e.g. ℕ called DOUBLE-STRUCK CAPITAL N is not covered by our font
     ;; it will be displayed as placeholder-box,
     ;; because fallback for our font is now... our font :)
     (set-fontset-font font-set nil my-font))
   font-sets))
#+END_SRC
*** Open files ends with "rc" in conf-unix-mode
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.*rc$" . conf-unix-mode))
#+END_SRC
*** Set specific browser to open links
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-chrome)
#+END_SRC
*** Use UTF-8 as default coding system
#+BEGIN_SRC emacs-lisp
(when (fboundp 'set-charset-priority)
  (set-charset-priority 'unicode))
(prefer-coding-system        'utf-8)
(set-terminal-coding-system  'utf-8)
(set-keyboard-coding-system  'utf-8)
(set-selection-coding-system 'utf-8)
(setq locale-coding-system   'utf-8)
(setq-default buffer-file-coding-system 'utf-8)
#+END_SRC
*** Some useful settings
#+BEGIN_SRC emacs-lisp
(setq-default
 ad-redefinition-action 'accept   ; silence advised function warnings
 apropos-do-all t                 ; make `apropos' more useful
 compilation-always-kill t        ; kill compilation process before starting another
 compilation-ask-about-save nil   ; save all buffers on `compile'
 compilation-scroll-output t
 confirm-nonexistent-file-or-buffer t
 ;; keep the point out of the minibuffer
 ;; minibuffer-prompt-properties '(read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt)

;; History & backup settings (save nothing, that's what git is for)
 auto-save-default nil
 create-lockfiles nil
 history-length 1000
 indent-tabs-mode nil
 make-backup-files nil)

(setq-default
 bidi-display-reordering nil ; disable bidirectional text for tiny performance boost
 ;; blink-matching-paren nil    ; don't blink--too distracting
 cursor-in-non-selected-windows nil  ; hide cursors in other windows
 frame-inhibit-implied-resize t
 ;; remove continuation arrow on right fringe
 fringe-indicator-alist (delq (assq 'continuation fringe-indicator-alist)
                              fringe-indicator-alist)
 highlight-nonselected-windows nil
 image-animate-loop t
 indicate-buffer-boundaries nil
 max-mini-window-height 0.3
 mode-line-default-help-echo nil ; disable mode-line mouseovers
 mouse-yank-at-point t           ; middle-click paste at point, not at click
 resize-mini-windows 'grow-only  ; Minibuffer resizing
 show-help-function nil          ; hide :help-echo text
 split-width-threshold 160	 ; favor horizontal splits
 uniquify-buffer-name-style 'forward
 use-dialog-box nil              ; always avoid GUI
 x-stretch-cursor nil

 ;; defer jit font locking slightly to [try to] improve Emacs performance
 jit-lock-defer-time nil
 jit-lock-stealth-nice 0.1
 jit-lock-stealth-time 0.2
 jit-lock-stealth-verbose nil

 ;; `pos-tip' defaults
 pos-tip-internal-border-width 6
 pos-tip-border-width 1
 ;; no beeping or blinking please
 ring-bell-function #'ignore
 visible-bell nil)
#+END_SRC
*** Be quiet at startup
#+BEGIN_SRC emacs-lisp
(advice-add #'display-startup-echo-area-message :override #'ignore)
(setq inhibit-startup-message t
      inhibit-startup-echo-area-message user-login-name
      initial-major-mode 'fundamental-mode
      initial-scratch-message nil)
#+END_SRC
*** More reliable inter-window border
The native border "consumes" a pixel of the fringe on righter-most splits,
'window-divider' does not. Available since Emacs 25.1.
#+BEGIN_SRC emacs-lisp
(setq-default window-divider-default-places t
              window-divider-default-bottom-width 0
              window-divider-default-right-width 1)
(window-divider-mode +1)
#+END_SRC
*** Relegate tooltips to echo area only
#+BEGIN_SRC emacs-lisp
(tooltip-mode -1)
#+END_SRC
*** Disable menu bar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC
*** Disable toolbar
#+BEGIN_SRC emacs-lisp
(when (fboundp 'tool-bar-mode)
  (tool-bar-mode -1))
#+END_SRC
*** Graphic mode settings
#+BEGIN_SRC emacs-lisp
(defvar my-ui-fringe-size '4 "Default fringe width.")

(when (display-graphic-p)
  (scroll-bar-mode -1)
  (setq-default line-spacing 0)
  ;; buffer name  in frame title
  (setq frame-title-format '("" "%b @ Emacs " emacs-version))
  ;; standardize fringe width
  ;; (push (cons 'left-fringe  my-ui-fringe-size) default-frame-alist)
  ;; (push (cons 'right-fringe my-ui-fringe-size) default-frame-alist)
  )
#+END_SRC
*** Settings for tramp-mode
#+BEGIN_SRC emacs-lisp
(require 'tramp)

(setq tramp-terminal-type "tramp"
      tramp-default-method "ssh"
      explicit-shell-file-name "/bin/bash"
      tramp-completion-reread-directory-timeout nil)

(setq vc-ignore-dir-regexp
      (format "\\(%s\\)\\|\\(%s\\)"
              vc-ignore-dir-regexp
              tramp-file-name-regexp))

(setq tramp-verbose 1)
(setq auto-revert-remote-files nil)

(add-to-list 'tramp-remote-path 'tramp-own-remote-path)

;; (add-hook 'find-file-hook
;;           (lambda ()
;;             (when (tramp-tramp-file-p (buffer-file-name))
;;               (flycheck-mode))))
#+END_SRC
*** Set default input method
#+BEGIN_SRC emacs-lisp
(setq default-input-method "russian-computer")
#+END_SRC
*** Replace selected text on input
#+BEGIN_SRC emacs-lisp
(delete-selection-mode)
#+END_SRC
*** Disabled commands
#+BEGIN_SRC emacs-lisp
(setq disabled-command-function nil)
#+END_SRC
*** EPA
#+BEGIN_SRC emacs-lisp
(setq epa-pinentry-mode 'loopback)
#+END_SRC
*** Default mode
#+BEGIN_SRC emacs-lisp
(setq-default major-mode 'text-mode)
#+END_SRC
*** Fill column
#+BEGIN_SRC emacs-lisp
(setq-default fill-column 79)
(add-hook 'text-mode-hook 'auto-fill-mode)
#+END_SRC
*** Auto revert changes
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
(setq auto-revert-verbose nil)
#+END_SRC
*** Ibuffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
(setq ibuffer-saved-filter-groups
      (quote (("default"
               ("dired" (mode . dired-mode))
               ("org" (name . "^.*org$"))
               ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
               ("mu4e" (name . "\*mu4e\*"))
               ("Python" (mode . python-mode))
               ("Haskell" (mode . haskell-mode))
               ("Web" (mode . web-mode))
               ("emacs" (or
                         (name . "^\\*scratch\\*$")
                         (name . "^\\*Messages\\*$")))
               ))))
(add-hook 'ibuffer-mode-hook
          (lambda ()
            (ibuffer-auto-mode 1)
            (ibuffer-switch-to-saved-filter-groups "default")))

;; Don't show filter groups if there are no buffers in that group
(setq ibuffer-show-empty-filter-groups nil)

;; Don't ask for confirmation to delete marked buffers
(setq ibuffer-expert t)
#+END_SRC
*** Use package default settings
#+BEGIN_SRC emacs-lisp
(setq-default use-package-always-ensure t)
#+END_SRC
*** Recent files
#+BEGIN_SRC emacs-lisp
(use-package recentf
  :config
  (setq recentf-max-saved-items 200
        recentf-max-menu-items 15)
  (add-to-list 'recentf-exclude (expand-file-name "~/.emacs.d/"))
  (recentf-mode))

#+END_SRC
*** Imenu
#+BEGIN_SRC emacs-lisp
(setq imenu-auto-rescan t
      imenu-max-item-length 160
      imenu-max-items 100)
#+END_SRC
*** More convenient scrolling settings
#+begin_src emacs-lisp
(setq scroll-conservatively 101
      scroll-preserve-screen-position t
      scroll-margin 15)
#+end_src
*** Single line horizontal scrolling
#+BEGIN_SRC emacs-lisp
(setq auto-hscroll-mode t)
#+END_SRC
*** COMMENT Show trailing whitespace
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook
          (lambda ()
            (interactive)
            (setq show-trailing-whitespace 1)))
#+END_SRC
*** Navigation by subwords
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'subword-mode)
#+end_src
*** Set minimal height of window
#+BEGIN_SRC emacs-lisp
(setq window-min-height 10)
#+END_SRC
*** Ediff settings
#+BEGIN_SRC emacs-lisp
(use-package ediff
  :config
  (setq ediff-window-setup-function 'ediff-setup-windows-plain
        ediff-split-window-function 'split-window-horizontally))
#+END_SRC
*** Smerge
#+begin_src emacs-lisp
(use-package smerge-mode)
#+end_src
*** ANSI colors
**** Compilation buffer
#+BEGIN_SRC emacs-lisp
(require 'ansi-color)
(defun colorize-compilation-buffer ()
  (toggle-read-only)
  (ansi-color-apply-on-region compilation-filter-start (point))
  (toggle-read-only))
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+END_SRC
**** Shell
#+BEGIN_SRC emacs-lisp
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
#+END_SRC
*** Kill compilation window when quit
#+BEGIN_SRC emacs-lisp
(add-hook 'compilation-mode-hook
          (lambda () (local-set-key (kbd "q") 'kill-buffer-and-window)))
#+END_SRC
*** Unclassified settings
No more ugly line splitting
#+BEGIN_SRC emacs-lisp
(setq-default truncate-lines t)
#+END_SRC
*** Save minibuffer history between sessions
#+BEGIN_SRC emacs-lisp
(use-package savehist
  :ensure nil
  :config
  (savehist-mode 1)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring
          shell-command-history)))
#+END_SRC
*** Kill-ring
Save stuff you’ve copied in other applications to the emacs kill-ring.
#+begin_src emacs-lisp
(setq save-interprogram-paste-before-kill t)
#+end_src
*** Increase max lines in messages buffer
#+begin_src emacs-lisp
(setq message-log-max 1000)
#+end_src
*** Fix helm issue
#+begin_src emacs-lisp
(setq x-wait-for-event-timeout nil)
#+end_src
*** Enable recursive minibuffers
#+begin_src emacs-lisp
(setq enable-recursive-minibuffers t)
#+end_src
*** Large files treshold
#+begin_src emacs-lisp
(setq large-file-warning-threshold (* 100 1024 1024))
#+end_src
*** Cleanup trailing spaces before save
#+begin_src emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src
*** Set tab width
#+begin_src emacs-lisp
(setq-default tab-width 4)
#+end_src
*** Show column number
#+begin_src emacs-lisp
(column-number-mode)
#+end_src
*** Use built-in tooltips
#+begin_src emacs-lisp
(setq x-gtk-use-system-tooltips nil)
#+end_src
*** Confirm kill emacs
#+BEGIN_SRC emacs-lisp
(setq confirm-kill-processes nil
      confirm-kill-emacs 'y-or-n-p)
#+END_SRC
** Theme
*** Color scheme
#+BEGIN_SRC emacs-lisp
(use-package zenburn-theme
  :after (helm smerge-mode ediff org)
  :config
  (load-theme 'zenburn t)
  (let ((line (face-attribute 'mode-line :underline)))
    (set-face-attribute 'mode-line          nil :overline   line)
    (set-face-attribute 'mode-line-inactive nil :overline   line)
    (set-face-attribute 'mode-line-inactive nil :underline  line)
    (set-face-attribute 'mode-line          nil :box        nil)
    (set-face-attribute 'mode-line-inactive nil :box        nil)

    ;; Fixes for emacs 27
    (set-face-attribute 'helm-source-header nil :extend t)
    (set-face-attribute 'helm-selection nil :extend t)

    (set-face-attribute 'secondary-selection nil :extend t)
    (set-face-attribute 'org-agenda-clocking nil :extend t)
    (set-face-attribute 'diff-header nil :extend t)
    (set-face-attribute 'diff-file-header nil :extend t)
    (set-face-attribute 'diff-removed nil :extend t)
    (set-face-attribute 'diff-added nil :extend t)
    (set-face-attribute 'ediff-current-diff-A nil :extend t)
    (set-face-attribute 'ediff-current-diff-B nil :extend t)
    (set-face-attribute 'ediff-current-diff-C nil :extend t)
    (set-face-attribute 'ediff-current-diff-Ancestor nil :extend t)
    (set-face-attribute 'ediff-even-diff-A nil :extend t)
    (set-face-attribute 'ediff-even-diff-B nil :extend t)
    (set-face-attribute 'ediff-even-diff-C nil :extend t)
    (set-face-attribute 'ediff-even-diff-Ancestor nil :extend t)
    (set-face-attribute 'ediff-odd-diff-A nil :extend t)
    (set-face-attribute 'ediff-odd-diff-B nil :extend t)
    (set-face-attribute 'ediff-odd-diff-C nil :extend t)
    (set-face-attribute 'ediff-odd-diff-Ancestor nil :extend t)

    (set-face-attribute 'smerge-upper nil :extend t)
    (set-face-attribute 'smerge-lower nil :extend t)
    (set-face-attribute 'smerge-base nil :extend t)
    (set-face-attribute 'smerge-markers nil :extend t)))
#+END_SRC
*** COMMENT Highlight symbol at point
#+BEGIN_SRC emacs-lisp
(use-package highlight-symbol
  :config
  (highlight-symbol-nav-mode)

  (add-hook 'prog-mode-hook (lambda () (highlight-symbol-mode)))

  (setq highlight-symbol-idle-delay 0.2
        highlight-symbol-on-navigation-p t)

  (global-set-key [(control shift mouse-1)]
                  (lambda (event)
                    (interactive "e")
                    (goto-char (posn-point (event-start event)))
                    (highlight-symbol-at-point)))

  (global-set-key (kbd "M-n") 'highlight-symbol-next)
  (global-set-key (kbd "M-p") 'highlight-symbol-prev))
#+END_SRC
*** Modeline
**** Custom functions
***** Git status
#+BEGIN_SRC emacs-lisp
(defun rr/modeline-git-vc ()
  "Show GIT status."
  (let ((branch (mapconcat 'concat (cdr (split-string vc-mode "[:-]")) "-")))
    (when (buffer-file-name)
      (pcase (vc-state (buffer-file-name))
        (`up-to-date
         (concat
          (propertize ""
                      'face `(:inherit mode-line)
                      'display '(raise -0.1))
          (propertize (format " %s" branch) 'face `(:inherit mode-line))))
        (`edited
         (concat
          (propertize ""
                      'face `(:inherit mode-line :foreground "#8CD0D3")
                      'display '(raise -0.1))
          (propertize (format " %s" branch) 'face `(:inherit mode-line :foreground "#8CD0D3"))))
        (`added
         (concat
          (propertize ""
                      'face `(:inherit mode-line :foreground "#F0DFAF")
                      'display '(raise -0.1))
          (propertize (format " %s" branch) 'face `(:inherit mode-line :foreground "#F0DFAF"))))
        (`unregistered " ??")
        (`removed
         (concat
          (propertize ""
                      'face `(:inherit mode-line :foreground "#CC9393")
                      'display '(raise -0.1))
          (propertize (format " %s" branch) 'face `(:inherit mode-line :foreground "#CC9393"))))
        (`needs-merge " Con")
        (`needs-update " Upd")
        (`ignored " Ign")
        (_ " Unk")))))
#+END_SRC
***** SVN status
#+BEGIN_SRC emacs-lisp
(defun rr/modeline-svn-vc ()
  "Show SVN status."
  (let ((revision (cadr (split-string vc-mode "-"))))
    (concat
     (propertize " " 'face `(:height 1.2) 'display '(raise -0.1))
     (propertize (format " · %s" revision) 'face `(:height 0.9)))))
#+END_SRC
***** Flycheck status
#+BEGIN_SRC emacs-lisp
(defun rr/flycheck-mode-line-status-text (&optional status)
  "Get a text describing STATUS for use in the mode line.

STATUS defaults to `flycheck-last-status-change' if omitted or
nil."
  (let ((text (pcase (or status flycheck-last-status-change)
                (`not-checked "")
                (`no-checker "-")
                (`running "*")
                (`errored "!")
                (`finished
                 (let-alist (flycheck-count-errors flycheck-current-errors)
                   (concat
                    (propertize (format " • %s " (or .error "✓")) 'face `(:inherit error))
                    (propertize (format "• %s " (or .warning "✓")) 'face `(:inherit warning))
                    (propertize (format "• %s " (or .info "✓")) 'face `(:inherit success))
                    )))
                (`interrupted ".")
                (`suspicious "?"))))
    (propertize text)))

(add-to-list 'global-mode-string '(:eval (rr/flycheck-mode-line-status-text)))
#+END_SRC
**** Custom modeline
***** Minions
#+begin_src emacs-lisp
(use-package minions
  :config
  (setq minions-direct '(pyvenv-mode))
  (minions-mode 1))
#+end_src
***** Ribbons
#+begin_src emacs-lisp
(use-package moody
  :config
  (setq x-underline-at-descent-line t)
  (moody-replace-mode-line-buffer-identification)
  (moody-replace-vc-mode))
#+end_src
** Shell settings
#+begin_src emacs-lisp
(add-hook 'shell-mode-hook (lambda () (company-mode -1)))
(setq comint-scroll-to-bottom-on-input t
      comint-move-point-for-output t
      comint-prompt-read-only t
      comint-input-ignoredups t
      comint-completion-addsuffix t)
#+end_src
** EShell settings
#+begin_src emacs-lisp
(setq eshell-scroll-to-bottom-on-input t
      eshell-scroll-to-bottom-on-output t)
#+end_src
** Spell checking
#+begin_src emacs-lisp
(use-package ispell
  :config
  (setq ispell-program-name "aspell")
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook #'flyspell-prog-mode))
#+end_src
** SQL
*** Emacs clojure database client
#+begin_src emacs-lisp
(use-package ejc-sql
  ;; :commands ejc-connect
  :config
  (defun rr/ejc-sql-connected-hook ()
    (ejc-set-rows-limit 500)
    (ejc-set-column-width-limit nil))

  (add-hook 'ejc-sql-connected-hook 'rr/ejc-sql-connected-hook)

  (setq ejc-org-mode-show-results nil)

  (add-hook 'ejc-sql-minor-mode-hook
            (lambda ()
              (auto-complete-mode t)
              (ejc-ac-setup)))

  ;; Define connections
  (require 'databases)
  (rr/setup-connections))
#+end_src
*** Make PostgreSQL default
#+BEGIN_SRC emacs-lisp
(eval-after-load "sql"
  '(progn
     (sql-set-product 'postgres)))
#+END_SRC
*** Disable line breaking
#+BEGIN_SRC emacs-lisp
(add-hook 'sql-interactive-mode-hook
          (lambda ()
            (toggle-truncate-lines t)))
#+END_SRC
** Which key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (which-key-mode))
#+END_SRC
** Replace built-in help
#+BEGIN_SRC emacs-lisp
(use-package helpful
  :config
  (global-set-key (kbd "C-h f") #'helpful-callable)

  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key))
#+END_SRC
** YASnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :config
  (yas-reload-all)
  (setq yas-indent-line 'fixed)
  (add-hook 'prog-mode-hook #'yas-minor-mode))
#+END_SRC
** Auto complete
*** Common
#+BEGIN_SRC emacs-lisp
(use-package company
  :config
  (setq company-global-modes '(not org-mode markdown-mode))
  (add-hook 'after-init-hook 'global-company-mode)
  (setq company-dabbrev-downcase nil
        company-tooltip-flip-when-above t)
  (add-to-list 'company-transformers 'company-sort-prefer-same-case-prefix)
  (setq-default company-idle-delay .2
                company-minimum-prefix-length 2
                company-tooltip-align-annotations t)
  (add-to-list 'company-backends 'company-dabbrev-code)
  (add-to-list 'company-backends 'company-yasnippet)
  (add-to-list 'company-backends 'company-files)
  (add-to-list 'company-backends 'company-elisp))
#+END_SRC
*** COMMENT Statistic
Show more offten used completeons first
#+BEGIN_SRC emacs-lisp
(use-package company-statistics
  :config
  (company-statistics-mode))
#+END_SRC
*** Quick help
#+BEGIN_SRC emacs-lisp
(use-package company-quickhelp
  :config
  (company-quickhelp-mode 1))
#+END_SRC
*** Languages
**** LaTeX
#+BEGIN_SRC emacs-lisp
(use-package company-auctex
  :config
  (company-auctex-init))
#+END_SRC
**** WEB
#+BEGIN_SRC emacs-lisp
(use-package company-web
  :config
  (add-to-list 'company-backends 'company-web-html)
  (add-to-list 'company-backends 'company-web-jade)
  (add-to-list 'company-backends 'company-web-slim))
#+END_SRC
**** Shell
#+BEGIN_SRC emacs-lisp
(use-package company-shell
  :config
  (add-to-list 'company-backends 'company-shell))
#+END_SRC
**** JavaScript
#+BEGIN_SRC emacs-lisp
(use-package company-tern
  :after tern
  :config
  (add-to-list 'company-backends 'company-tern))
#+END_SRC
** Paradox
#+BEGIN_SRC emacs-lisp
(use-package paradox
  :config
  (setq-default paradox-column-width-package 27
                paradox-column-width-version 13
                paradox-execute-asynchronously t
                paradox-spinner-type 'progress-bar
                paradox-hide-wiki-packages t)
  (paradox-enable))
#+END_SRC
** Flx
#+begin_src emacs-lisp
(use-package flx)
#+end_src
** Helm
*** Configuration
#+BEGIN_SRC emacs-lisp
(use-package helm
  :config
  (require 'helm)
  (require 'helm-config)

  (when (executable-find "curl")
    (setq helm-google-suggest-use-curl-p t))

  (setq helm-split-window-inside-p            nil ; open helm buffer inside current window, not occupy whole other window
	    helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
	    helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
	    helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
	    helm-ff-file-name-history-use-recentf t
	    helm-echo-input-in-header-line nil
	    helm-display-header-line nil
	    helm-buffer-max-length 40
	    helm-ff-delete-files-function 'helm-delete-marked-files-async
	    helm-inherit-input-method nil)

  (require 'helm-files)

  (with-eval-after-load 'helm
    (define-key global-map [remap find-file] 'helm-find-files)
    (define-key global-map [remap occur] 'helm-occur)
    (define-key global-map [remap switch-to-buffer] 'helm-mini)
    (define-key global-map [remap dabbrev-expand] 'helm-dabbrev)
    (define-key global-map [remap execute-extended-command] 'helm-M-x)
    (define-key global-map [remap yank-pop] 'helm-show-kill-ring)
    (define-key global-map [remap tab-to-tab-stop] 'helm-occur)

    (define-key lisp-interaction-mode-map [remap completion-at-point] 'helm-lisp-completion-at-point)
    (define-key emacs-lisp-mode-map       [remap completion-at-point] 'helm-lisp-completion-at-point)

    (define-key helm-find-files-map (kbd "C-i") 'helm-ff-TAB))


  (add-hook 'eshell-mode-hook
	        (lambda ()
	          (eshell-cmpl-initialize)
	          (define-key eshell-mode-map [remap eshell-pcomplete] 'helm-esh-pcomplete)
	          (define-key eshell-mode-map (kbd "M-p") 'helm-eshell-history)))

  (setq helm-display-function #'pop-to-buffer)
  (setq helm-show-completion-display-function #'pop-to-buffer)

  (helm-mode 1)
  (helm-adaptive-mode 1))
#+END_SRC
*** Tramp
#+BEGIN_SRC emacs-lisp
(use-package helm-tramp
  :config
  (define-key global-map (kbd "C-c s") 'helm-tramp))
#+END_SRC
*** COMMENT Swoop
Replace for i-search or swiper
#+BEGIN_SRC emacs-lisp
(use-package helm-swoop
  :config
  ;; Change the keybinds to whatever you like :)
  (global-set-key (kbd "M-i") 'helm-swoop)
  (global-set-key (kbd "M-I") 'helm-swoop-back-to-last-point)
  (global-set-key (kbd "C-c M-i") 'helm-multi-swoop)
  (global-set-key (kbd "C-x M-i") 'helm-multi-swoop-all)

  ;; When doing isearch, hand the word over to helm-swoop
  (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
  ;; From helm-swoop to helm-multi-swoop-all
  (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)

  ;; Instead of helm-multi-swoop-all, you can also use helm-multi-swoop-current-mode
  (define-key helm-swoop-map (kbd "M-m") 'helm-multi-swoop-current-mode-from-helm-swoop)

  ;; Move up and down like isearch
  (define-key helm-swoop-map (kbd "C-r") 'helm-previous-line)
  (define-key helm-swoop-map (kbd "C-s") 'helm-next-line)
  (define-key helm-multi-swoop-map (kbd "C-r") 'helm-previous-line)
  (define-key helm-multi-swoop-map (kbd "C-s") 'helm-next-line)

  ;; Save buffer when helm-multi-swoop-edit complete
  (setq helm-multi-swoop-edit-save t)

  ;; If this value is t, split window inside the current window
  (setq helm-swoop-split-with-multiple-windows nil)

  ;; Split direcion. 'split-window-vertically or 'split-window-horizontally
  (setq helm-swoop-split-direction 'split-window-vertically)

  ;; If nil, you can slightly boost invoke speed in exchange for text color
  (setq helm-swoop-speed-or-color t)

  ;; ;; Go to the opposite side of line from the end or beginning of line
  (setq helm-swoop-move-to-line-cycle t)

  ;; Optional face for line numbers
  ;; Face name is `helm-swoop-line-number-face`
  (setq helm-swoop-use-line-number-face t)

  (setq helm-swoop-split-with-multiple-windows nil
        helm-swoop-split-direction 'split-window-vertically
        helm-swoop-split-window-function 'helm-default-display-buffer)

  (setq helm-swoop-pre-input-function
        (lambda () "")))
#+END_SRC
*** Helm flx
#+BEGIN_SRC emacs-lisp
(use-package helm-flx
  :after helm
  :config
  (helm-flx-mode +1)
  (setq helm-flx-for-helm-find-files t
      helm-flx-for-helm-locate t))
#+END_SRC
*** Google search using helm
#+BEGIN_SRC emacs-lisp
(use-package helm-google
  :config
  (setq helm-google-default-engine 'searx)
  (global-set-key (kbd "C-h C--") 'helm-google))
#+END_SRC
*** Helm flycheck
#+BEGIN_SRC emacs-lisp
(use-package helm-flycheck
  :after flycheck
  :config
  (eval-after-load 'flycheck
    '(define-key flycheck-mode-map (kbd "C-c ! h") 'helm-flycheck)))
#+END_SRC
*** Helm org rifle
#+begin_src emacs-lisp
(use-package helm-org-rifle
  :after helm
  :bind (("C-x c o" . helm-org-rifle-agenda-files)))
#+end_src
*** Helm xref
#+begin_src emacs-lisp
(use-package helm-xref
  :after helm
  :config
  (setq xref-show-xrefs-function 'helm-xref-show-xrefs-27))
#+end_src
*** Helm lsp integration
#+begin_src emacs-lisp
(use-package helm-lsp
  :config
  :bind (("C-x c j" . helm-lsp-workspace-symbol)))
#+end_src
*** COMMENT Helm org
#+begin_src emacs-lisp
(use-package helm-org
  :config
  (add-to-list 'helm-completing-read-handlers-alist '(org-capture . helm-org-completing-read-tags))
  (add-to-list 'helm-completing-read-handlers-alist '(org-set-tags . helm-org-completing-read-tags)))
#+end_src
** COMMENT Ivy
*** Configuration
#+begin_src emacs-lisp
(use-package ivy
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-height 20)


  ;; enable this if you want `swiper' to use it
  (setq search-default-mode #'char-fold-to-regexp)
  (global-set-key "\C-s" 'swiper)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-x j") 'counsel-semantic-or-imenu)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-x b") 'ivy-switch-buffer)
  (global-set-key (kbd "M-y") 'counsel-yank-pop)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)

  (setq ivy-height-alist
        '((counsel-evil-registers . 5)
          (counsel-yank-pop . 10)
          (counsel-git-log . 8)
          (counsel--generic . 7)
          (counsel-el . 7)))

  (setq ivy-re-builders-alist
        '((t . ivy--regex-ignore-order))))
#+end_src
*** Posframe
#+begin_src emacs-lisp
(use-package ivy-posframe
  :config
  (setq ivy-posframe-display-functions-alist
      '((swiper          . nil)
        (complete-symbol . ivy-posframe-display-at-point)
        (t               . ivy-posframe-display-at-frame-center)))
  (ivy-posframe-mode 1))
#+end_src
*** Ivy xref
#+begin_src emacs-lisp
(use-package ivy-xref
  :init (if (< emacs-major-version 27)
            (setq xref-show-xrefs-function #'ivy-xref-show-xrefs)
          (setq xref-show-definitions-function #'ivy-xref-show-defs)))
#+end_src
** Smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens-config
  :ensure smartparens
  :config
  (setq sp-show-pair-from-inside t
        smartparens-strict-mode t)

  (setq sp-highlight-pair-overlay nil)

  (sp-local-pair 'web-mode "%" "%" :wrap "C-%")
  (sp-local-pair 'web-mode "<" ">" :wrap "C->")

  ;; (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
  ;; (add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)
  ;; (add-hook 'org-mode-hook 'turn-on-smartparens-strict-mode)
  (sp-local-pair 'prog-mode "{" nil :post-handlers '(("||\n[i]" "RET")))
  (sp-local-pair 'java-mode "/*" "*/" :post-handlers '(("* ||\n[i]" "RET")))

  (smartparens-global-strict-mode t)
  (show-smartparens-global-mode t)

  :bind
  ("M-]" . 'sp-unwrap-sexp))
#+END_SRC
** Workspaces
#+BEGIN_SRC emacs-lisp
(use-package eyebrowse
  :config
  (setq eyebrowse-wrap-around t
        eyebrowse-new-workspace t
        eyebrowse-switch-back-and-forth t)
  (eyebrowse-mode t))
#+END_SRC
** Popup windows settings
*** Shackle
#+BEGIN_SRC emacs-lisp
(use-package shackle
  :config
  (setq shackle-rules
        '(("\\`\\*helm.*?\\*\\'" :regexp t :align t :size 0.4)
          (compilation-mode :select t :align t :size 0.4)
          ("\\`\\*Org\sSrc.*?\\*.*\\'" :regexp t :align right :size 100)
          ("\\`\\*Org-Babel\sError\sOutput\\*.*\\'" :regexp t :align t :size 0.4)
          ("*compilation*" :select t :align t :size 0.4)
          ("*Async Shell Command*" :select t :align t :size 0.4)
          ("*Shell Command Output*" :select t :align t :size 0.4)
          ("\\`\\*e?shell.*\\'" :regexp t :select t :popup t :align t :size 0.4)
          (ejc-result-mode :select t :popup t :align t :size 0.5)
          (comint-mode :select t :align t :size 0.4)
          (help-mode :select t :align t :size 0.4)
          (helpful-mode :select t :align t :size 0.4)
          (magit-status-mode :select t :align t :size 0.4 :inhibit-window-quit t)
          (magit-log-mode :same t :inhibit-window-quit t)
          (magit-refs-mode :select t :same t :align t :size 0.4)
          (magit-diff-mode :select nil :align right :size 0.5)
          (magit-revision-mode :select t :align right :size 0.5)
          (flycheck-error-list-mode :select t :align right :size 0.3)
          (inferior-python-mode :select t :popup t :align t :size 0.4)))
  (shackle-mode))
#+END_SRC
** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
** Anzu
#+BEGIN_SRC emacs-lisp
(use-package anzu
  :config
  (global-anzu-mode +1)
  (setq anzu-cons-mode-line-p nil))
#+END_SRC
** Windows navigation
#+BEGIN_SRC emacs-lisp
;; (use-package ace-window
;;   :config
;;   (global-set-key (kbd "M-o") 'ace-window))

(use-package winum
  :init
  (setq winum-keymap
        (let ((map (make-sparse-keymap)))
          (define-key map (kbd "C-`") 'winum-select-window-by-number)
          (define-key map (kbd "C-²") 'winum-select-window-by-number)
          (define-key map (kbd "M-0") 'winum-select-window-0-or-10)
          (define-key map (kbd "M-1") 'winum-select-window-1)
          (define-key map (kbd "M-2") 'winum-select-window-2)
          (define-key map (kbd "M-3") 'winum-select-window-3)
          (define-key map (kbd "M-4") 'winum-select-window-4)
          (define-key map (kbd "M-5") 'winum-select-window-5)
          (define-key map (kbd "M-6") 'winum-select-window-6)
          (define-key map (kbd "M-7") 'winum-select-window-7)
          (define-key map (kbd "M-8") 'winum-select-window-8)
          map))

  :config
  (setq winum-auto-setup-mode-line t
        winum-ignored-buffers '(" *which-key*"))
  (winum-mode))
#+END_SRC
** Smartscan
#+begin_src emacs-lisp
(use-package smartscan
  :config
  (setq smartscan-symbol-selector "symbol")
  (add-hook 'prog-mode-hook 'smartscan-mode))
#+end_src
** Dried
*** Common settings
#+BEGIN_SRC emacs-lisp
(use-package dired+
  :config
  (setq dired-listing-switches "--group-directories-first -alh"
        dired-dwim-target t            ; if another Dired buffer is visible in another window, use that directory as target for Rename/Copy
        dired-recursive-copies 'always         ; "always" means no asking
        dired-recursive-deletes 'top           ; "top" means ask once for top level directory
        )
  (toggle-diredp-find-file-reuse-dir 1))

;; automatically refresh dired buffer on changes
(add-hook 'dired-mode-hook 'auto-revert-mode)
#+END_SRC
*** Show git information in dired
#+begin_src emacs-lisp
(use-package dired-git-info
  :config
  (with-eval-after-load 'dired
    (define-key dired-mode-map ")" 'dired-git-info-mode)))
#+end_src
** Projectile
*** Basic setup
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :init
  (setq projectile-keymap-prefix (kbd "C-c p"))
  :config
  (setq projectile-completion-system 'helm)
  ;; (setq projectile-completion-system 'ivy)
  (add-to-list 'projectile-globally-ignored-files "*.log")
  (setq projectile-mode-line '(:eval (format " [%s]" (projectile-project-name))))
  (projectile-mode +1))
#+END_SRC
*** Helm projectile
#+BEGIN_SRC emacs-lisp
(use-package helm-projectile
  :config
  (helm-projectile-on)
  (setq projectile-switch-project-action 'helm-projectile))
#+END_SRC
*** COMMENT Counsel projectile
#+begin_src emacs-lisp
(use-package counsel-projectile
  :config
  (counsel-projectile-mode))
#+end_src
** Htmlize
#+BEGIN_SRC emacs-lisp
(use-package htmlize
  :config
  (setq org-html-htmlize-output-type 'inline-css))
#+END_SRC
** Syntax check
*** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :config
  (setq flycheck-idle-change-delay 2)
  (add-hook 'after-init-hook #'global-flycheck-mode)
  (global-set-key (kbd "C-'") 'helm-flycheck)

  (defun doom-modeline-update-flycheck-text (&optional status)
    (setq doom-modeline--flycheck-text
          (rr/flycheck-mode-line-status-text)))
  (when (fboundp 'define-fringe-bitmap)
    (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow
      [#b10000000
       #b11000000
       #b11100000
       #b11110000
       #b11111000
       #b11111100
       #b11111110
       #b11111100
       #b11111000
       #b11110000
       #b11100000
       #b11000000
       #b10000000]))

  (let ((bitmap 'flycheck-fringe-bitmap-double-arrow))
    (flycheck-define-error-level 'error
      :severity 2
      :overlay-category 'flycheck-error-overlay
      :fringe-bitmap bitmap
      :fringe-face 'flycheck-fringe-error)
    (flycheck-define-error-level 'warning
      :severity 1
      :overlay-category 'flycheck-warning-overlay
      :fringe-bitmap bitmap
      :fringe-face 'flycheck-fringe-warning)
    (flycheck-define-error-level 'info
      :severity 0
      :overlay-category 'flycheck-info-overlay
      :fringe-bitmap bitmap
      :fringe-face 'flycheck-fringe-info))

  ;; (setq flycheck-mode-line '(:eval (rr/flycheck-mode-line-status-text)))

  (setq-default flycheck-disabled-checkers
                (append flycheck-disabled-checkers
                        '(javascript-jshint)))

  (setq-default flycheck-disabled-checkers
                (append flycheck-disabled-checkers
                        '(json-jsonlist))))
#+END_SRC
*** Show errors in posframe
#+BEGIN_SRC emacs-lisp
(use-package flycheck-posframe
  :after flycheck
  :config
  (setq flycheck-posframe-info-prefix "\u25B6 ")
  (setq flycheck-posframe-warning-prefix "\u0021 ")
  (setq flycheck-posframe-error-prefix "\u203C ")
  (set-face-attribute 'flycheck-posframe-info-face nil :inherit 'info)
  (set-face-attribute 'flycheck-posframe-warning-face nil :inherit 'warning)
  (set-face-attribute 'flycheck-posframe-error-face nil :inherit 'success)
  (add-hook 'flycheck-mode-hook #'(lambda ()
                                    (unless (bound-and-true-p lsp-mode)
                                      (flycheck-posframe-mode)))))
#+END_SRC
** Highlight TODO item
#+begin_src emacs-lisp
(use-package hl-todo
  :config
  (global-hl-todo-mode))
#+end_src
** Version control
*** GIT
#+BEGIN_SRC emacs-lisp
(use-package magit
  :config
  (global-set-key (kbd "C-x g") 'magit-status)
  (global-magit-file-mode)

  (setq magit-revision-insert-related-refs 'all
        magit-revision-use-hash-sections 'quick)

  (setq magit-diff-highlight-hunk-region-functions
        '(magit-diff-highlight-hunk-region-dim-outside
          magit-diff-highlight-hunk-region-using-underlines))

  (setq magit-fetch-arguments '("--prune"))

  ;; Fixes for emacs 27
  (set-face-attribute 'magit-diff-context-highlight nil :extend t)
  (set-face-attribute 'magit-diff-removed-highlight nil :extend t)
  (set-face-attribute 'magit-diff-added-highlight nil :extend t)
  (set-face-attribute 'magit-diff-hunk-heading-highlight nil :extend t)
  (set-face-attribute 'magit-diff-removed nil :extend t)
  (set-face-attribute 'magit-diff-added nil :extend t)
  (set-face-attribute 'magit-diff-hunk-heading nil :extend t)
  (set-face-attribute 'magit-section-highlight nil :extend t)
  (set-face-attribute 'magit-diff-file-heading-highlight nil :extend t)

  (add-hook 'focus-in-hook #'git-gutter:update-all-windows)
  (add-hook 'magit-post-refresh-hook #'git-gutter:update-all-windows)
  (add-hook 'focus-in-hook 'rr/refresh-vc-state)
  (add-hook 'magit-post-refresh-hook 'rr/refresh-vc-state))
#+END_SRC
*** Transient
#+begin_src emacs-lisp
(use-package transient
  :config
  (setq transient-show-popup 2))
#+end_src
*** Work with forges
#+BEGIN_SRC emacs-lisp
(use-package forge
  :config
  (add-to-list 'forge-alist
               '("git.eoadm.com" "git.eoadm.com/api/v4"
                 "git.eoadm.com" forge-gitlab-repository))
  (add-to-list 'forge-alist
               '("178.62.208.194" "178.62.208.194/api/v4"
                 "178.62.208.194" forge-gitlab-repository)))
#+END_SRC
*** GIT gutter
#+BEGIN_SRC emacs-lisp
(use-package git-gutter-fringe
  :config
  (defun rr/git-gutter-local ()
    "Enable `git-gutter-mode' in non-remote buffers."
    (when (and (buffer-file-name)
               (not (file-remote-p (buffer-file-name))))
      (git-gutter-mode +1)))

  (add-hook 'text-mode-hook #'rr/git-gutter-local)
  (add-hook 'prog-mode-hook #'rr/git-gutter-local)
  (add-hook 'conf-mode-hook #'rr/git-gutter-local)

  (setq-default fringes-outside-margins t)

  (set-face-attribute 'git-gutter-fr:added nil
                      :background (face-attribute 'default :background))

  (set-face-attribute 'git-gutter-fr:deleted nil
                      :background (face-attribute 'default :background))

  (set-face-attribute 'git-gutter-fr:modified nil
                      :background (face-attribute 'default :background))

  (setq git-gutter-fr:side 'right-fringe)

  (fringe-helper-define 'git-gutter-fr:added '(center repeated)
    "XXXXXXXX")

  (fringe-helper-define 'git-gutter-fr:modified '(center repeated)
    "XXXXXXXX")

  (fringe-helper-define 'git-gutter-fr:deleted 'bottom
    ".......X"
    "......XX"
    ".....XXX"
    "....XXXX"
    "...XXXXX"
    "..XXXXXX"
    ".XXXXXXX"
    "XXXXXXXX"))
#+END_SRC
*** Show TODO items in magit buffer
#+begin_src emacs-lisp
(use-package magit-todos
  :config
  (add-hook 'prog-mode-hook 'magit-todos-mode))
#+end_src
** Multiple cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :config
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
  (global-set-key (kbd "C-c d") 'mc/skip-to-next-like-this))
#+END_SRC
** Expand region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :config
  (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC
** Search and grep utilities
#+BEGIN_SRC emacs-lisp
(use-package wgrep
  :config
  (setq wgrep-auto-save-buffer t))

(use-package wgrep-ag)

(use-package ag
  :after wgrep-ag)

(use-package helm-ag)
(use-package helm-rg)
(use-package deadgrep)
#+END_SRC
** Terminal emulator
#+BEGIN_SRC emacs-lisp
(use-package sane-term
  :config
  (global-set-key (kbd "C-x t") 'sane-term)
  (global-set-key (kbd "C-x T") 'sane-term-create)

;; Optional convenience binding. This allows C-y to paste even when in term-char-mode (see below).
  (add-hook
   'term-mode-hook
   (lambda ()
     (define-key term-raw-map (kbd "C-y")
       (lambda ()
         (interactive)
         (term-line-mode)
         (yank)
         (term-char-mode)))))
  (add-hook 'term-mode-hook (lambda () (setq-local global-hl-line-mode nil))))
#+END_SRC
** Rainbow mode
#+BEGIN_QUOTE
Colorize color names in buffers
#+END_QUOTE
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :config
  (add-to-list 'rainbow-x-colors-major-mode-list 'web-mode)
  (add-to-list 'rainbow-x-colors-major-mode-list 'python-mode))
#+END_SRC
** CSV
Major mode for work with CSV files
#+BEGIN_SRC emacs-lisp
(use-package csv-mode)
#+END_SRC
** Log files
#+BEGIN_SRC emacs-lisp
(use-package vlf
  :config
  (require 'vlf-setup))

(use-package logview
  :config
  (setq logview-additional-level-mappings
        '(("Python" . ((error       "CRITICAL")
                       (error       "ERROR")
                       (warning     "WARNING")
                       (information "INFO")
                       (debug       "DEBUG")))))

  (setq logview-additional-submodes
        '(("Python" (format . "TIMESTAMP LEVEL - [NAME]:") (levels . "Python")))))
#+END_SRC
** Nginx
#+BEGIN_SRC emacs-lisp
(use-package nginx-mode)
#+END_SRC
** SSH config mode
#+begin_src emacs-lisp
(use-package ssh-config-mode
  :mode ("/\\.ssh/config\\'" "/system/ssh\\'" "/sshd?_config\\'" "/known_hosts\\'" "/authorized_keys2?\\'")
  :hook (ssh-config-mode . turn-on-font-lock)

  :config
  (autoload 'ssh-config-mode "ssh-config-mode" t))
#+end_src
** REST client
Quite interesting package. I think it will be replace for Postman for me.
#+BEGIN_SRC emacs-lisp
(use-package restclient)
#+END_SRC
And autocompletion for it:
#+BEGIN_SRC emacs-lisp
(use-package company-restclient
  :config
  (add-to-list 'company-backends 'company-restclient))
#+END_SRC
And even org-babel integration:
#+BEGIN_SRC emacs-lisp
(use-package ob-restclient
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((restclient . t))))
#+END_SRC
** PDF tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :config
  (pdf-tools-install))
#+END_SRC
** Gitignore templates
#+BEGIN_SRC emacs-lisp
(use-package gitignore-templates)
#+END_SRC
** Volatile highlight
#+BEGIN_SRC emacs-lisp
(use-package volatile-highlights
  :config
  (volatile-highlights-mode t))
#+END_SRC
** Regexps
Build in regex package:
#+begin_src emacs-lisp
(use-package re-builder
  :bind (("C-c R" . re-builder)))
#+end_src
Visual Regexp package:
#+begin_src emacs-lisp
(use-package visual-regexp
  :init
  (use-package visual-regexp-steroids)

  :bind (("C-c r" . vr/replace)
         ("C-c q" . vr/query-replace))

  ;; if you use multiple-cursors, this is for you:
  :config (use-package  multiple-cursors
            :bind ("C-c m" . vr/mc-mark)))
#+end_src
** Password store
#+begin_src emacs-lisp
(use-package password-store
  :config
  (setq password-store-password-length 12))

(use-package password-store-otp)

(use-package pass)

(use-package helm-pass)
;; (use-package ivy-pass)
#+end_src
** Org
*** Some tweaks
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'turn-on-font-lock)
(add-hook 'org-mode-hook (lambda () (setq-local global-hl-line-mode nil)))

;; Setup ui
(setq org-adapt-indentation nil
      org-eldoc-breadcrumb-separator " → "
      org-hide-leading-stars t
      org-hide-leading-stars-before-indent-mode t
      org-indent-mode-turns-on-hiding-stars t
      org-list-description-max-indent 4
      org-pretty-entities nil
      org-pretty-entities-include-sub-superscripts t
      org-priority-faces '((?a . error) (?b . warning) (?c . success))
      org-tags-column 0
      ;; org-tags-column -100
      org-startup-folded 'content
      org-startup-indented nil          ;Return it when it will be fixed
      org-startup-shrink-all-tables t
      org-edit-src-content-indentation 0
      org-cycle-separator-lines 1
      org-startup-with-inline-images nil
      org-cycle-include-plain-lists t
      org-hide-emphasis-markers nil
      org-insert-heading-respect-content t
      org-fontify-quote-and-verse-blocks t
      org-fontify-done-headline t
      org-image-actual-width 500
      org-use-sub-superscripts '{})

(setq org-special-ctrl-a/e t
      org-special-ctrl-k t
      org-ctrl-k-protect-subtree t
      org-imenu-depth 4
      org-export-with-sub-superscripts nil
      org-src-window-setup 'other-window
      org-catch-invisible-edits 'show-and-error
      org-return-follows-link t
      ;; org-M-RET-may-split-line nil
      org-list-use-circular-motion t
      org-export-with-drawers t
      org-export-with-properties t
      org-use-speed-commands t
      org-enforce-todo-dependencies t
      org-enforce-todo-checkbox-dependencies t)

(setq org-link-frame-setup
      '((vm . vm-visit-folder-other-frame)
        (vm-imap . vm-visit-imap-folder-other-frame)
        (gnus . org-gnus-no-new-news)
        (file . find-file)
        (wl . wl-other-frame)))

(org-display-inline-images)
(add-to-list 'org-modules 'org-habit)

(eval-after-load 'org
  '(org-load-modules-maybe t))

(set-face-attribute 'org-done nil :strike-through t)
(set-face-attribute 'org-headline-done nil :foreground "dim gray" :strike-through t)
(set-face-attribute 'org-tag nil :foreground "#4F4F4F" :background "#AC7373")

;; (defface org-tag-separator-face
;;   '((nil :foreground "#3F3F3F"))
;;   "org tag separator face")

;; (font-lock-add-keywords
;;  'org-mode
;;  '(("(:)\\[^\:]+(:)" (1 'org-tag-separator-face))))

;; (set-face-attribute 'org-tag nil :foreground "#3F3F3F")

;; (add-to-list 'org-tag-faces '("usdt" . (:foreground "#4F4F4F" :background "#AC7373")))
;; (add-to-list 'org-tag-faces '(".*" . (:foreground "#4F4F4F" :background "#AC7373")))
;; (setq org-tags-special-faces-re nil)

;; "[[:alnum:]_@#%]+"

(add-hook 'mail-mode-hook 'turn-on-orgtbl)
(add-hook 'mail-mode-hook 'turn-on-orgstruct)
#+end_src
*** Effort estimates
#+BEGIN_SRC emacs-lisp
(setq org-global-properties '(("Effort_ALL" . "0 0:30 1:00 2:00 4:00 6:00 8:00 16:00")))
(setq org-columns-default-format "%40ITEM(Task) %17Effort(Estimated Effort){:} %CLOCKSUM")
#+END_SRC
*** Agenda settings
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (quote ("~/Org/other.org"
                               "~/Org-mobile/home.org"
                               "~/Org/notes.org"
                               "~/Org/work/tasks.org")))
(setq org-directory "~/Org")
(setq org-agenda-restore-windows-after-quit t
      org-agenda-compact-blocks t
      org-agenda-archives-mode t
      org-agenda-start-with-follow-mode t
      org-agenda-follow-indirect t
      org-agenda-show-log t
      org-agenda-window-setup 'only-window
      org-agenda-span 'week
      org-agenda-show-future-repeats 'next)
#+END_SRC
*** Capture settings
#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file (concat org-directory "/notes.org"))

(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "" "Tasks")
         "* TODO %?\n%i"
         :clock-in t
         :clock-resume t)
        ("n" "Note" entry (file+headline "" "Notes")
         "* TODO %?\n%i")
        ("l" "Link" entry (file+headline "~/Org/links.org" "Links")
         "* %? %^L \n%T"
         :prepend t)
        ))

(setq org-refile-targets
      (quote ((nil :maxlevel . 6)
              (org-agenda-files :maxlevel . 6))))

(defadvice org-capture-finalize (after delete-capture-frame activate)
  "Advise capture-finalize to close the frame."
  (if (equal "capture" (frame-parameter nil 'name))
      (delete-frame)))

(defadvice org-capture-destroy (after delete-capture-frame activate)
  "Advise capture-destroy to close the frame."
  (if (equal "capture" (frame-parameter nil 'name))
    (delete-frame)))

(defadvice org-capture-select-template (around delete-capture-frame activate)
  "Advise org-capture-select-template to close the frame on abort."
  (unless (ignore-errors ad-do-it t)
    (setq ad-return-value "q"))
  (if (and
       (equal "q" ad-return-value)
       (equal "capture" (frame-parameter nil 'name)))
      (delete-frame)))

(use-package noflet)

(defun make-capture-frame ()
  "Create a new frame and run 'org-capture'."
  (interactive)
  (make-frame '((name . "capture")))
  (select-frame-by-name "capture")
  (delete-other-windows)
  (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
    (org-capture)))
#+END_SRC
*** Tag list
#+BEGIN_SRC emacs-lisp
(setq org-tag-alist '((:startgroup . nil)
                      ("@critical")
                      ("@medium")
                      ("@low")
                      (:endgroup . nil)))
#+END_SRC
*** Keywords list
Maybe it's a good idea to use unicode symbols for TODO keywords:
#+BEGIN_EXAMPLE
U+2611 ☑ ballot box with check
U+2610 ☐ ballot box
#+END_EXAMPLE
But there is no backward compatibility.
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "PROGRESS(p)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c@)")))
#+END_SRC
*** Mark task as DONE if all subtasks are DONE
#+BEGIN_SRC emacs-lisp
(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states)   ; turn off logging
    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

(add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
#+END_SRC
*** Custom keywords faces
#+BEGIN_SRC emacs-lisp
(setq org-todo-keyword-faces
      '(("PROGRESS" . (:foreground "#8CD0D3" :weight bold))
        ("WAITING" . (:foreground "#DFAF8F" :weight bold))
        ("CANCELLED" . (:foreground "#DCDCCC" :weight bold))))
#+END_SRC
*** Handle local file links by extension
#+BEGIN_SRC emacs-lisp
(setq org-file-apps
      '((auto-mode . emacs)
        ("\\.x?html\\'" . "firefox %s")
        ("\\(?:xhtml\\|html\\)\\'" . "firefox %s")
        ("\\.mm\\'" . default)
        ("\\.pdf\\'" . default)))
#+END_SRC
*** Clock settings
#+BEGIN_SRC emacs-lisp
(setq org-clock-persist t)
(org-clock-persistence-insinuate)
(setq org-log-into-drawer t)
(setq org-log-done nil)
(setq org-log-repeat nil)
(setq org-clock-out-when-done t)
(setq org-clock-out-remove-zero-time-clocks t)
(setq org-clock-report-include-clocking-task t)

(setq org-clock-in-switch-to-state "PROGRESS")

(setq non-clocking-states '("WAITING" "DONE" "TODO" "CANCELLED"))

(defun rr/read-non-clocking-state ()
  "Prompt to select non-clocking state."
  (interactive)
  (message "%s" (completing-read "Select state: " non-clocking-states)))

(defun rr/after-clock-stop (last)
  "Change TASK state after clock stop depends on LAST state."
  (when (not (or (string-equal last "WAITING")
                 (string-equal last "DONE")
                 (string-equal last "TODO")
                 (string-equal last "CANCELED")))
    (rr/read-non-clocking-state)))

(setq org-clock-out-switch-to-state 'rr/after-clock-stop)
#+END_SRC
*** Appearance
**** Org bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :init
  (setq org-bullets-bullet-list '("•"))
  (setq org-ellipsis "…")
  :config
  (add-hook 'org-mode-hook #'org-bullets-mode))
#+END_SRC
**** Org source code
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)

;; (require 'color)
;; (set-face-attribute 'org-block nil
;;                     :background
;;                     (color-darken-name
;;                      (face-attribute 'default :background) 2)
;;                     :extend t)
#+END_SRC
*** Notifications
#+begin_src emacs-lisp
(require 'appt)
(appt-activate t)

;; Use appointment data from org-mode
(defun rr/org-agenda-to-appt ()
  (interactive)
  (setq appt-time-msg-list nil)
  (org-agenda-to-appt))

(setq appt-display-duration 30)
;; Update after emacs start
(rr/org-agenda-to-appt)

;; Every day at 0:05
(run-at-time "0:05" (* 24 3600) 'rr/org-agenda-to-appt)

(add-hook 'after-save-hook
          '(lambda ()
             (if (org-agenda-file-p (buffer-file-name))
                 (rr/org-agenda-to-appt))))

(setq org-show-notification-handler 'message)
#+end_src
*** Markdown export
#+BEGIN_SRC emacs-lisp
(require 'ox-md nil t)
(eval-after-load 'org
  '(require 'ox-gfm nil t))
#+END_SRC
*** Confluence export
#+BEGIN_SRC emacs-lisp
(require 'ox-confluence)
#+END_SRC
*** Slack export
#+BEGIN_SRC emacs-lisp
(use-package ox-slack)
#+END_SRC
*** Org-mime
#+BEGIN_SRC emacs-lisp
(use-package org-mime
  :config
  (add-hook 'message-mode-hook
            (lambda ()
              (local-set-key (kbd "C-c M-o") 'org-mime-htmlize)))
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key (kbd "C-c M-o") 'org-mime-org-buffer-htmlize)))

  (add-hook 'org-mime-html-hook
            (lambda ()
              (org-mime-change-element-style
               "pre" (format "color: %s; background-color: %s; padding: 0.5em;"
                             "#E6E1DC" "#232323"))))

  ;; the following can be used to nicely offset block quotes in email bodies
  (add-hook 'org-mime-html-hook
            (lambda ()
              (org-mime-change-element-style
               "blockquote" "border-left: 2px solid gray; padding-left: 4px;")))

  (setq org-mime-export-options
        '(:section-numbers nil :with-author nil :with-toc nil)))
#+END_SRC
*** LaTeX export
#+BEGIN_SRC emacs-lisp
(require 'ox-latex)
(setq org-latex-inputenc-alist '(("utf8" . "utf8x")))
(setq org-latex-default-packages-alist
      '(("AUTO" "inputenc"  t ("pdflatex"))
        ("T2A"   "fontenc"   t ("pdflatex"))
        (""     "graphicx"  t)
        (""     "grffile"   t)
        (""     "longtable" nil)
        (""     "wrapfig"   nil)
        (""     "rotating"  nil)
        ("normalem" "ulem"  t)
        (""     "amsmath"   t)
        (""     "textcomp"  t)
        (""     "amssymb"   t)
        (""     "capt-of"   nil)
        (""     "hyperref"  nil)))
  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))

(add-to-list 'org-latex-classes
             '("org-article"
               "\\documentclass[11pt,a4paper]{article}
  \\usepackage{dejavu}
  \\usepackage[english, russian]{babel}
  \\usepackage{geometry}
  \\geometry{a4paper}
  \\geometry{left=2cm,right=1cm,top=1cm,bottom=1cm,includeheadfoot,headheight=1.2cm}
  \\renewcommand*\\familydefault{\\sfdefault}
  \\renewcommand*\\ttdefault{cmvtt}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(add-to-list 'org-latex-classes
             '("org-article-en"
               "\\documentclass[11pt,a4paper]{article}
  \\usepackage{dejavu}
  \\usepackage[english]{babel}
  \\usepackage{geometry}
  \\geometry{a4paper}
  \\geometry{left=2cm,right=1cm,top=1cm,bottom=1cm,includeheadfoot,headheight=1.2cm}
  \\renewcommand*\\familydefault{\\sfdefault}
  \\renewcommand*\\ttdefault{cmvtt}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC
*** Evaluate source code
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (sql . t)
   (shell . t)
   (sqlite . t)
   (haskell . t)))
(setq org-confirm-babel-evaluate t
      org-export-use-babel nil)

(use-package ob-async)
#+END_SRC
*** Manage passwords using org-mode
#+BEGIN_SRC emacs-lisp
(use-package org-password-manager
  :config
  (add-hook 'org-mode-hook 'org-password-manager-key-bindings))
#+END_SRC
*** Google calendar sync
#+BEGIN_SRC emacs-lisp
(use-package org-gcal)
#+END_SRC
*** JIRA integration for Org-mode
#+BEGIN_SRC emacs-lisp
(use-package org-jira
  :config
  (setq jiralib-url "https://jira.eoadm.com"))
#+END_SRC
*** Add org headings to recent
#+begin_src emacs-lisp
(use-package org-recent-headings
  :config
  (require 'org-recent-headings)
  (push 'worf-goto org-recent-headings-advise-functions)
  (setq helm-mini-default-sources '(helm-source-buffers-list
                                    helm-source-recentf
                                    helm-source-org-recent-headings
                                    helm-source-buffer-not-found))
  (org-recent-headings-mode))
#+end_src
*** Edit program comments and strings using Org-mode
#+begin_src emacs-lisp
(use-package poporg)
#+end_src
** COMMENT Email
*** COMMENT BSC configuration
#+BEGIN_SRC emacs-lisp
(require 'smtpmail)

(setq send-mail-function 'smtpmail-send-it
      message-send-mail-function 'smtpmail-send-it
      starttls-use-gnutls t
      mu4e-sent-messages-behavior 'sent
      mu4e-drafts-folder "/Drafts"
      mu4e-sent-folder "/Sent Items"
      user-mail-address "Roman.Rudakov@bsc-ideas.com"
      user-full-name "Roman Rudakov"
      smtpmail-default-smtp-server "smtp.office365.com"
      smtpmail-local-domain "bscpraha.cz"
      smtpmail-smtp-server "smtp.office365.com"
      smtpmail-stream-type 'starttls
      smtpmail-smtp-service 587)

(require 'mu4e)

;; use mu4e for e-mail in emacs
(setq mail-user-agent 'mu4e-user-agent)

(setq mu4e-view-use-gnus t)

(setq mu4e-maildir (expand-file-name "~/.mail/BSC"))
(setq mu4e-trash-folder  "/Deleted Items")

(setq mu4e-headers-auto-update t
      mu4e-compose-signature-auto-include nil
      mu4e-completing-read-function 'completing-read)

(setq mu4e-maildir-shortcuts
      '(("/INBOX" . ?i)
        ("/Sent Items" . ?s)
        ("/Deleted Items" . ?t)
        ("/Drafts" . ?d)))

(setq mu4e-use-fancy-chars nil)
(setq mu4e-view-show-images t)

(when (fboundp 'imagemagick-register-types)
  (imagemagick-register-types))

(setq mu4e-view-prefer-html t)
(add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)

(setq message-kill-buffer-on-exit t)

(setq mu4e-reply-to-address "Roman.Rudakov@bsc-ideas.com")

(require 'org-mu4e)
(setq org-mu4e-convert-to-html nil)
(add-hook 'message-send-hook 'rr/htmlize-mail)

(setq mu4e-headers-fields
      '((:human-date . 25)
        (:flags . 6)
        (:from . 22)
        (:subject . nil)))

;; Useful, but I prefer classic way
;; (use-package mu4e-conversation
;;   :after mu4e
;;   :config
;;   (global-mu4e-conversation-mode))

;; Run mu4e in background after starting emacs
(mu4e t)

(use-package helm-mu
  :after (helm mu4e)
  :config
  (define-key mu4e-main-mode-map "s" 'helm-mu)
  (define-key mu4e-headers-mode-map "s" 'helm-mu)
  (define-key mu4e-view-mode-map "s" 'helm-mu))
#+END_SRC
*** GMail configuration
#+BEGIN_SRC emacs-lisp
(require 'smtpmail)

(setq message-send-mail-function 'smtpmail-send-it
   starttls-use-gnutls t
   smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
   smtpmail-auth-credentials '(("smtp.gmail.com" 587 "phentagram@gmail.com" nil))
   smtpmail-default-smtp-server "smtp.gmail.com"
   smtpmail-smtp-server "smtp.gmail.com"
   smtpmail-smtp-service 587)

(setq user-mail-address "phentagram@gmail.com"
      user-full-name "Roman Rudakov")

(require 'mu4e)

(setq mu4e-drafts-folder "/[Gmail].Drafts")
(setq mu4e-sent-folder   "/[Gmail].Sent Mail")
(setq mu4e-trash-folder  "/[Gmail].Bin")

(setq mu4e-sent-messages-behavior 'delete)

;; use mu4e for e-mail in emacs
(setq mail-user-agent 'mu4e-user-agent)

(setq mu4e-view-use-gnus nil
      mu4e-hide-index-messages t)

(setq mu4e-maildir (expand-file-name "~/.mail/GMail"))

(setq mu4e-headers-auto-update t
      mu4e-compose-signature-auto-include nil
      mu4e-completing-read-function 'completing-read)

(setq mu4e-maildir-shortcuts
      '( ("/INBOX"               . ?i)
         ("/[Gmail].Sent Mail"   . ?s)
         ("/[Gmail].Trash"       . ?t)
         ("/[Gmail].All Mail"    . ?a)))

(setq mu4e-use-fancy-chars nil)
(setq mu4e-view-show-images t)

(when (fboundp 'imagemagick-register-types)
  (imagemagick-register-types))

(setq mu4e-view-prefer-html nil)
;; (setq mu4e-html2text-command "html2text --images-to-alt -b 72 --ignore-tables --ignore-emphasis")
(setq mu4e-html2text-command "w3m -dump -T text/html -O utf8 -graph")

(add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)

(setq message-kill-buffer-on-exit t)

(setq mu4e-reply-to-address "phentagram@gmail.com")

(require 'org-mu4e)
(setq org-mu4e-convert-to-html nil)
(add-hook 'message-send-hook 'rr/htmlize-mail)

(setq mu4e-headers-fields
      '((:human-date . 25)
        (:flags . 6)
        (:from . 22)
        (:subject . nil)))

;; Useful, but I prefer classic way
;; (use-package mu4e-conversation
;;   :after mu4e
;;   :config
;;   (global-mu4e-conversation-mode))

;; Run mu4e in background after starting emacs
(mu4e t)

(use-package helm-mu
  :after (helm mu4e)
  :config
  (define-key mu4e-main-mode-map "s" 'helm-mu)
  (define-key mu4e-headers-mode-map "s" 'helm-mu)
  (define-key mu4e-view-mode-map "s" 'helm-mu))
#+END_SRC
*** Alerts
#+BEGIN_SRC emacs-lisp
(use-package mu4e-alert
  :config
  (mu4e-alert-set-default-style 'libnotify)
  (add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
  (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display))
#+END_SRC
** COMMENT Activity watch
#+BEGIN_SRC emacs-lisp
(use-package activity-watch-mode
  :config
  (global-activity-watch-mode))
#+END_SRC
** Auto set indentation settings
#+begin_src emacs-lisp
(use-package dtrt-indent
  :config
  (setq dtrt-indent-verbosity 0)
  (add-hook 'prog-mode-hook 'dtrt-indent-mode))
#+end_src
** COMMENT Fill column indicator
#+begin_src emacs-lisp
(use-package fill-column-indicator
  :config
  (add-hook 'java-mode-hook 'fci-mode))
#+end_src
** Languages
*** LSP mode
**** Common setup
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :after pyvenv
  :config
  (setq lsp-eldoc-render-all nil
	lsp-highlight-symbol-at-point nil
	lsp-inhibit-message t
	lsp-response-timeout 60
	lsp-prefer-flymake nil
	lsp-message-project-root-warning t
	lsp-keep-workspace-alive t
	lsp-file-watch-threshold nil
	lsp-enable-folding t)

  ;; Avoid broken italic for Fira Code font
  ;; (set-face-attribute 'lsp-face-highlight-write nil :slant 'normal :weight 'bold)

  (require 'lsp-clients)

  ;; Rust lsp settings
  (setq lsp-rust-clippy-preference "on")
  (add-hook 'rust-mode-hook 'lsp)

  ;; XML setup
  (add-hook 'nxml-mode-hook 'lsp)

  ;; Python lsp settings
  (setq lsp-pyls-plugins-pylint-enabled t
	lsp-pyls-plugins-rope-completion-enabled nil
	lsp-pyls-plugins-jedi-completion-enabled t
	lsp-pyls-plugins-jedi-completion-include-params nil
	lsp-pyls-plugins-jedi-signature-help-enabled t)

  ;; Enable lsp for python after load dired local variables
  (add-hook 'hack-local-variables-hook
	    (lambda () (when (and pyvenv-virtual-env
				  (derived-mode-p 'python-mode))
			 (lsp))))

  ;; (setq lsp-print-io t)
  (add-hook 'lsp-after-open-hook 'lsp-enable-imenu))

(use-package lsp-ui
  :config
  (add-hook 'lsp-mode-hook 'lsp-ui-mode)
  (setq lsp-ui-sideline-update-mode 'line
	lsp-ui-doc-enable nil
	lsp-ui-sideline-show-hover nil
	lsp-ui-sideline-ignore-duplicate t
	lsp-ui-flycheck-enable t
	lsp-ui-flycheck-list-position 'bottom
	lsp-ui-flycheck-live-reporting t)

  ;; (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
  (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-find-references)
  )
#+END_SRC
**** Completion
#+BEGIN_SRC emacs-lisp
(use-package company-lsp
  :config
  (push 'company-lsp company-backends)
  (setq company-lsp-enable-snippet t))
#+END_SRC
**** Folding
#+begin_src emacs-lisp
(use-package origami
  :config
  (global-origami-mode))

(use-package lsp-origami
  :after origami
  :config
  (add-hook 'origami-mode-hook #'lsp-origami-mode))
#+end_src
*** DAP mode
**** Common setup
#+begin_src emacs-lisp
(use-package dap-mode
  :after lsp-java
  :config
  (dap-mode 1)
  (dap-ui-mode 1)

  (require 'dap-lldb)
  (require 'dap-java))
#+end_src
*** Code documentation
#+begin_src emacs-lisp
(use-package eldoc-box
  :config
  (eldoc-box-hover-mode))
#+end_src
*** Treemacs integration
#+begin_src emacs-lisp
(use-package treemacs
  :config
  (setq treemacs-no-png-images t
        treemacs-width 50))
(use-package lsp-treemacs)
(use-package treemacs-projectile)
#+end_src
*** Google c-style
#+begin_src emacs-lisp
(use-package google-c-style
  :config
  (add-hook 'c-mode-common-hook 'google-set-c-style)
   (add-hook 'c-mode-common-hook 'google-make-newline-indent))
#+end_src
*** Java
**** Common setup
#+begin_src emacs-lisp
(require 'cc-mode)
(require 'google-java-format)

(add-hook 'java-mode-hook
          (lambda () (setq-local fill-column 160)))

(add-hook 'java-mode-hook 'display-fill-column-indicator-mode)

(add-hook 'java-mode-hook
          (lambda ()
            (local-set-key (kbd "C-c C-f") 'google-java-format-buffer)))
(add-hook 'java-mode-hook
          (lambda ()
            (setq c-basic-offset 2)))
#+end_src
**** Workaround for smartparens
#+begin_src emacs-lisp
(define-key java-mode-map "(" nil)
(define-key java-mode-map "{" nil)
#+end_src
**** lsp-mode setup
#+BEGIN_SRC emacs-lisp
(use-package lsp-java
  :after lsp-mode
  :config
  (add-hook 'java-mode-hook 'lsp)
  (setq lsp-java-save-actions-organize-imports nil
        lsp-java-format-on-type-enabled nil)

  (setq lsp-java-format-settings-url "file:///home/rrudakov/Work/EPAM/eclipse-java-code-style.xml"
        lsp-java-format-settings-profile "GoogleStyle"
        lsp-java-format-enabled t)

  (add-to-list 'lsp-java-vmargs "-javaagent:/home/rrudakov/Soft/lombok/lombok.jar")
  (add-to-list 'lsp-java-vmargs "-noverify")
  (add-to-list 'lsp-java-vmargs "-XX:+UseG1GC")
  (add-to-list 'lsp-java-vmargs "-XX:+UseStringDeduplication")

  ;; (add-to-list 'lsp-java-vmargs "-Xbootclasspath/a:/home/rrudakov/Soft/lombok/lombok.jar")
  ;; ;; Spring boot support
  ;; (require 'lsp-java-boot)

  ;; ;; to enable the lenses
  (add-hook 'lsp-mode-hook #'lsp-lens-mode)
  ;; (add-hook 'java-mode-hook #'lsp-java-boot-lens-mode)
  )
#+END_SRC
**** Expand snippet for new class
#+BEGIN_SRC emacs-lisp
(setq auto-insert-query nil)
(setq auto-insert-directory (expand-file-name "templates/" user-emacs-directory))
(add-hook 'find-file-hook 'auto-insert)
(auto-insert-mode 1)

(add-to-list 'auto-insert-alist
             '("\\.java" . ["default-java.el"
                            (lambda () (yas-expand-snippet
                                   (buffer-string)
                                   (point-min)
                                   (point-max)))]))
#+END_SRC
*** Haskell
**** Intero
#+BEGIN_SRC emacs-lisp
(use-package intero
  :after flycheck
  :config
  (intero-global-mode)
  ;; (add-hook 'haskell-mode-hook 'company-mode)
  (flycheck-add-next-checker 'intero '(warning . haskell-hlint))
  ;; (custom-set-variables
  ;;  '(haskell-stylish-on-save t))
  ;; (add-hook 'haskell-mode-hook
  ;;           (lambda ()
  ;;             (set (make-local-variable 'company-backends)
  ;;                  (append '((company-capf company-dabbrev-code))
  ;;                          company-backends))))

  ;; (setq haskell-tags-on-save t)
  ;; (setq tags-revert-without-query t)
  ;; (setq haskell-indentation-electric-flag t)
  )
#+END_SRC
**** Haskell mode
#+begin_src emacs-lisp
(use-package haskell-mode
  :config
  (setq haskell-mode-stylish-haskell-path "brittany")
  (setq haskell-stylish-on-save t)

  (add-hook 'haskell-mode-hook 'haskell-auto-insert-module-template))
#+end_src
**** COMMENT lsp-haskell
#+begin_src emacs-lisp
(use-package lsp-haskell
  :after lsp-mode
  :config
  (add-hook 'haskell-mode-hook #'lsp))
#+end_src
**** Align rules
#+BEGIN_SRC emacs-lisp
(add-hook 'align-load-hook
          (lambda ()
            (add-to-list 'align-rules-list
                         '(haskell-types
                           (regexp . "\\(\\s-+\\)\\(::\\|∷\\)\\s-+")
                           (modes quote (haskell-mode literate-haskell-mode))))))
(add-hook 'align-load-hook
          (lambda ()
            (add-to-list 'align-rules-list
                         '(haskell-assignment
                           (regexp . "\\(\\s-+\\)=\\s-+")
                           (modes quote (haskell-mode literate-haskell-mode))))))

(add-hook 'align-load-hook
          (lambda ()
            (add-to-list 'align-rules-list
                         '(haskell-arrows
                           (regexp . "\\(\\s-+\\)\\(->\\|→\\)\\s-+")
                           (modes quote (haskell-mode literate-haskell-mode))))))

(add-hook 'align-load-hook
          (lambda ()
            (add-to-list 'align-rules-list
                         '(haskell-left-arrows
                           (regexp . "\\(\\s-+\\)\\(<-\\|←\\)\\s-+")
                           (modes quote (haskell-mode literate-haskell-mode))))))
#+END_SRC
**** Haskell doc mode
#+BEGIN_SRC emacs-lisp
(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
#+END_SRC
**** Indentation
#+BEGIN_SRC emacs-lisp
(use-package hindent
  :config
  (add-hook 'haskell-mode-hook #'hindent-mode))
#+END_SRC
**** Stack interface
#+BEGIN_SRC emacs-lisp
(use-package hasky-stack
  :config
  (global-set-key (kbd "C-c h e") #'hasky-stack-execute)
  (global-set-key (kbd "C-c h h") #'hasky-stack-package-action)
  (global-set-key (kbd "C-c h i") #'hasky-stack-new))
#+END_SRC
**** Ligatures support
#+begin_src emacs-lisp
(use-package hasklig-mode
  :hook (haskell-mode))
#+end_src
*** LaTeX
**** AucTEX tweaks
#+BEGIN_SRC emacs-lisp
(setq TeX-auto-save t)
(setq TeX-parse-self t)

;; Use pdf-tools to open PDF files
(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
      TeX-source-correlate-start-server t)

;; Update PDF buffers after successful LaTeX runs
(add-hook 'TeX-after-compilation-finished-functions
          #'TeX-revert-document-buffer)

(setq-default TeX-master nil)
(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(add-hook 'LaTeX-mode-hook (lambda () (auto-fill-mode -1)))
(setq reftex-plug-into-AUCTeX t)

(eval-after-load 'latex '(add-to-list 'LaTeX-verbatim-environments "lstlisting"))

(font-lock-add-keywords
 'latex-mode
 `((,(concat "^\\s-*\\\\\\("
             "\\(documentclass\\|\\(sub\\)?section[*]?\\)"
             "\\(\\[[^]% \t\n]*\\]\\)?{[-[:alnum:]_ ]+"
             "\\|"
             "\\(begin\\|end\\){document"
             "\\)}.*\n?")
    (0 'your-face append))))

(add-hook 'LaTeX-mode-hook (lambda ()
                             (TeX-fold-mode 1)))
#+END_SRC
*** Python
**** Virtualenv
#+BEGIN_SRC emacs-lisp
(use-package pyvenv
  :config
  (pyvenv-tracking-mode)
  (add-hook 'pyvenv-post-activate-hooks 'lsp))
#+END_SRC
**** Default interpreter
#+BEGIN_SRC emacs-lisp
(setq python-shell-interpreter "python")
#+END_SRC
**** Import management
***** Automatically sort imports
#+BEGIN_SRC emacs-lisp
(use-package isortify
  :config
  (setq isortify-line-width 79
        isortify-multi-line-output 3
        isortify-trailing-comma t)
  (add-hook 'python-mode-hook 'isortify-mode))
#+END_SRC
**** Format code
#+BEGIN_SRC emacs-lisp
(use-package blacken
  :config
  (setq blacken-line-length 79
        blacken-allow-py36 t)
  ;; (add-hook 'python-mode-hook 'blacken-mode)
  )
(use-package py-yapf
  :config
  ;; (add-hook 'python-mode-hook 'py-yapf-enable-on-save)
  )
#+END_SRC
**** Tox
#+BEGIN_SRC emacs-lisp
(use-package tox
  :config
  (setq tox-runner 'py.test)
  (global-set-key "\C-ct" 'tox-current-class))
#+END_SRC
**** Sphinx doc
#+begin_src emacs-lisp
(use-package sphinx-doc
  :config
  (add-hook 'python-mode-hook (lambda ()
                                (require 'sphinx-doc)
                                (sphinx-doc-mode t))))
#+end_src
**** Editing requirements files
#+BEGIN_SRC emacs-lisp
(use-package pip-requirements)
#+END_SRC
**** Custom bindings
#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook (lambda ()
                              (local-set-key (kbd "C-c j") 'rr/python-split-string)))
#+END_SRC
*** JSON
#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :config
  (add-hook 'json-mode-hook #'flycheck-mode)
  (setq json-reformat:indent-width 2)
  (setq json-reformat:pretty-string? t))
#+END_SRC
*** YAML
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+END_SRC
*** WEB
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.jinja2\\'" . web-mode))

  (setq web-mode-markup-indent-offset 2
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 2
        web-mode-enable-auto-closing t
        web-mode-enable-auto-pairing nil
        web-mode-enable-css-colorization t)

  ;; Set django engine for django projects
  (defun rr/django-project-hook ()
    (if (projectile-project-p)
        (if (file-exists-p (concat (projectile-project-root) "manage.py"))
            (web-mode-set-engine "django"))))

  (add-hook 'web-mode-hook 'rr/django-project-hook))
#+END_SRC
*** JavaScript
**** TypeScript
#+BEGIN_SRC emacs-lisp
(use-package tide
  :after (company flycheck web-mode)
  :config
  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    (company-mode +1))

  ;; aligns annotation to the right hand side
  (setq company-tooltip-align-annotations t)
  (setq tide-sort-completions-by-kind t
        tide-completion-detailed t)

  ;; formats the buffer before saving
  (add-hook 'before-save-hook 'tide-format-before-save)

  (add-hook 'typescript-mode-hook #'setup-tide-mode)
  ;; configure javascript-tide checker to run after your default javascript checker
  (flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append)

  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
  (add-hook 'web-mode-hook
            (lambda ()
              (when (string-equal "tsx" (file-name-extension buffer-file-name))
                (setup-tide-mode))))

  ;; enable typescript-tslint checker
  (flycheck-add-mode 'typescript-tslint 'web-mode)

  (add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
  (add-hook 'web-mode-hook
            (lambda ()
              (when (string-equal "jsx" (file-name-extension buffer-file-name))
                (setup-tide-mode))))
  ;; configure jsx-tide checker to run after your default jsx checker
  (flycheck-add-mode 'javascript-eslint 'web-mode)
  (flycheck-add-next-checker 'javascript-eslint 'jsx-tide 'append))
#+END_SRC
**** Angular support
#+begin_src emacs-lisp
(use-package ng2-mode
  :after tide
  :config
  (require 'ng2-mode)
  (require 'flycheck)
  (require 'tide)
  (flycheck-add-mode 'typescript-tide 'ng2-ts-mode)
  (add-to-list 'auto-mode-alist '("\\.component.html" . ng2-html-mode)))
#+end_src
*** Groovy
#+BEGIN_SRC emacs-lisp
(use-package groovy-mode)
#+END_SRC
*** Rust
**** Rust-mode
#+begin_src emacs-lisp
(use-package rust-mode)
#+end_src
*** Gherkin
**** Syntax highlighting
#+begin_src emacs-lisp
(use-package feature-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.story$" . feature-mode)))
#+end_src
** Debugger
#+BEGIN_SRC emacs-lisp
(use-package realgud)
#+END_SRC
** Create GIF screencasts
#+begin_src emacs-lisp
(use-package gif-screencast)
#+end_src
** Funny
*** Speed type
#+BEGIN_SRC emacs-lisp
(use-package speed-type)
#+END_SRC
** Set keybindings
*** Common
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-[") 'align)
#+END_SRC
*** Org
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-switchb)

(global-set-key (kbd "<f5>") 'org-clock-goto)

(add-hook 'org-agenda-mode (lambda () local-set-key (kbd "C-c m") 'org-agenda-month-view))
(add-hook 'org-mode-hook (lambda () (local-set-key (kbd "C-c u") 'rr/org-replace-link-by-link-description)))
#+END_SRC
