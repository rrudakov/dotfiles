* My Emacs configuration
** Keybindings
*** Common
#+BEGIN_SRC text
  M-:	Eval command
  C-x t   Switch to ansi-terminal or create new
  C-x T   Create new ansi-terminal
#+END_SRC
*** Python
#+BEGIN_SRC text
  C-c C-r r Refactoring commands
#+END_SRC
*** Haskell
#+BEGIN_SRC text
  M-q	reformats the current declaration. When inside a comment, it fills the current paragraph instead, like the standard M-q
  C-M-\	reformats the current region
#+END_SRC
*** Org-mode
#+BEGIN_SRC text
  C-c ^		Sort headlines
  C-c / 		Prompt to make sparce-tree
  C-c - 		Cycle list level ('-', '+', '1.', '1)' etc.)
  C-c C-x f	Footnote action command
  C-c C-c		When at footnote, go to definition, When at definition, go back to reference
  C-c |		Create new table
  M-S-<right>	Insert new table column
  C-c +		Sum all numbers in current column
  C-c C-x p	Insert property
  C-c C-x C-d	Display time summaries for each subtree in the current buffer
#+END_SRC
**** Agenda view
#+BEGIN_SRC text
  p	Previous period
  n	Next period
  .	Today
  F	Follow mode
#+END_SRC
*** Projectile
#+BEGIN_EXAMPLE
  C-p p s s	Projectile ag search
#+END_EXAMPLE
*** Terminal
#+BEGIN_SRC text
  C-c C-j Switch to term-line-mode, which you can then treat like a normal emacs buffer (move, yank, etc)
  C-c C-k Return to term-char-mode, which will act like a traditional ansi-term
#+END_SRC
** Useful commands
*** Org-mode
**** Lint document
#+BEGIN_SRC text
  org-lint
#+END_SRC
** Syntax help
*** Org-mode
**** Unordered lists
#+BEGIN_SRC text
  Start with '-', '+' or '*' (star not recommended)
#+END_SRC
**** Ordered lists
#+BEGIN_SRC text
  Starts with '1.' or '1)'
#+END_SRC
**** Description list
#+BEGIN_SRC text
  Unordered lists with separator '::'
#+END_SRC
** Configuration
*** Start emacs server
#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC
*** Common
**** Increase performance
#+BEGIN_SRC emacs-lisp
  (setq gnutls-min-prime-bits 4096)
  ;; Font lock settings
  ;; (setq jit-lock-stealth-time 16
  ;;       jit-lock-defer-contextually t
  ;;       jit-lock-stealth-nice 0.5)
  ;; (setq-default font-lock-multiline t)
#+END_SRC
**** Highlight expression in parens
#+BEGIN_SRC emacs-lisp
  (setq show-paren-style 'expression)
#+END_SRC
**** Highlight matching parens
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 2)
#+END_SRC
**** Indicate empty lines at the end of the window in the left fringe
#+BEGIN_SRC emacs-lisp
  (set-default 'indicate-empty-lines t)
#+END_SRC
**** Enable y/n answers instead of yes/no
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
**** Highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
#+END_SRC
**** Set default font
Good choices:
+ [[https://slackbuilds.org/repository/14.2/system/Iosevka/][Iosevka]]
+ [[https://github.com/mozilla/Fira][Fira Mono]]
+ [[https://github.com/adobe-fonts/source-code-pro][SourceCodePro]] :: Currently used
+ [[https://slackbuilds.org/repository/14.2/system/hack-font-ttf/][Hack]]
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'default-frame-alist '(font . "Fira Mono-10"))
  ;; (set-frame-font "Fira Mono-10")
  (add-to-list 'default-frame-alist '(font . "Source Code Variable-10"))
  (set-frame-font "Source Code Variable-10")

#+END_SRC
**** Open files ends with "rc" in conf-unix-mode
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.*rc$" . conf-unix-mode))
#+END_SRC
**** Sen specific browser to open links
#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-firefox)
#+END_SRC
**** Use UTF-8 as default coding system
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'set-charset-priority)
    (set-charset-priority 'unicode))
  (prefer-coding-system        'utf-8)
  (set-terminal-coding-system  'utf-8)
  (set-keyboard-coding-system  'utf-8)
  (set-selection-coding-system 'utf-8)
  (setq locale-coding-system   'utf-8)
  (setq-default buffer-file-coding-system 'utf-8)
#+END_SRC
**** Some useful settings
#+BEGIN_SRC emacs-lisp
  (setq-default
   ad-redefinition-action 'accept   ; silence advised function warnings
   apropos-do-all t                 ; make `apropos' more useful
   compilation-always-kill t        ; kill compilation process before starting another
   compilation-ask-about-save nil   ; save all buffers on `compile'
   compilation-scroll-output t
   confirm-nonexistent-file-or-buffer t
   enable-recursive-minibuffers nil
   ;; keep the point out of the minibuffer
   minibuffer-prompt-properties '(read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt)
   ;; History & backup settings (save nothing, that's what git is for)
   auto-save-default nil
   create-lockfiles nil
   history-length 1000
   indent-tabs-mode nil
   make-backup-files nil)

  (setq-default
   bidi-display-reordering nil ; disable bidirectional text for tiny performance boost
   blink-matching-paren nil    ; don't blink--too distracting
   cursor-in-non-selected-windows nil  ; hide cursors in other windows
   frame-inhibit-implied-resize t
   ;; remove continuation arrow on right fringe
   fringe-indicator-alist (delq (assq 'continuation fringe-indicator-alist)
                                fringe-indicator-alist)
   highlight-nonselected-windows nil
   image-animate-loop t
   indicate-buffer-boundaries nil
   indicate-empty-lines nil
   max-mini-window-height 0.3
   mode-line-default-help-echo nil ; disable mode-line mouseovers
   mouse-yank-at-point t           ; middle-click paste at point, not at click
   resize-mini-windows 'grow-only  ; Minibuffer resizing
   show-help-function nil          ; hide :help-echo text
   split-width-threshold 160	 ; favor horizontal splits
   uniquify-buffer-name-style 'forward
   use-dialog-box nil              ; always avoid GUI
   visible-cursor nil
   x-stretch-cursor nil
   ;; defer jit font locking slightly to [try to] improve Emacs performance
   jit-lock-defer-time nil
   jit-lock-stealth-nice 0.1
   jit-lock-stealth-time 0.2
   jit-lock-stealth-verbose nil
   ;; `pos-tip' defaults
   pos-tip-internal-border-width 6
   pos-tip-border-width 1
   ;; no beeping or blinking please
   ring-bell-function #'ignore
   visible-bell nil)

  (setq save-interprogmam-kill-before-paste t)
#+END_SRC
**** Be quiet at startup
#+BEGIN_SRC emacs-lisp
  (advice-add #'display-startup-echo-area-message :override #'ignore)
  (setq inhibit-startup-message t
        inhibit-startup-echo-area-message user-login-name
        initial-major-mode 'fundamental-mode
        initial-scratch-message nil)
#+END_SRC
**** More reliable inter-window border
The native border "consumes" a pixel of the fringe on righter-most splits,
'window-divider' does not. Available since Emacs 25.1.
#+BEGIN_SRC emacs-lisp
  (setq-default window-divider-default-places t
                window-divider-default-bottom-width 0
                window-divider-default-right-width 1)
  (window-divider-mode +1)
#+END_SRC
**** Relegate tooltips to echo area only
#+BEGIN_SRC emacs-lisp
  (tooltip-mode -1)
#+END_SRC
**** Disable menu bar
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
#+END_SRC
**** Disable toolbar
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
#+END_SRC
**** Graphic mode settings
#+BEGIN_SRC emacs-lisp
  (defvar my-ui-fringe-size '4 "Default fringe width.")

  (when (display-graphic-p)
    (scroll-bar-mode -1)
    (setq-default line-spacing 0)
    ;; buffer name  in frame title
    (setq-default frame-title-format '("RR Emacs"))
    ;; standardize fringe width
    ;; (push (cons 'left-fringe  my-ui-fringe-size) default-frame-alist)
    ;; (push (cons 'right-fringe my-ui-fringe-size) default-frame-alist)
    )
#+END_SRC
**** Use SSH for tramp-mode
#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")
#+END_SRC
**** Set default input method
#+BEGIN_SRC emacs-lisp
  (setq default-input-method "russian-computer")
#+END_SRC
**** Replace selected text on input
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode)
#+END_SRC
**** Disabled commands
#+BEGIN_SRC emacs-lisp
  (setq disabled-command-function nil)
#+END_SRC
**** EPA
#+BEGIN_SRC emacs-lisp
  (setq epa-pinentry-mode 'loopback)
#+END_SRC
**** Prettify symbols
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode)
#+END_SRC
**** Smooth scrolling
#+BEGIN_SRC emacs-lisp
  ;; (setq scroll-conservatively 101) ;; move minimum when cursor exits view, instead of recentering
  ;; (setq mouse-wheel-scroll-amount '(1)) ;; mouse scroll moves 1 line at a time, instead of 5 lines
  ;; (setq mouse-wheel-progressive-speed nil) ;; on a long mouse scroll keep scrolling by 1 line
  ;; (setq scroll-step 1
  ;;       scroll-conservatively 10000
  ;;       auto-hscroll-mode 'current-line)
  ;; (setq mouse-wheel-scroll-amount '(2 ((shift) . 1) ((control) . nil))
  ;;       mouse-wheel-progressive-speed nil)
#+END_SRC
**** Default mode
#+BEGIN_SRC emacs-lisp
  (setq-default major-mode 'text-mode)
#+END_SRC
**** Fill column
#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 79)
  (add-hook 'text-mode-hook 'auto-fill-mode)
#+END_SRC
**** Auto revert changes
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode 1)
  (setq auto-revert-verbose nil)
#+END_SRC
**** Ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("org" (name . "^.*org$"))
                 ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
                 ("mu4e" (name . "\*mu4e\*"))
                 ("Python" (mode . python-mode))
                 ("Haskell" (mode . haskell-mode))
                 ("Web" (mode . web-mode))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))
                 ))))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))

  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)

  ;; Don't ask for confirmation to delete marked buffers
  (setq ibuffer-expert t)
#+END_SRC
**** Use package default settings
#+BEGIN_SRC emacs-lisp
  (setq-default use-package-always-ensure t)
#+END_SRC
**** Recent files
#+BEGIN_SRC emacs-lisp
  (require 'recentf)
  (setq recentf-max-saved-items 200
        recentf-max-menu-items 15)
  (recentf-mode)
#+END_SRC
*** Theme
**** All the icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC
**** Color scheme
#+BEGIN_SRC emacs-lisp
  (use-package gruvbox-theme
    :config
    (load-theme 'gruvbox-dark-medium t))
  ;; (use-package spacemacs-common
  ;;  :ensure spacemacs-theme
  ;;  :config
  ;;  (setq spacemacs-theme-comment-bg nil
  ;;        spacemacs-theme-comment-italic t
  ;;        spacemacs-theme-org-height nil)
  ;;  (load-theme 'spacemacs-dark t))
  ;; (use-package solarized-theme
  ;;   :config
  ;;   (setq solarized-use-variable-pitch nil)
  ;;   (setq solarized-high-contrast-mode-line t)
  ;;   ;; (setq x-underline-at-descent-line t)
  ;;   (load-theme 'solarized-dark t))
  ;; (use-package zenburn-theme
  ;;   :config
  ;;   (load-theme 'zenburn t))
  ;; (use-package color-theme-sanityinc-tomorrow
  ;;   :ensure t
  ;;   :config
  ;;   (load-theme 'sanityinc-tomorrow-night t))
#+END_SRC
**** Highlight symbol at point
#+BEGIN_SRC emacs-lisp
  (use-package highlight-symbol
    :config
    (highlight-symbol-nav-mode)

    (add-hook 'prog-mode-hook (lambda () (highlight-symbol-mode)))

    (setq highlight-symbol-idle-delay 0.2
          highlight-symbol-on-navigation-p t)

    (global-set-key [(control shift mouse-1)]
                    (lambda (event)
                      (interactive "e")
                      (goto-char (posn-point (event-start event)))
                      (highlight-symbol-at-point)))

    (global-set-key (kbd "M-n") 'highlight-symbol-next)
    (global-set-key (kbd "M-p") 'highlight-symbol-prev))
#+END_SRC
**** Modeline
***** Custom functions
****** Git status
#+BEGIN_SRC emacs-lisp
  (defun rr/modeline-git-vc ()
    "Show GIT status."
    (let ((branch (mapconcat 'concat (cdr (split-string vc-mode "[:-]")) "-")))
      (when (buffer-file-name)
        (pcase (vc-state (buffer-file-name))
          (`up-to-date
           (concat
            (propertize (all-the-icons-octicon "git-branch")
                        'face `(:inherit mode-line :family ,(all-the-icons-octicon-family) :height 1.2)
                        'display '(raise -0.1))
            (propertize (format " %s" branch) 'face `(:inherit mode-line))))
          (`edited
           (concat
            (propertize (all-the-icons-octicon "git-branch")
                        'face `(:inherit mode-line :foreground "#87afaf" :family ,(all-the-icons-octicon-family) :height 1.2)
                        'display '(raise -0.1))
            (propertize (format " %s" branch) 'face `(:inherit mode-line :foreground "#87afaf"))))
          (`added
           (concat
            (propertize (all-the-icons-octicon "git-branch")
                        'face `(:inherit mode-line :foreground "#b8bb26" :family ,(all-the-icons-octicon-family) :height 1.2)
                        'display '(raise -0.1))
            (propertize (format " %s" branch) 'face `(:inherit mode-line :foreground "#b8bb26"))))
          (`unregistered " ??")
          (`removed
           (concat
            (propertize (all-the-icons-octicon "git-branch")
                        'face `(:inherit mode-line :foreground "#fb4934" :family ,(all-the-icons-octicon-family) :height 1.2)
                        'display '(raise -0.1))
            (propertize (format " %s" branch) 'face `(:inherit mode-line :foreground "#fb4934"))))
          (`needs-merge " Con")
          (`needs-update " Upd")
          (`ignored " Ign")
          (_ " Unk")))))
#+END_SRC
****** SVN status
#+BEGIN_SRC emacs-lisp
  (defun rr/modeline-svn-vc ()
    "Show SVN status."
    (let ((revision (cadr (split-string vc-mode "-"))))
      (concat
       (propertize (format " %s" (all-the-icons-faicon "cloud")) 'face `(:height 1.2) 'display '(raise -0.1))
       (propertize (format " · %s" revision) 'face `(:height 0.9)))))
#+END_SRC
****** Flycheck status
#+BEGIN_SRC emacs-lisp
  (defun rr/flycheck-status-text ()
    (let* ((text (pcase flycheck-last-status-change
                   (`finished (if flycheck-current-errors
                                  (let ((count (let-alist (flycheck-count-errors flycheck-current-errors)
                                                 (+ (or .warning 0) (or .error 0)))))
                                    (propertize (format "✖ %s Issue%s" count (if (eq 1 count) "" "s")) 'face `(:inherit mode-line :foreground "#fb4934")))
                                (propertize "✔ No Issues" 'face `(:inherit mode-line :foreground "#afaf00"))))
                   (`running     (propertize "⟲ Running" 'face `(:inherit mode-line :foreground "#87afaf")))
                   (`no-checker  (propertize "⚠ No Checker" 'face `(:inherit mode-line)))
                   (`not-checked (propertize "✖ Disabled" 'face' `(:inherit mode-line)))
                   (`errored     (propertize "⚠ Error" 'face `(:inherit mode-line :foreground "#fb4934")))
                   (`interrupted (propertize "⛔ Interrupted" 'face `(:inherit mode-line :foreground "#fb4934")))
                   (`suspicious  ""))))
      (propertize text)))
#+END_SRC
****** Update vc-state in all buffers
#+BEGIN_SRC emacs-lisp
  ;; (defun rr/refresh-vc-state ()
  ;;   "Refresh vc-state on all buffers."
  ;;   (dolist (buff (buffer-list))
  ;;     (with-current-buffer buff
  ;;       (when (vc-mode)
  ;;         (progn
  ;;           (vc-refresh-state)
  ;;           (diff-hl-update))))))

  (defun rr/refresh-vc-state ()
    "Refresh vc-state on all buffers."
    (dolist (buff (buffer-list))
      (with-current-buffer buff
        (when (vc-mode)
          (vc-refresh-state)))))
#+END_SRC
***** Spaceline
****** Faces
#+BEGIN_SRC emacs-lisp
  (defface rr/spaceline-unmodified
    '((t :inherit 'spaceline-unmodified :background "#87afaf"))
    "Face for unmodified buffer in the mode-line.")

  (defface rr/spaceline-modified
    '((t :inherit 'spaceline-modified :background "#d75f5f"))
    "Face for modified buffer in the mode-line.")

  (defface rr/spaceline-read-only
    '((t :inherit 'spaceline-read-only :background "#d787af"))
    "Face for read-only buffer in the mode-line.")

  (defun rr/spaceline-face (face active)
    "For spaceline-face-func get FACE and ACTIVE."
    (pcase (cons face active)
      ('(face1 . t)   'mode-line)
      ('(face1 . nil) 'mode-line-inactive)
      ('(face2 . t)   'mode-line)
      ('(face2 . nil) 'mode-line-inactive)
      ('(line . t)    'mode-line)
      ('(line . nil)  'mode-line-inactive)
      ('(highlight . t)
       (cond
        (buffer-read-only 'rr/spaceline-read-only)
        ((buffer-modified-p) 'rr/spaceline-modified)
        (t 'rr/spaceline-unmodified)))
      ('(highlight . nil) 'powerline-inactive1)
      (_ 'error)))
#+END_SRC
****** Common configuration
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :config
    (setq powerline-height 40)
    (setq powerline-default-separator 'utf-8)
    (setq spaceline-separator-dir-left '(right . right))
    (setq spaceline-separator-dir-right '(right . right))
    (setq powerline-default-separator 'alternate)
    (setq spaceline-window-numbers-unicode t)
    (setq spaceline-face-func 'rr/spaceline-face))
#+END_SRC
****** Custom theme
#+BEGIN_SRC emacs-lisp
  (require 'spaceline-config)

  ;; Define custom segments
  (spaceline-define-segment rr/version-control
    "Show VC status."
    (when vc-mode
      (cond
       ((string-match "Git[:-]" vc-mode) (rr/modeline-git-vc))
       ((string-match "SVN-" vc-mode) (rr/modeline-svn-vc))
       (t (propertize (format "%s" vc-mode)))))
    :enabled t)

  (spaceline-define-segment rr/flycheck-status
    "Print current flycheck status."
    (when (and (bound-and-true-p flycheck-mode))
      (format "%s " (rr/flycheck-status-text)))
    :enabled t)

  (spaceline-define-segment rr/modified
    "Buffer status."
    " "
    :enabled t)

  ;; My custom theme
  (defun rr/spaceline-theme (&rest additional-segments)
    "Apply my spaceline theme ADDITIONAL-SEGMENTS are inserted on the right."
    (spaceline-install
      `(((rr/modified
          workspace-number
          window-number)
         :fallback evil-state
         :face highlight-face
         :priority 0)
        (anzu :priority 4)
        auto-compile
        ((buffer-id remote-host)
         :priority 5)
        (point-position line-column)
        (buffer-position :priority 0)
        (process :when active)
        (mu4e-alert-segment :when active)
        (erc-track :when active)
        (org-pomodoro :when active)
        (org-clock :when active))
      `(which-function
        (python-pyvenv :fallback python-pyenv)
        purpose
        (battery :when active)
        (selection-info :priority 2)
        input-method
        (buffer-encoding-abbrev :priority 3)
        (global :when active)
        ,@additional-segments
        (rr/version-control :when active :priority 7)
        major-mode
        (rr/flycheck-status :when active)))

    (setq-default mode-line-format '("%e" (:eval (spaceline-ml-main)))))

  (rr/spaceline-theme)
  (spaceline-compile)
#+END_SRC
**** Highlight indentation
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :config
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
    (setq highlight-indent-guides-method 'character
          highlight-indent-guides-character ?\x258F))
#+END_SRC
*** Semantic
**** Enable semantic mode global
#+BEGIN_SRC emacs-lisp
  ;; (semantic-mode 1)
#+END_SRC
**** Highlight current function
#+BEGIN_SRC emacs-lisp
  ;; (global-semantic-highlight-func-mode 1)
#+END_SRC
**** Show function definition at the top of buffer
#+BEGIN_SRC emacs-lisp
  ;; (global-semantic-stickyfunc-mode 1)
#+END_SRC
**** Enable database
#+BEGIN_SRC emacs-lisp
  ;; (global-semanticdb-minor-mode 1)
#+END_SRC
*** SQL
**** Make PostgreSQL default
#+BEGIN_SRC emacs-lisp
  (eval-after-load "sql"
    '(progn
       (sql-set-product 'postgres)
       )
    )
#+END_SRC
**** Indentation
#+BEGIN_SRC emacs-lisp
  (use-package sql-indent
    :ensure t
    :config
    (eval-after-load "sql"
      '(load-library "sql-indent")))
#+END_SRC
*** Which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC
*** Undo tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :config
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-diff t
          undo-tree-visualizer-timestamps t))
#+END_SRC
*** Autocomplete
**** YASnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (yas-reload-all)
    (add-hook 'prog-mode-hook #'yas-minor-mode))
#+END_SRC
**** Common
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-dabbrev-downcase nil
          company-sort-by-occurrence t)
    (setq-default company-idle-delay .2
                  company-minimum-prefix-length 2
                  company-require-match nil
                  company-tooltip-align-annotations t)
    (add-to-list 'company-backends 'company-dabbrev-code)
    (add-to-list 'company-backends 'company-yasnippet)
    (add-to-list 'company-backends 'company-files)
    (add-to-list 'company-backends 'company-elisp))
#+END_SRC
**** Child frame
#+BEGIN_SRC emacs-lisp
  ;; (use-package company-childframe
  ;;   :after company
  ;;   :config
  ;;   (company-childframe-mode 1))
#+END_SRC
**** Completeon with icons
#+BEGIN_SRC emacs-lisp
  ;; (use-package company-box
  ;;   :config
  ;;   (add-hook 'company-mode-hook 'company-box-mode))
#+END_SRC
**** Statistic
Show more offten used completeons first
#+BEGIN_SRC emacs-lisp
  ;; (use-package company-statistics
  ;;   :config
  ;;   (company-statistics-mode))
#+END_SRC
**** Quick help
#+BEGIN_SRC emacs-lisp
  (use-package company-quickhelp
    :config
    (company-quickhelp-mode 1))
#+END_SRC
**** Languages
***** LaTeX
#+BEGIN_SRC emacs-lisp
  (use-package company-auctex
    :ensure t
    :config
    (company-auctex-init))
#+END_SRC
***** WEB
#+BEGIN_SRC emacs-lisp
  (use-package company-web
    :ensure t
    :config
    (add-to-list 'company-backends 'company-web-html)
    (add-to-list 'company-backends 'company-web-jade)
    (add-to-list 'company-backends 'company-web-slim))
#+END_SRC
***** Shell
#+BEGIN_SRC emacs-lisp
  (use-package company-shell
    :ensure t
    :config
    (add-to-list 'company-backends 'company-shell))
#+END_SRC
***** JavaScript
#+BEGIN_SRC emacs-lisp
  (use-package company-tern
    :ensure t
    :after tern
    :config
    (add-to-list 'company-backends 'company-tern)
    (setq company-tooltip-align-annotations t))
#+END_SRC
**** Solve company and yasnippet conflict
#+BEGIN_SRC emacs-lisp
  (defun company-yasnippet-or-completion ()
    "Solve company yasnippet conflicts."
    (interactive)
    (let ((yas-fallback-behavior
           (apply 'company-complete-common nil)))
      (yas-expand)))

  (add-hook 'company-mode-hook
            (lambda ()
              (substitute-key-definition
               'company-complete-common
               'company-yasnippet-or-completion
               company-active-map)))
#+END_SRC
*** Paradox
#+BEGIN_SRC emacs-lisp
  (use-package paradox
    :ensure t
    :config
    (setq-default
     paradox-column-width-package 27
     paradox-column-width-version 13
     paradox-execute-asynchronously t
     paradox-hide-wiki-packages t))
#+END_SRC
*** Ivy
**** Install and activate ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t
          ivy-display-style 'fancy
          ivy-count-format "(%d/%d) ")
    :bind (("<f2>" . bs-show)))
#+END_SRC
**** Swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind (("C-s" . swiper)
           ("C-r" . swiper)
           ("C-c C-r" . ivy-resume)))
#+END_SRC
**** Counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind (("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file)
           ("<f1> f" . counsel-describe-function)
           ("<f1> v" . counsel-describe-variable)
           ("<f1> l" . counsel-find-library)
           ("<f1> i" . counsel-info-lookup-symbol)
           ("<f1> u" . counsel-unicode-char)
           ("M-y" . counsel-yank-pop)
           :map ivy-minibuffer-map
           ("M-y" . ivy-next-line)))
#+END_SRC
*** Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :init
    (setq sp-show-pair-delay 0.1
          sp-show-pair-from-inside t)
    :config
    (require 'smartparens-config)
    (smartparens-global-mode)
    (show-smartparens-global-mode)
    (setq smartparens-strict-mode t))
#+END_SRC
*** Popup windows settings
I've tried ~shackle~, but it doesn't close help window after go to any
link.
**** Popwin
#+BEGIN_SRC emacs-lisp
  ;; (use-package popwin
  ;;   :ensure t
  ;;   :config
  ;;   (setq popwin:popup-window-height 0.5)
  ;;   (popwin-mode 1))
#+END_SRC
*** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
*** Anzu
#+BEGIN_SRC emacs-lisp
  (use-package anzu
    :ensure t
    :config
    (global-anzu-mode +1)
    (setq anzu-cons-mode-line-p nil))
#+END_SRC
*** Windows navigation
#+BEGIN_SRC emacs-lisp
  ;; (use-package winum
  ;;   :ensure t
  ;;   :config
  ;;   (setq winum-auto-setup-mode-line nil)
  ;;   (winum-mode))
  (use-package ace-window
    :ensure t
    :config
    (global-set-key (kbd "M-o") 'ace-window))
#+END_SRC
*** Dired
#+BEGIN_SRC emacs-lisp
  (use-package dired+
    :ensure t
    :config
    (require 'dired+)
    (setq dired-listing-switches "--group-directories-first -alh")
    (toggle-diredp-find-file-reuse-dir 1))
#+END_SRC
*** Projectile
**** Basic setup
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'ivy)
    (add-to-list 'projectile-globally-ignored-files "*.log")
    (setq projectile-enable-caching t)
    (setq projectile-mode-line '(:eval (format " [%s]" (projectile-project-name)))))
#+END_SRC
**** Counsel projectile
#+BEGIN_SRC emacs-lisp
  ;; (use-package counsel-projectile
  ;;   :config
  ;;   (counsel-projectile-mode 1))
#+END_SRC
*** Htmlize
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :ensure t)
#+END_SRC
*** Syntax check
**** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config
    (add-hook 'after-init-hook #'global-flycheck-mode)

    ;; (setq flycheck-indication-mode 'right-fringe)

    ;; (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow
    ;;   [0 0 0 0 0 4 12 28 60 124 252 124 60 28 12 4 0 0 0 0])

    (when (fboundp 'define-fringe-bitmap)
      (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow
        (vector #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00011100
                #b00111110
                #b00111110
                #b00111110
                #b00011100
                #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00000000)))

    (let ((bitmap 'flycheck-fringe-bitmap-double-arrow))
      (flycheck-define-error-level 'error
        :severity 2
        :overlay-category 'flycheck-error-overlay
        :fringe-bitmap bitmap
        :fringe-face 'flycheck-fringe-error)
      (flycheck-define-error-level 'warning
        :severity 1
        :overlay-category 'flycheck-warning-overlay
        :fringe-bitmap bitmap
        :fringe-face 'flycheck-fringe-warning)
      (flycheck-define-error-level 'info
        :severity 0
        :overlay-category 'flycheck-info-overlay
        :fringe-bitmap bitmap
        :fringe-face 'flycheck-fringe-info))
      
    (setq-default flycheck-disabled-checkers
                  (append flycheck-disabled-checkers
                          '(javascript-jshint)))

    (setq-default flycheck-disabled-checkers
                  (append flycheck-disabled-checkers
                          '(json-jsonlist)))

    (setq-default flycheck-disabled-checkers
                  (append flycheck-disabled-checkers
                          '(python-flake8)))

    ;; (add-to-list 'flycheck-checkers 'python-flake8)
    ;; (add-to-list 'flycheck-checkers 'python-pylint)
    )
#+END_SRC
*** Version control
**** GIT
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
    (global-set-key (kbd "C-x g") 'magit-status)
    (setq magit-completing-read-function 'ivy-completing-read)
    (add-hook 'focus-in-hook 'rr/refresh-vc-state)
    (add-hook 'magit-post-refresh-hook 'rr/refresh-vc-state))
#+END_SRC
**** Highlight diff
#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :init
    (setq-default fringes-outside-margins t)
    :config
    (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
    (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
#+END_SRC
*** Multiple cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :config
    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
    (global-set-key (kbd "C-c C-d") 'mc/skip-to-next-like-this))
#+END_SRC
*** Expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC
*** Search and grep utilities
#+BEGIN_SRC emacs-lisp
  (use-package wgrep
    :config
    (setq wgrep-auto-save-buffer t))

  (use-package wgrep-ag)

  (use-package ag
    :after wgrep-ag)
#+END_SRC
*** Terminal emulator
#+BEGIN_SRC emacs-lisp
  (use-package sane-term
    :ensure t
    :config
    (global-set-key (kbd "C-x t") 'sane-term)
    (global-set-key (kbd "C-x T") 'sane-term-create)


  ;; Optional convenience binding. This allows C-y to paste even when in term-char-mode (see below). 
    (add-hook
     'term-mode-hook
     (lambda ()
       (define-key term-raw-map (kbd "C-y")
         (lambda ()
           (interactive)
           (term-line-mode)
           (yank)
           (term-char-mode))))))
#+END_SRC
*** Rainbow mode
#+BEGIN_QUOTE
Colorize color names in buffers
#+END_QUOTE
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :config
    (setq rainbow-x-colors-major-mode-list '(web-mode python-mode)))
#+END_SRC
*** REST client
Quite interesting package. I think it will be replace for Postman for me.
#+BEGIN_SRC emacs-lisp
  (use-package restclient :ensure t)
#+END_SRC
And autocompletion for it:
#+BEGIN_SRC emacs-lisp
  (use-package company-restclient
    :ensure t
    :config
    (add-to-list 'company-backends 'company-restclient))
#+END_SRC
And even org-babel integration:
#+BEGIN_SRC emacs-lisp
  (use-package ob-restclient
    :ensure t
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((restclient . t))))
#+END_SRC
*** PDF tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :config
    (pdf-tools-install))
#+END_SRC
*** Gitignore templates
#+BEGIN_SRC emacs-lisp
  (use-package gitignore-templates :ensure t)
#+END_SRC
*** Edit text areas in browsers from emacs
#+BEGIN_SRC emacs-lisp
  (use-package edit-server
    :ensure t
    :config
    (when (require 'edit-server nil t)
      (setq edit-server-new-frame nil)
      (edit-server-start)))
#+END_SRC
*** Org
**** Some tweaks
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'turn-on-font-lock)
  (add-hook 'org-mode-hook (lambda () (setq-local global-hl-line-mode nil)))
  ;; (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))
  (setq org-startup-folded 'content ;; overview | content | all | showeverything
        org-cycle-separator-lines 0
        org-tags-column -100
        org-startup-indented t
        org-src-window-setup 'current-window
        org-catch-invisible-edits 'show-and-error
        org-return-follows-link t
        org-startup-with-inline-images nil
        org-cycle-include-plain-lists t
        org-hide-emphasis-markers t
        org-insert-heading-respect-content t
        ;; org-M-RET-may-split-line nil
        org-list-use-circular-motion t
        org-fontify-quote-and-verse-blocks t
        org-pretty-entities nil
        org-fontify-done-headline t
        org-image-actual-width 500
        org-export-with-drawers t
        org-export-with-properties t)
  (org-display-inline-images)
  (add-to-list 'org-modules 'org-habit)
  (add-hook 'mail-mode-hook 'turn-on-orgtbl)
  (add-hook 'mail-mode-hook 'turn-on-orgstruct)
  (add-to-list 'flycheck-checkers 'org-lint)
#+END_SRC
**** Effort estimates
#+BEGIN_SRC emacs-lisp
  (setq org-global-properties '(("Effort_ALL" . "0 0:30 1:00 2:00 4:00 6:00 8:00 16:00")))
  (setq org-columns-default-format "%40ITEM(Task) %17Effort(Estimated Effort){:} %CLOCKSUM")
#+END_SRC
**** Agenda settings
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (quote ("~/Org/"
                                 "~/Org/work")))
  (setq org-directory "~/Org")
  (setq org-enforce-todo-dependencies t)
  (setq org-agenda-restore-windows-after-quit t)
#+END_SRC
**** Capture settings
#+BEGIN_SRC emacs-lisp
  (setq org-default-notes-file (concat org-directory "/notes.org"))

  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "" "Tasks")
           "* TODO %?\n%i"
           :clock-in t
           :clock-resume t)
          ("n" "Note" entry (file+headline "" "Notes")
           "* TODO %?\n%i")
          ("l" "Link" entry (file+headline "~/Org/links.org" "Links")
           "* %? %^L \n%T"
           :prepend t)
          ))

  (setq org-refile-targets
        (quote ((nil :maxlevel . 6)
                (org-agenda-files :maxlevel . 6))))

  (defadvice org-capture-finalize (after delete-capture-frame activate)
    "Advise capture-finalize to close the frame."
    (if (equal "capture" (frame-parameter nil 'name))
        (delete-frame)))

  (defadvice org-capture-destroy (after delete-capture-frame activate)
    "Advise capture-destroy to close the frame."
    (if (equal "capture" (frame-parameter nil 'name))
      (delete-frame)))

  (defadvice org-capture-select-template (around delete-capture-frame activate)
    "Advise org-capture-select-template to close the frame on abort."
    (unless (ignore-errors ad-do-it t)
      (setq ad-return-value "q"))
    (if (and
         (equal "q" ad-return-value)
         (equal "capture" (frame-parameter nil 'name)))
        (delete-frame)))

  (use-package noflet
    :ensure t)

  (defun make-capture-frame ()
    "Create a new frame and run 'org-capture'."
    (interactive)
    (make-frame '((name . "capture")))
    (select-frame-by-name "capture")
    (delete-other-windows)
    (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
      (org-capture)))
#+END_SRC
**** Tag list
#+BEGIN_SRC emacs-lisp
  (setq org-tag-alist '((:startgroup . nil)
                        ("@critical" . ?C)
                        ("@medium" . ?M)
                        ("@low" . ?L)
                        (:endgroup . nil)))
#+END_SRC
**** Keywords list
Maybe it's a good idea to use unicode symbols for TODO keywords:
#+BEGIN_EXAMPLE
  U+2714 ✔ heavy check mark
  U+2717 ✗ ballot x
  U+2611 ☑ ballot box with check
  U+2610 ☐ ballot box
#+END_EXAMPLE
But there is no backward compatibility.
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "PROGRESS(p)" "WAITING(w)" "|" "DONE(d)")))
#+END_SRC
**** Mark task as DONE if all subtasks are DONE
#+BEGIN_SRC emacs-lisp
  (defun org-summary-todo (n-done n-not-done)
    "Switch entry to DONE when all subentries are done, to TODO otherwise."
    (let (org-log-done org-log-states)   ; turn off logging
      (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

  (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
#+END_SRC
**** Custom keywords faces
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keyword-faces
        '(("PROGRESS" 'font-lock-constant-face)
          ("WAITING" 'org-todo)))
#+END_SRC
**** Clock settings
#+BEGIN_SRC emacs-lisp
  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)
  (setq org-log-into-drawer t)
  (setq org-log-done nil)
  (setq org-clock-out-when-done t)
  (setq org-clock-out-remove-zero-time-clocks t)
  (setq org-clock-report-include-clocking-task t)

  (defun rr/set-progress (last)
    "Set PROGRESS state if LAST is different."
    (when (not (string-equal last "PROGRESS"))
      (let ()
        (remove-hook 'org-after-todo-state-change-hook 'rr/start-clock)
        "PROGRESS")))

  (add-hook 'org-clock-in-hook
            (lambda ()
              (add-hook 'org-after-todo-state-change-hook 'rr/start-clock)))

  (setq org-clock-in-switch-to-state 'rr/set-progress)

  (setq non-clocking-states '("WAITING" "DONE"))

  (defun rr/ido-non-clocking-state ()
    "Prompt to select non-clocking state."
    (interactive)
    (message "%s" (ido-completing-read "Select state: " non-clocking-states)))

  (defun rr/after-clock-stop (last)
    "Change TASK state after clock stop depends on LAST state."
    (when (not (or (string-equal last "WAITING")
                   (string-equal last "DONE")
                   (string-equal last "TODO")))
      (let ()
        (remove-hook 'org-after-todo-state-change-hook 'rr/stop-clock)
        (if (y-or-n-p "Current task DONE? ")
              "DONE"
            "WAITING"))))

  (add-hook 'org-clock-out-hook
            (lambda ()
              (add-hook 'org-after-todo-state-change-hook 'rr/stop-clock)))

  (setq org-clock-out-switch-to-state 'rr/after-clock-stop)

  (defun rr/stop-clock ()
    "Stop clock if task state changed to WAITING or DONE."
    (when (and (org-clocking-p)
               (or (string-equal org-state "WAITING")
                   (string-equal org-state "DONE")
                   (string-equal org-state "TODO"))
               (< (point) org-clock-marker)
               (> (save-excursion (outline-next-heading) (point))
                  org-clock-marker))
      (let ((org-log-note-clock-out nil)
            (org-clock-out-switch-to-state nil))
        (org-clock-out))))

  (add-hook 'org-after-todo-state-change-hook 'rr/stop-clock)

  (defun rr/start-clock ()
    "Start clock if task state changed to PROGRESS."
    (if (org-clocking-p)
        (when (and (string-equal org-state "PROGRESS")
                   (not (string-equal (nth 4 (org-heading-components)) org-clock-heading)))
          (let ((org-clock-in-switch-to-state nil))
            (org-clock-in)))
      (when (string-equal org-state "PROGRESS")
        (let ((org-clock-in-switch-to-state nil))
          (org-clock-in)))))

  (add-hook 'org-after-todo-state-change-hook 'rr/start-clock)
#+END_SRC
**** Appearance
***** Org bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :init

    (setq org-bullets-bullet-list '("•"))

    (setq org-ellipsis "…")

    :config
    (add-hook 'org-mode-hook #'org-bullets-mode))
#+END_SRC
***** Org source code
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)

  (require 'color)
  (set-face-attribute 'org-block nil :background
                      (color-darken-name
                       (face-attribute 'default :background) 3))
#+END_SRC
**** Alerts
#+BEGIN_SRC emacs-lisp
  (use-package org-alert
    :ensure t
    :config
    (setq org-alert-enable t)
    (setq alert-default-style 'libnotify))
#+END_SRC
**** Markdown export
#+BEGIN_SRC emacs-lisp
  (require 'ox-md nil t)
  (eval-after-load "org"
    '(require 'ox-gfm nil t))
#+END_SRC
**** Confluence export
#+BEGIN_SRC emacs-lisp
  (require 'ox-confluence)
#+END_SRC
**** Org-mime
#+BEGIN_SRC emacs-lisp
  (use-package org-mime
    :ensure t
    :config
    (add-hook 'message-mode-hook
            (lambda ()
              (local-set-key (kbd "C-c M-o") 'org-mime-htmlize)))
    (add-hook 'org-mode-hook
              (lambda ()
                (local-set-key (kbd "C-c M-o") 'org-mime-org-buffer-htmlize)))

    (add-hook 'org-mime-html-hook
              (lambda ()
                (org-mime-change-element-style
                 "pre" (format "color: %s; background-color: %s; padding: 0.5em;"
                               "#E6E1DC" "#232323"))))

    ;; the following can be used to nicely offset block quotes in email bodies
    (add-hook 'org-mime-html-hook
              (lambda ()
                (org-mime-change-element-style
                 "blockquote" "border-left: 2px solid gray; padding-left: 4px;")))

    (setq org-mime-export-options
          '(:section-numbers nil :with-author nil :with-toc nil)))
#+END_SRC
**** Jekyll export
#+BEGIN_SRC emacs-lisp
  (defvar rr-org-blog-files "~/MySoft/beriya.github.io/org"
    "Path to my blog org files.")

  (setq org-export-with-section-numbers nil
        org-publish-project-alist
        `(("org-post"
           :base-directory ,rr-org-blog-files
           :base-extension "org"
           :publishing-directory "~/MySoft/beriya.github.io"
           :publishing-function org-html-publish-to-html
           :headline-levels 6
           :html-extension "html"
           :body-only t
           :with-toc nil
           :recursive t
           :section-number nil)

          ("org-images"
           :base-directory "~/MySoft/beriya.github.io/org/img"
           :base-extension "jpg\\|gif\\|png"
           :publishing-directory "~/MySoft/beriya.github.io/img"
           :publishing-function org-publish-attachment
           :recursive t)
          ("blog" :components ("org-post" "org-images"))
          ))

  (defun rr/org-link-img (path)
    "Link type for images in my project by relative PATH."
    (org-open-file-with-emacs
     (format "%s/img/%s" rr-org-blog-files path)))


  (defun rr/org-link-img-export (path desc format)
    "How to export img links using PATH and DESC for html FORMAT."
    (cond
     ((eq format 'html)
      (format "<img src=\"/img/%s\" alt=\"%s\"/>" path desc))))

  (org-add-link-type "img" 'rr/org-link-img 'rr/org-link-img-export)
#+END_SRC
**** LaTeX export
#+BEGIN_SRC emacs-lisp
  (require 'ox-latex)
  (setq org-latex-inputenc-alist '(("utf8" . "utf8x")))
  (setq org-latex-default-packages-alist
        '(("AUTO" "inputenc"  t ("pdflatex"))
          ("T2A"   "fontenc"   t ("pdflatex"))
          (""     "graphicx"  t)
          (""     "grffile"   t)
          (""     "longtable" nil)
          (""     "wrapfig"   nil)
          (""     "rotating"  nil)
          ("normalem" "ulem"  t)
          (""     "amsmath"   t)
          (""     "textcomp"  t)
          (""     "amssymb"   t)
          (""     "capt-of"   nil)
          (""     "hyperref"  nil)))
#+END_SRC
**** Evaluate source code
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (sql . t)
     (shell . t)
     (haskell . t)))
  (setq org-confirm-babel-evaluate t)
#+END_SRC
**** Manage passwords using org-mode
#+BEGIN_SRC emacs-lisp
  (use-package org-password-manager
    :config
    (add-hook 'org-mode-hook 'org-password-manager-key-bindings))
#+END_SRC
**** Google calendar sync
#+BEGIN_SRC emacs-lisp
  (use-package org-gcal
    :config
    (setq org-gcal-client-id "746234569233-nrqvf2rke8skag1hadbu15clkpmgr9bk.apps.googleusercontent.com"
          org-gcal-client-secret "1JolKXlhxyoNmABe8qIbw40H"
          org-gcal-file-alist '(("phentagram@gmail.com" .  "~/gmail.org"))))
#+END_SRC
*** Email
**** Sending email
#+BEGIN_SRC emacs-lisp
  (require 'smtpmail)

  (setq message-send-mail-function 'smtpmail-send-it
        smtpmail-starttls-credentials '(("outlook.office365.com" 587 nil nil))
        smtpmail-default-smtp-server "outlook.office365.com"
        smtpmail-smtp-server "outlook.office365.com"
        smtpmail-smtp-service 587
        smtpmail-stream-type 'starttls
        smtpmail-debug-info t)

  (require 'mu4e)

  (setq mu4e-maildir (expand-file-name "~/Maildir/BSC"))
  (setq mu4e-drafts-folder "/Drafts")
  (setq mu4e-sent-folder   "/Sent Items")
  (setq mu4e-trash-folder  "/Deleted Items")

  (setq mu4e-get-mail-command "mbsync BSC"
        mu4e-update-interval 120
        mu4e-headers-auto-update t
        mu4e-compose-signature-auto-include nil)

  (setq mu4e-maildir-shortcuts
        '(("/INBOX" . ?i)
          ("/Sent Items" . ?s)
          ("/Deleted Items" . ?t)
          ("/Drafts" . ?d)))

  (setq mu4e-use-fancy-chars t)
  (setq mu4e-show-images t)

  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))

  (setq mu4e-view-prefer-html t)

  (setq smtpmail-queue-mail t
        smtpmail-queue-dir   "~/Maildir/queue/cur")

  (setq message-kill-buffer-on-exit t)

  (setq mu4e-reply-to-address "Roman.Rudakov@bsc-ideas.com"
        user-mail-address "Roman.Rudakov@bsc-ideas.com"
        user-full-name  "Roman Rudakov")


  (require 'org-mu4e)
  (setq org-mu4e-convert-to-html t)

  (setq mu4e-headers-fields
        '((:human-date . 25)
          (:flags . 6)
          (:from . 22)
          (:subject . nil)))
#+END_SRC
**** Alerts
#+BEGIN_SRC emacs-lisp
  (use-package mu4e-alert
    :ensure t
    :config
    (mu4e-alert-set-default-style 'libnotify)
    (add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
    (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display))
#+END_SRC
*** Languages
**** LSP mode
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :config
    (add-hook 'lsp-after-open-hook 'lsp-enable-imenu))

  (use-package lsp-ui
    :config
    (add-hook 'lsp-mode-hook 'lsp-ui-mode))
#+END_SRC
**** Haskell
***** Intero
#+BEGIN_SRC emacs-lisp
  (use-package intero
    :after flycheck
    :config
    (add-hook 'haskell-mode-hook 'company-mode)
    (add-hook 'haskell-mode-hook 'intero-mode)
    (flycheck-add-next-checker 'intero '(warning . haskell-hlint))
    (custom-set-variables
     '(haskell-stylish-on-save t))
    (add-hook 'haskell-mode-hook
              (lambda ()
                (set (make-local-variable 'company-backends)
                     (append '((company-capf company-dabbrev-code))
                             company-backends))))
    (add-hook 'haskell-mode-hook 'turn-on-haskell-unicode-input-method)
    (setq haskell-tags-on-save t)
    (setq tags-revert-without-query t)
    (setq haskell-indentation-electric-flag t)
    (add-hook 'haskell-mode-hook 'haskell-auto-insert-module-template)
    ;; (add-hook 'haskell-mode-hook 'flyspell-prog-mode)
    )
#+END_SRC
***** Align rules
#+BEGIN_SRC emacs-lisp
  (add-hook 'align-load-hook
            (lambda ()
              (add-to-list 'align-rules-list
                           '(haskell-types
                             (regexp . "\\(\\s-+\\)\\(::\\|∷\\)\\s-+")
                             (modes quote (haskell-mode literate-haskell-mode))))))
  (add-hook 'align-load-hook
            (lambda ()
              (add-to-list 'align-rules-list
                           '(haskell-assignment
                             (regexp . "\\(\\s-+\\)=\\s-+")
                             (modes quote (haskell-mode literate-haskell-mode))))))

  (add-hook 'align-load-hook
            (lambda ()
              (add-to-list 'align-rules-list
                           '(haskell-arrows
                             (regexp . "\\(\\s-+\\)\\(->\\|→\\)\\s-+")
                             (modes quote (haskell-mode literate-haskell-mode))))))

  (add-hook 'align-load-hook
            (lambda ()
              (add-to-list 'align-rules-list
                           '(haskell-left-arrows
                             (regexp . "\\(\\s-+\\)\\(<-\\|←\\)\\s-+")
                             (modes quote (haskell-mode literate-haskell-mode))))))
#+END_SRC
***** Haskell doc mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
#+END_SRC
***** Indentation
#+BEGIN_SRC emacs-lisp
  (use-package hindent
    :ensure t
    :config
    (add-hook 'haskell-mode-hook #'hindent-mode))
#+END_SRC
***** Stack interface
#+BEGIN_SRC emacs-lisp
  (use-package hasky-stack
    :ensure t
    :config
    (global-set-key (kbd "C-c h e") #'hasky-stack-execute)
    (global-set-key (kbd "C-c h h") #'hasky-stack-package-action)
    (global-set-key (kbd "C-c h i") #'hasky-stack-new))
#+END_SRC
**** LaTeX
***** AucTEX tweaks
#+BEGIN_SRC emacs-lisp
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t)

  (eval-after-load 'latex '(add-to-list 'LaTeX-verbatim-environments "lstlisting"))

  (font-lock-add-keywords
   'latex-mode
   `((,(concat "^\\s-*\\\\\\("
               "\\(documentclass\\|\\(sub\\)?section[*]?\\)"
               "\\(\\[[^]% \t\n]*\\]\\)?{[-[:alnum:]_ ]+"
               "\\|"
               "\\(begin\\|end\\){document"
               "\\)}.*\n?")
      (0 'your-face append))))

  (add-hook 'LaTeX-mode-hook (lambda ()
                               (TeX-fold-mode 1)))
#+END_SRC
**** Python
***** Virtualenv
#+BEGIN_SRC emacs-lisp
  (use-package virtualenvwrapper
    :config
    (venv-initialize-interactive-shells)
    (venv-initialize-eshell))
#+END_SRC
***** Elpy
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :config
    (elpy-enable)
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook (lambda () (highlight-indentation-mode 0))))
#+END_SRC
***** Flyckeck using mypy
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-mypy
    :config
    (add-hook 'python-mode-hook 'flycheck-mode))
#+END_SRC
***** Traad
#+BEGIN_SRC emacs-lisp
  ;; (use-package traad
  ;;   :ensure t)
#+END_SRC
***** Anaconda mode
#+BEGIN_SRC emacs-lisp
  ;; (use-package anaconda-mode
  ;;   :ensure t
  ;;   :config
  ;;   (add-hook 'python-mode-hook 'anaconda-mode)
  ;;   (add-hook 'python-mode-hook 'anaconda-eldoc-mode)
  ;;   (add-to-list 'python-shell-extra-pythonpaths "/home/rrudakov/Work/QAAutotesting/src")
  ;;   (add-to-list 'python-shell-extra-pythonpaths "/home/rrudakov/Work/allure-pytest"))
#+END_SRC
***** Python language server
#+BEGIN_SRC emacs-lisp
  ;; (use-package lsp-python
  ;;   :after (lsp-mode)
  ;;   :config
  ;;   (add-hook 'python-mode-hook #'lsp-python-enable))
#+END_SRC
***** Completeon
#+BEGIN_SRC emacs-lisp
  ;; (use-package company-anaconda
  ;;   :ensure t
  ;;   :after anaconda-mode
  ;;   :config
  ;;   (eval-after-load "company"
  ;;     '(add-to-list 'company-backends 'company-anaconda)))
  ;; (use-package company-jedi
  ;;   :ensure t
  ;;   :config
  ;;   (defun company-jedi-setup ()
  ;;     (add-to-list 'company-backends 'company-jedi))
  ;;   (add-hook 'python-mode-hook 'company-jedi-setup)
  ;;   (setq jedi:complete-on-dot t)
  ;;   ;; (add-hook 'python-mode-hook (lambda ()
  ;;   ;;                               (hack-local-variables)
  ;;   ;;                               (venv-workon project-venv-name)))
  ;;   (add-hook 'python-mode-hook 'jedi:setup))
  (use-package company-lsp
    :config
    (push 'company-lsp company-backends)
    (setf company-lsp-async t))
#+END_SRC
***** Import management
#+BEGIN_SRC emacs-lisp
  ;; (use-package py-isort
  ;;     :ensure t
  ;;     :config
  ;;     (setq py-isort-options '("--lines=79"))
  ;;     (add-hook 'before-save-hook 'py-isort-before-save))
#+END_SRC
***** Format code
#+BEGIN_SRC emacs-lisp
  (use-package yapfify
    :ensure t
    :config
    (add-hook 'python-mode-hook 'yapf-mode))
#+END_SRC
***** Tox
#+BEGIN_SRC emacs-lisp
  (use-package tox
    :ensure t
    :config
    (setq tox-runner 'py.test)
    (global-set-key "\C-ct" 'tox-current-class))
#+END_SRC
***** Code folding
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook 'hs-minor-mode)
#+END_SRC
**** JSON
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :ensure t
    :config
    (add-hook 'json-mode-hook #'flycheck-mode)
    (setq json-reformat:indent-width 2)
    (setq json-reformat:pretty-string? t))
#+END_SRC
**** YAML
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+END_SRC
**** JavaScript
***** TypeScript
#+BEGIN_SRC emacs-lisp
  (use-package tide
    :ensure t
    :after company
    :config
    (defun setup-tide-mode ()
      (interactive)
      (tide-setup)
      (flycheck-mode +1)
      (setq flycheck-check-syntax-automatically '(save mode-enabled))
      (eldoc-mode +1)
      (tide-hl-identifier-mode +1)
      (company-mode +1))

    ;; aligns annotation to the right hand side
    (setq company-tooltip-align-annotations t)

    ;; formats the buffer before saving
    (add-hook 'before-save-hook 'tide-format-before-save)

    (add-hook 'typescript-mode-hook #'setup-tide-mode)
    (add-hook 'js2-mode-hook #'setup-tide-mode)
    ;; configure javascript-tide checker to run after your default javascript checker
    (flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append))
#+END_SRC
**** WEB
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :after smartparens tide
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.jinja2\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
    (add-hook 'web-mode-hook
              (lambda ()
                (when (string-equal "tsx" (file-name-extension buffer-file-name))
                  (setup-tide-mode))))
    ;; enable typescript-tslint checker
    (flycheck-add-mode 'typescript-tslint 'web-mode)

    (add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
    (add-hook 'web-mode-hook
              (lambda ()
                (when (string-equal "jsx" (file-name-extension buffer-file-name))
                  (setup-tide-mode))))
    ;; configure jsx-tide checker to run after your default jsx checker
    (flycheck-add-mode 'javascript-eslint 'web-mode)
    (flycheck-add-next-checker 'javascript-eslint 'jsx-tide 'append)
    (setq web-mode-markup-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-enable-auto-pairing t
          web-mode-enable-auto-closing t
          web-mode-enable-css-colorization t))
#+END_SRC
**** Groovy
#+BEGIN_SRC emacs-lisp
  ;; (use-package groovy-mode :ensure t)
#+END_SRC
*** Funny
**** Speed type
#+BEGIN_SRC emacs-lisp
  (use-package speed-type :ensure t)
#+END_SRC
*** Set keybindings
**** Common
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-[") 'align)
#+END_SRC
**** Org
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cb" 'org-switchb)

  (global-set-key (kbd "<f5>") 'org-clock-goto)
  (global-set-key (kbd "<f6>") 'org-clock-in)
  (global-set-key (kbd "<f7>") 'org-clock-out)
  ;; (global-set-key (kbd "<f7>") (lambda ()
  ;;                                (interactive)
  ;;                                (org-call-with-arg 'org-todo "PAUSED")))
  ;; (global-set-key (kbd "<f8>") (lambda ()
  ;;                                (interactive)
  ;;                                (org-call-with-arg 'org-todo "DONE")))
  (global-set-key "\C-cm" 'org-agenda-month-view)
#+END_SRC
